{"version":3,"sources":["../src/actions/swap.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/transfer.ts","../src/actions/bridge.ts","../src/types/index.ts","../src/actions/deploy.ts","../src/utils/contracts.ts","../../../node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.mjs","../src/environment.ts","../src/actions/getBalanceTestnet.ts","../src/index.ts","../src/actions/getBalance.ts","../src/actions/stake.ts","../src/actions/faucet.ts","../src/actions/gnfd.ts","../src/providers/gnfd.ts","../src/abi/CrossChainAbi.ts","../src/abi/TokenHubAbi.ts"],"sourcesContent":["import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { executeRoute, getRoutes } from \"@lifi/sdk\";\nimport { parseEther } from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, SwapResponse } from \"../types\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async swap(params: SwapParams): Promise<SwapResponse> {\n        elizaLogger.debug(\"Starting swap with params:\", JSON.stringify(params, null, 2));\n        \n        // Validate chain\n        this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"After validation, params:\", JSON.stringify(params, null, 2));\n\n        const fromAddress = this.walletProvider.getAddress();\n        elizaLogger.debug(`From address: ${fromAddress}`);\n        \n        const chainId = this.walletProvider.getChainConfigs(params.chain).id;\n        elizaLogger.debug(`Chain ID: ${chainId}`);\n\n        // Configure LI.FI SDK\n        elizaLogger.debug(`Configuring LI.FI SDK for chain: ${params.chain}`);\n        this.walletProvider.configureLiFiSdk(params.chain);\n\n        // Resolve token addresses if they're symbols\n        let fromTokenAddress = params.fromToken;\n        let toTokenAddress = params.toToken;\n        \n        // Handle fromToken\n        if (!params.fromToken.startsWith('0x')) {\n            try {\n                elizaLogger.debug(`Resolving from token symbol: ${params.fromToken}`);\n                fromTokenAddress = await this.walletProvider.getTokenAddress(\n                    params.chain,\n                    params.fromToken\n                );\n                elizaLogger.debug(`Resolved from token address: ${fromTokenAddress}`);\n                \n                // Special handling for native token\n                if (params.fromToken.toUpperCase() === 'BNB') {\n                    elizaLogger.debug('Using special native token address for BNB');\n                    fromTokenAddress = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\n                }\n            } catch (error) {\n                elizaLogger.error(`Error resolving from token address for ${params.fromToken}:`, error);\n                throw new Error(`Could not find token ${params.fromToken} on chain ${params.chain}. Please check the token symbol.`);\n            }\n        } else {\n            elizaLogger.debug(`Using direct from token address: ${fromTokenAddress}`);\n        }\n        \n        // Handle toToken\n        if (!params.toToken.startsWith('0x')) {\n            try {\n                elizaLogger.debug(`Resolving to token symbol: ${params.toToken}`);\n                toTokenAddress = await this.walletProvider.getTokenAddress(\n                    params.chain,\n                    params.toToken\n                );\n                elizaLogger.debug(`Resolved to token address: ${toTokenAddress}`);\n                \n                // Special handling for native token\n                if (params.toToken.toUpperCase() === 'BNB') {\n                    elizaLogger.debug('Using special native token address for BNB');\n                    toTokenAddress = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\n                }\n            } catch (error) {\n                elizaLogger.error(`Error resolving to token address for ${params.toToken}:`, error);\n                throw new Error(`Could not find token ${params.toToken} on chain ${params.chain}. Please check the token symbol.`);\n            }\n        } else {\n            elizaLogger.debug(`Using direct to token address: ${toTokenAddress}`);\n        }\n\n        const resp: SwapResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            fromToken: params.fromToken,\n            toToken: params.toToken,\n            amount: params.amount,\n        };\n\n        elizaLogger.debug(`Getting routes from ${fromTokenAddress} to ${toTokenAddress}`);\n        \n        // Set a reasonable default slippage if not provided\n        const slippage = params.slippage || 0.05; // Default 5%\n        elizaLogger.debug(`Using slippage: ${slippage}`);\n        \n        try {\n            const routes = await getRoutes({\n                fromChainId: chainId,\n                toChainId: chainId,\n                fromTokenAddress: fromTokenAddress,\n                toTokenAddress: toTokenAddress,\n                fromAmount: parseEther(params.amount).toString(),\n                fromAddress: fromAddress,\n                options: {\n                    slippage: slippage,\n                    order: \"RECOMMENDED\",\n                },\n            });\n    \n            elizaLogger.debug(`Found ${routes.routes.length} routes`);\n            \n            if (!routes.routes.length) {\n                throw new Error(`No routes found from ${params.fromToken} to ${params.toToken} with amount ${params.amount}`);\n            }\n    \n            elizaLogger.debug(`Executing route: ${JSON.stringify(routes.routes[0].steps, null, 2)}`);\n            const execution = await executeRoute(routes.routes[0]);\n            \n            elizaLogger.debug(`Execution: ${JSON.stringify(execution.steps, null, 2)}`);\n            \n            const process =\n                execution.steps[0]?.execution?.process[\n                    execution.steps[0]?.execution?.process.length - 1\n                ];\n    \n            if (!process?.status || process.status === \"FAILED\") {\n                throw new Error(`Transaction failed: ${process?.status || 'unknown error'}`);\n            }\n    \n            resp.txHash = process.txHash as `0x${string}`;\n            elizaLogger.debug(`Swap successful with tx hash: ${resp.txHash}`);\n            \n            return resp;\n        } catch (error) {\n            elizaLogger.error(`Error during swap execution:`, error);\n            \n            // Try to provide more specific error messages\n            let errorMessage = error.message;\n            \n            if (error.message.includes(\"insufficient funds\")) {\n                elizaLogger.error(`Insufficient funds for swap`);\n                throw new Error(`Insufficient funds for swapping ${params.amount} ${params.fromToken}. Please check your balance.`);\n            } else if (error.message.includes(\"Cannot read properties\")) {\n                elizaLogger.error(`SDK response parsing error`);\n                throw new Error(`Error processing swap response. This might be due to rate limits or invalid token parameters.`);\n            }\n            \n            // Re-throw the error\n            throw error;\n        }\n    }\n\n    validateAndNormalizeParams(params: SwapParams): void {\n        elizaLogger.debug(`Validating swap params: chain=${params.chain}, from=${params.fromToken}, to=${params.toToken}, amount=${params.amount}`);\n        \n        // Validate chain\n        if (!params.chain) {\n            elizaLogger.debug(`No chain specified, defaulting to bsc`);\n            params.chain = \"bsc\";\n        } else if (params.chain !== \"bsc\") {\n            elizaLogger.error(`Unsupported chain: ${params.chain}`);\n            throw new Error(\"Only BSC mainnet is supported for swaps\");\n        }\n        \n        // Validate token inputs\n        if (!params.fromToken) {\n            elizaLogger.error(`From token not specified`);\n            throw new Error(\"From token is required for swap\");\n        }\n        \n        if (!params.toToken) {\n            elizaLogger.error(`To token not specified`);\n            throw new Error(\"To token is required for swap\");\n        }\n        \n        // Prevent swapping to the same token\n        if (params.fromToken === params.toToken) {\n            elizaLogger.error(`Cannot swap from and to the same token: ${params.fromToken}`);\n            throw new Error(`Cannot swap from and to the same token: ${params.fromToken}`);\n        }\n        \n        // Validate amount\n        if (!params.amount) {\n            elizaLogger.error(`Amount not specified`);\n            throw new Error(\"Amount is required for swap\");\n        }\n        \n        try {\n            const amountBigInt = parseEther(params.amount);\n            if (amountBigInt <= 0n) {\n                elizaLogger.error(`Invalid amount: ${params.amount} (must be greater than 0)`);\n                throw new Error(\"Swap amount must be greater than 0\");\n            }\n            elizaLogger.debug(`Amount parsed: ${amountBigInt.toString()} wei`);\n        } catch (error) {\n            elizaLogger.error(`Failed to parse amount: ${params.amount}`, error);\n            throw new Error(`Invalid swap amount: ${params.amount}. Please provide a valid number.`);\n        }\n        \n        // Validate slippage\n        if (params.slippage !== undefined) {\n            if (typeof params.slippage !== 'number') {\n                elizaLogger.error(`Invalid slippage type: ${typeof params.slippage}`);\n                throw new Error(\"Slippage must be a number\");\n            }\n            \n            if (params.slippage <= 0 || params.slippage > 1) {\n                elizaLogger.error(`Invalid slippage value: ${params.slippage} (must be between 0 and 1)`);\n                throw new Error(\"Slippage must be between 0 and 1 (e.g., 0.05 for 5%)\");\n            }\n        } else {\n            // Set default slippage\n            params.slippage = 0.05;\n            elizaLogger.debug(`Using default slippage: ${params.slippage}`);\n        }\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting swap action...\");\n        elizaLogger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n        // Extract prompt text for token detection\n        const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n        elizaLogger.debug(`Raw prompt text: \"${promptText}\"`);\n        \n        // Analyze prompt to detect tokens directly\n        const promptLower = promptText.toLowerCase();\n        \n        // Look for swap patterns in the prompt\n        const basicSwapRegex = /swap\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)\\s+(?:for|to)\\s+([a-zA-Z0-9]+)/i;\n        const advancedSwapRegex = /(?:swap|exchange|trade|convert)\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)\\s+(?:for|to|into)\\s+([a-zA-Z0-9]+)/i;\n        \n        let directFromToken: string | null = null;\n        let directToToken: string | null = null;\n        let directAmount: string | null = null;\n        \n        // Try to match the swap pattern\n        const match = promptText.match(basicSwapRegex) || promptText.match(advancedSwapRegex);\n        if (match && match.length >= 4) {\n            directAmount = match[1];\n            directFromToken = match[2].toUpperCase();\n            directToToken = match[3].toUpperCase();\n            elizaLogger.debug(`Directly extracted from prompt - Amount: ${directAmount}, From: ${directFromToken}, To: ${directToToken}`);\n        }\n        \n        // Check for common token mentions\n        const tokenMentions: Record<string, boolean> = {};\n        const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BTC', 'BUSD', 'DAI', 'WETC', 'WBNB', 'TRON', 'LINK', 'OM', 'UNI', 'PEPE', 'AAVE', 'ATOM'];\n        \n        for (const token of commonTokens) {\n            // Check for case-insensitive mention, but as whole word\n            const regex = new RegExp(`\\\\b${token}\\\\b`, 'i');\n            if (regex.test(promptText)) {\n                tokenMentions[token] = true;\n                elizaLogger.debug(`Detected token in prompt: ${token}`);\n            }\n        }\n        \n        // Store prompt analysis results\n        const promptAnalysis = {\n            directFromToken,\n            directToToken,\n            directAmount,\n            tokenMentions\n        };\n        \n        elizaLogger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose swap context\n        const swapContext = composeContext({\n            state: currentState,\n            template: swapTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n        \n        elizaLogger.debug(\"Generated swap content:\", JSON.stringify(content, null, 2));\n\n        // Validate and normalize chain\n        let chain = content.chain?.toLowerCase() || \"bsc\";\n        elizaLogger.debug(`Chain parameter: ${chain}`);\n\n        // PRIORITY ORDER FOR TOKEN DETERMINATION:\n        // 1. Direct match from prompt text (most reliable)\n        // 2. Tokens specified in model-generated content\n        // 3. Fallback based on token mentions\n        \n        // Determine input token (from token)\n        let fromToken: string;\n        if (directFromToken) {\n            fromToken = directFromToken;\n            elizaLogger.debug(`Using from token directly extracted from prompt: ${fromToken}`);\n        } else if (content.inputToken) {\n            fromToken = content.inputToken;\n            elizaLogger.debug(`Using from token from generated content: ${fromToken}`);\n        } else if (tokenMentions['BNB']) {\n            fromToken = 'BNB';\n            elizaLogger.debug(`Defaulting to BNB as from token based on mention`);\n        } else {\n            fromToken = 'BNB'; // Default\n            elizaLogger.debug(`No from token detected, defaulting to BNB`);\n        }\n        \n        // Determine output token (to token)\n        let toToken: string = 'USDC'; // Default initialization\n        if (directToToken) {\n            toToken = directToToken;\n            elizaLogger.debug(`Using to token directly extracted from prompt: ${toToken}`);\n        } else if (content.outputToken) {\n            toToken = content.outputToken;\n            elizaLogger.debug(`Using to token from generated content: ${toToken}`);\n        } else {\n            // Select a token different from fromToken\n            let tokenFound = false;\n            for (const token of ['USDC', 'USDT', 'BUSD']) {\n                if (token !== fromToken && tokenMentions[token]) {\n                    toToken = token;\n                    elizaLogger.debug(`Using ${token} as to token based on mention`);\n                    tokenFound = true;\n                    break;\n                }\n            }\n            \n            if (!tokenFound) {\n                toToken = fromToken === 'BNB' ? 'USDC' : 'BNB';\n                elizaLogger.debug(`No to token detected, defaulting to ${toToken}`);\n            }\n        }\n        \n        // Determine amount\n        let amount: string;\n        if (directAmount) {\n            amount = directAmount;\n            elizaLogger.debug(`Using amount directly extracted from prompt: ${amount}`);\n        } else if (content.amount) {\n            amount = content.amount;\n            elizaLogger.debug(`Using amount from generated content: ${amount}`);\n        } else {\n            amount = \"0.001\"; // Default small amount\n            elizaLogger.debug(`No amount detected, defaulting to ${amount}`);\n        }\n        \n        // Validate slippage\n        let slippage = content.slippage;\n        if (typeof slippage !== 'number' || slippage <= 0 || slippage > 1) {\n            slippage = 0.05; // Default 5%\n            elizaLogger.debug(`Invalid or missing slippage, using default: ${slippage}`);\n        } else {\n            elizaLogger.debug(`Using slippage from content: ${slippage}`);\n        }\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new SwapAction(walletProvider);\n        const swapOptions: SwapParams = {\n            chain: chain,\n            fromToken: fromToken,\n            toToken: toToken,\n            amount: amount,\n            slippage: slippage,\n        };\n        \n        elizaLogger.debug(\"Final swap options:\", JSON.stringify(swapOptions, null, 2));\n        \n        try {\n            elizaLogger.debug(\"Calling swap with params:\", JSON.stringify(swapOptions, null, 2));\n            const swapResp = await action.swap(swapOptions);\n            callback?.({\n                text: `Successfully swapped ${swapResp.amount} ${swapResp.fromToken} to ${swapResp.toToken}\\nTransaction Hash: ${swapResp.txHash}`,\n                content: { ...swapResp },\n            });\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during swap:\", error.message);\n            \n            // Log the entire error object for diagnosis\n            try {\n                elizaLogger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n            } catch (e) {\n                elizaLogger.error(\"Error object not serializable, logging properties individually:\");\n                for (const key in error) {\n                    try {\n                        elizaLogger.error(`${key}:`, error[key]);\n                    } catch (e) {\n                        elizaLogger.error(`${key}: [Error serializing property]`);\n                    }\n                }\n            }\n            \n            // Provide more user-friendly error messages\n            let errorMessage = error.message;\n            \n            if (error.message.includes(\"No routes found\")) {\n                errorMessage = `No swap route found from ${swapOptions.fromToken} to ${swapOptions.toToken}. Please check that both tokens exist and have liquidity.`;\n            } else if (error.message.includes(\"insufficient funds\")) {\n                errorMessage = `Insufficient funds for the swap. Please check your balance and try with a smaller amount.`;\n            } else if (error.message.includes(\"high slippage\")) {\n                errorMessage = `Swap failed due to high price impact. Try reducing the amount or using a different token pair.`;\n            }\n            \n            callback?.({\n                text: `Swap failed: ${errorMessage}`,\n                content: { \n                    error: errorMessage,\n                    fromToken: swapOptions.fromToken,\n                    toToken: swapOptions.toToken\n                },\n            });\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 0.001 BNB for USDC on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you swap 0.001 BNB for USDC on BSC\",\n                    action: \"SWAP\",\n                    content: {\n                        chain: \"bsc\",\n                        inputToken: \"BNB\",\n                        outputToken: \"USDC\",\n                        amount: \"0.001\",\n                        slippage: undefined,\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Buy some token of 0x1234 using 0.001 USDC on BSC. The slippage should be no more than 5%\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you swap 0.001 USDC for token 0x1234 on BSC\",\n                    action: \"SWAP\",\n                    content: {\n                        chain: \"bsc\",\n                        inputToken: \"USDC\",\n                        outputToken: \"0x1234\",\n                        amount: \"0.001\",\n                        slippage: 0.05,\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"SWAP\", \"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n};\n","import type {\n     IAgentRuntime,\n     Provider,\n     Memory,\n     State,\n} from \"@elizaos/core\";\nimport { EVM, createConfig, getToken } from \"@lifi/sdk\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n    Hex,\n} from \"viem\";\nimport {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n    erc20Abi,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\nimport { createWeb3Name } from \"@web3-name-sdk/core\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"bsc\";\n    chains: Record<string, Chain> = { bsc: viemChains.bsc };\n    account: PrivateKeyAccount;\n    private privateKey: `0x${string}`;\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.privateKey = privateKey;\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n \n    getAccount(): PrivateKeyAccount {\n        return this.account;\n    }\n    getPk(): `0x${string}` {\n        return this.privateKey;\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    configureLiFiSdk(chainName: SupportedChain) {\n        const chains = Object.values(this.chains);\n        const walletClient = this.getWalletClient(chainName);\n\n        createConfig({\n            integrator: \"eliza\",\n            providers: [\n                EVM({\n                    getWalletClient: async () => walletClient,\n                    switchChain: async (chainId) =>\n                        createWalletClient({\n                            account: this.account,\n                            chain: chains.find(\n                                (chain) => chain.id === chainId\n                            ) as Chain,\n                            transport: http(),\n                        }),\n                }),\n            ],\n        });\n    }\n\n    async formatAddress(address: string | null | undefined): Promise<Address> {\n        // If address is null or undefined, use the wallet's own address\n        if (address === null || address === undefined) {\n            elizaLogger.debug(\"Address is null or undefined, using wallet's own address\");\n            return this.getAddress();\n        }\n\n        // If address is empty string, use wallet's own address\n        if (typeof address === 'string' && address.trim().length === 0) {\n            elizaLogger.debug(\"Address is empty string, using wallet's own address\");\n            return this.getAddress();\n        }\n\n        // Convert to string in case we get an object or other type\n        const addressStr = String(address).trim();\n        \n        // If it's already a valid hex address, return it directly\n        if (addressStr.startsWith(\"0x\") && addressStr.length === 42) {\n            elizaLogger.debug(`Using valid hex address: ${addressStr}`);\n            return addressStr as Address;\n        }\n        \n        // Skip web3 name resolution for common tokens that might be mistakenly\n        // passed as addresses\n        const commonTokens = ['USDT', 'USDC', 'BNB', 'ETC', 'WETC', 'BUSD', 'WBNB', 'TRON', 'LINK', 'OM', 'UNI', 'PEPE', 'AAVE', 'ATOM'];\n        if (commonTokens.includes(addressStr.toUpperCase())) {\n            elizaLogger.debug(`Value appears to be a token symbol, not an address: ${addressStr}. Using wallet's own address.`);\n            return this.getAddress();\n        }\n\n        // Try to resolve as web3 name\n        try {\n            elizaLogger.debug(`Attempting to resolve as Web3Name: ${addressStr}`);\n            const resolvedAddress = await this.resolveWeb3Name(addressStr);\n            if (resolvedAddress) {\n                elizaLogger.debug(`Resolved Web3Name to address: ${resolvedAddress}`);\n                return resolvedAddress as Address;\n            }\n        } catch (error) {\n            elizaLogger.debug(`Failed to resolve Web3Name '${addressStr}': ${error.message}. Will try other methods.`);\n            // Continue to other methods rather than throwing\n        }\n        \n        // If we can't resolve the name but it looks like a potential address\n        if (addressStr.startsWith(\"0x\")) {\n            elizaLogger.debug(`Address \"${addressStr}\" doesn't look like a standard Ethereum address but will be used as is`);\n            return addressStr as Address;\n        }\n        \n        // If all else fails, use the wallet's own address\n        elizaLogger.debug(`Could not resolve address '${addressStr}'. Using wallet's own address.`);\n        return this.getAddress();\n    }\n\n    async resolveWeb3Name(name: string | null | undefined): Promise<string | null> {\n        // Handle null/undefined/empty cases\n        if (name === null || name === undefined || name === 'null') {\n            elizaLogger.debug(`Web3Name resolution skipped for null/undefined value`);\n            return null;\n        }\n        \n        // Convert to string and trim\n        const nameStr = String(name).trim();\n        if (nameStr.length === 0) {\n            elizaLogger.debug(`Web3Name resolution skipped for empty string`);\n            return null;\n        }\n        \n        // If it's already a valid address, return it directly\n        if (nameStr.startsWith('0x') && nameStr.length === 42) {\n            elizaLogger.debug(`Value is already a valid address: ${nameStr}`);\n            return nameStr;\n        }\n        \n        // Skip resolution for common token symbols and keywords\n        const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BTC', 'BUSD', 'DAI', 'WETC', 'WBNB', 'TRON', 'LINK', 'OM', 'UNI', 'PEPE', 'AAVE', 'ATOM'];\n        if (commonTokens.includes(nameStr.toUpperCase())) {\n            elizaLogger.debug(`Skipping Web3Name resolution for common token: ${nameStr}`);\n            return null;\n        }\n        \n        try {\n            // Get the current chain's RPC URL to use for name resolution\n            const chain = this.getCurrentChain();\n            const rpcUrl = chain.rpcUrls.custom?.http[0] || chain.rpcUrls.default.http[0];\n            \n            elizaLogger.debug(`Resolving Web3Name: ${nameStr} using chain ${chain.name} and RPC: ${rpcUrl}`);\n            \n            // Create nameService with explicit RPC URL\n            const nameService = createWeb3Name({\n                rpcUrl\n            });\n            \n            // Attempt resolution with timeout\n            const result = await Promise.race([\n                nameService.getAddress(nameStr),\n                new Promise<null>((resolve) => \n                    setTimeout(() => {\n                        elizaLogger.debug(`Web3Name resolution timeout for ${nameStr}`);\n                        resolve(null);\n                    }, 5000) // 5 second timeout\n                )\n            ]);\n            \n            if (result) {\n                elizaLogger.debug(`Web3Name resolved: ${nameStr} → ${result}`);\n                return result;\n            } else {\n                elizaLogger.debug(`Web3Name not resolved: ${nameStr}`);\n                return null;\n            }\n        } catch (error) {\n            // Log error but don't propagate it - maintain smooth user experience\n            elizaLogger.debug(`Error resolving Web3Name ${nameStr}: ${error.message}`);\n            return null;\n        }\n    }\n\n    async checkERC20Allowance(\n        chain: SupportedChain,\n        token: Address,\n        owner: Address,\n        spender: Address,\n    ): Promise<bigint> {\n        const publicClient = this.getPublicClient(chain);\n        return await publicClient.readContract({\n            address: token,\n            abi: erc20Abi,\n            functionName: \"allowance\",\n            args: [owner, spender],\n        });\n    }\n\n    async approveERC20(\n        chain: SupportedChain,\n        token: Address,\n        spender: Address,\n        amount: bigint\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: token,\n            abi: erc20Abi,\n            functionName: \"approve\",\n            args: [spender, amount],\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async transfer(\n        chain: SupportedChain,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n            data?: Hex;\n        }\n    ): Promise<Hex> {\n        const walletClient = this.getWalletClient(chain);\n        return await walletClient.sendTransaction({\n            account: this.account,\n            to: toAddress,\n            value: amount,\n            chain: this.getChainConfigs(chain),\n            ...options,\n        });\n    }\n\n    async transferERC20(\n        chain: SupportedChain,\n        tokenAddress: Address,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n        }\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"transfer\",\n            args: [toAddress as `0x${string}`, amount],\n            ...options,\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async getBalance(): Promise<string> {\n        const client = this.getPublicClient(this.currentChain);\n        const balance = await client.getBalance({\n            address: this.account.address,\n        });\n        return formatUnits(balance, 18);\n    }\n\n    async getTokenAddress(\n        chainName: SupportedChain,\n        tokenSymbol: string\n    ): Promise<string> {\n        const token = await getToken(\n            this.getChainConfigs(chainName).id,\n            tokenSymbol\n        );\n        return token.address;\n    }\n\n    /**\n     * Gets testnet token address from predefined mapping\n     * This is a custom method for testnet tokens since the regular token lookup\n     * doesn't work on testnets.\n     */\n    getTestnetTokenAddress(tokenSymbol: string): string | null {\n        // Testnet token mapping - keep in sync with the mapping in getBalanceTestnet.ts\n        const TESTNET_TOKEN_ADDRESSES: Record<string, string> = {\n            \"BNB\": \"0x64544969ed7EBf5f083679233325356EbE738930\",\n            \"BUSD\": \"0x48D87A2d14De41E2308A764905B93E05c9377cE1\",\n            \"DAI\": \"0x46B48c1Ef4B5F15B7DdC415290CEC2f774cD1021\",\n            \"ETH\": \"0x635780E5D02Ab29d7aE14d266936A38d3D5B0CC5\",\n            \"USDC\": \"0x053Fc65249dF91a02Ddb294A081f774615aB45F4\",\n        };\n\n        // Normalize input to uppercase\n        const normalizedSymbol = tokenSymbol.toUpperCase();\n        \n        // Check if token exists in mapping\n        if (TESTNET_TOKEN_ADDRESSES[normalizedSymbol]) {\n            elizaLogger.debug(`Found testnet token address for ${normalizedSymbol}: ${TESTNET_TOKEN_ADDRESSES[normalizedSymbol]}`);\n            return TESTNET_TOKEN_ADDRESSES[normalizedSymbol];\n        }\n        \n        elizaLogger.debug(`No testnet address found for token ${normalizedSymbol}`);\n        return null;\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames = [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"];\n    const chains = {};\n\n    for (const chainName of chainNames) {\n        const chain = WalletProvider.genChainFromName(chainName);\n        chains[chainName] = chain;\n    }\n\n    const mainnet_rpcurl = runtime.getSetting(\"BSC_PROVIDER_URL\");\n    if (mainnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"bsc\", mainnet_rpcurl);\n        chains[\"bsc\"] = chain;\n    }\n    \n    const testnet_rpcurl = runtime.getSetting(\"BSC_TESTNET_PROVIDER_URL\");\n    if (testnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"bscTestnet\", testnet_rpcurl);\n        chains[\"bscTestnet\"] = chain;\n    }\n\n    const opbnb_rpcurl = runtime.getSetting(\"OPBNB_PROVIDER_URL\");\n    if (opbnb_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"opBNB\", opbnb_rpcurl);\n        chains[\"opBNB\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"BNB_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const bnbWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `BNB chain Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in BNB chain wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const getBalanceTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested check balance:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Address to check balance for. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\n- Token symbol or address. Could be a token symbol or address. If the address is provided, it must be a valid Ethereum address starting with \"0x\". Default is \"BNB\".\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"address\": string | null,\n    \"token\": string\n}\n\\`\\`\\`\n`;\n\nexport const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Token symbol or address(string starting with \"0x\"). Optional.\n- Amount to transfer. Optional. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Recipient address. Must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n- Data. Optional, data to be included in the transaction.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"token\": string | null,\n    \"amount\": string | null,\n    \"toAddress\": string,\n    \"data\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Input token symbol or address(string starting with \"0x\").\n- Output token symbol or address(string starting with \"0x\").\n- Amount to swap. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Slippage. Optional, expressed as decimal proportion, 0.03 represents 3%.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- From chain. Must be one of [\"bsc\", \"opBNB\"].\n- To chain. Must be one of [\"bsc\", \"opBNB\"].\n- From token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- To token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- Amount to bridge. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- To address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"fromChain\": \"bsc\" | \"opBNB\",\n    \"toChain\": \"bsc\" | \"opBNB\",\n    \"fromToken\": string | null,\n    \"toToken\": string | null,\n    \"amount\": string,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const stakeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested stake action:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Action to execute. Must be one of [\"deposit\", \"withdraw\", \"claim\"].\n- Amount to execute. Optional, must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\"). If the action is \"deposit\" or \"withdraw\", amount is required.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"action\": \"deposit\" | \"withdraw\" | \"claim\",\n    \"amount\": string | null,\n}\n\\`\\`\\`\n`;\n\nexport const faucetTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested faucet request:\n- Token. Token to request. Could be one of [\"BNB\", \"BTC\", \"BUSD\", \"DAI\", \"ETH\", \"USDC\"]. Optional.\n- Recipient address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const ercContractTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nWhen user wants to deploy any type of token contract (ERC20/721/1155), this will trigger the DEPLOY_TOKEN action.\n\nExtract the following details for deploying a token contract:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- contractType: The type of token contract to deploy\n  - For ERC20: Extract name, symbol, decimals, totalSupply\n  - For ERC721: Extract name, symbol, baseURI\n  - For ERC1155: Extract name, baseURI\n- name: The name of the token.\n- symbol: The token symbol (only for ERC20/721).\n- decimals: Token decimals (only for ERC20). Default is 18.\n- totalSupply: Total supply with decimals (only for ERC20). Default is \"1000000000000000000\".\n- baseURI: Base URI for token metadata (only for ERC721/1155).\nIf any field is not provided, use the default value. If no default value is provided, use empty string.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"contractType\": \"ERC20\" | \"ERC721\" | \"ERC1155\",\n    \"name\": string,\n    \"symbol\": string | null,\n    \"decimals\": number | null,\n    \"totalSupply\": string | null,\n    \"baseURI\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const greenfieldTemplate = `Given the recent messages and wallet information below(only including 'Greenfield' keyword):\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following details for Greenfield operations:\n- The type of operation to perform (e.g., \"createBucket\", \"uploadObject\", \"deleteObject\", \"crossChainTransfer\")\n- The name of the bucket to operate\n- The name of the object for upload operations\n- Bucket visibility setting (\"private\" or \"public\")\n- BNB transfer to greenfield token amount.\n\nRequired Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"actionType\": \"createBucket\" | \"uploadObject\" | \"deleteObject\" | \"crossChainTransfer\",\n    \"bucketName\": string,\n    \"objectName\": string,\n    \"visibility\": \"private\" | \"public\",\n    \"amount\": number\n}\n\\`\\`\\`\n`;\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport {\n    formatEther,\n    formatUnits,\n    parseEther,\n    parseUnits,\n    erc20Abi,\n    type Hex,\n} from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { transferTemplate } from \"../templates\";\nimport type { TransferParams, TransferResponse, SupportedChain } from \"../types\";\n\nexport { transferTemplate };\n\n// Exported for tests\nexport class TransferAction {\n    private readonly TRANSFER_GAS = 21000n;\n    private readonly DEFAULT_GAS_PRICE = 3000000000n as const; // 3 Gwei\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<TransferResponse> {\n        elizaLogger.debug(\"Starting transfer with params:\", JSON.stringify(params, null, 2));\n        \n        // Debug the chain validation\n        elizaLogger.debug(`Chain before validation: ${params.chain}`);\n        elizaLogger.debug(`Available chains:`, Object.keys(this.walletProvider.chains));\n        \n        // Check if the chain is supported\n        if (!this.walletProvider.chains[params.chain]) {\n            elizaLogger.error(`Chain '${params.chain}' is not supported. Available chains: ${Object.keys(this.walletProvider.chains).join(', ')}`);\n            throw new Error(`Chain '${params.chain}' is not supported. Please use one of: ${Object.keys(this.walletProvider.chains).join(', ')}`);\n        }\n        \n        // Handle data parameter - make sure it's not a string \"null\"\n        // This must happen before validation to avoid type errors\n        let dataParam: Hex | undefined = undefined;\n        if (params.data && typeof params.data === 'string' && params.data.startsWith('0x')) {\n            dataParam = params.data as Hex;\n            elizaLogger.debug(`Using data parameter: ${dataParam}`);\n        } else if (params.data) {\n            elizaLogger.debug(`Ignoring invalid data parameter: ${params.data}`);\n        }\n        \n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"After address validation, params:\", JSON.stringify(params, null, 2));\n\n        const fromAddress = this.walletProvider.getAddress();\n        elizaLogger.debug(`From address: ${fromAddress}`);\n\n        elizaLogger.debug(`Switching to chain: ${params.chain}`);\n        this.walletProvider.switchChain(params.chain);\n\n        const nativeToken = this.walletProvider.chains[params.chain].nativeCurrency.symbol;\n        elizaLogger.debug(`Native token for chain ${params.chain}: ${nativeToken}`);\n\n        // CRITICAL: Ensure token is never null before proceeding\n        if (!params.token) {\n            params.token = nativeToken;\n            elizaLogger.debug(`Setting null token to native token: ${nativeToken}`);\n        } else if (params.token.toLowerCase() === nativeToken.toLowerCase()) {\n            // Standardize the token case if it matches the native token\n            params.token = nativeToken;\n            elizaLogger.debug(`Standardized token case to match native token: ${nativeToken}`);\n        }\n        \n        elizaLogger.debug(`Final transfer token: ${params.token}`);\n\n        const resp: TransferResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            recipient: params.toAddress,\n            amount: \"\",\n            token: params.token,\n        };\n\n        if (!params.token || params.token ==\"null\" || params.token === nativeToken) {\n            elizaLogger.debug(\"Native token transfer:\", nativeToken);\n            // Native token transfer\n            const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\n                data: dataParam,\n            };\n            let value: bigint;\n            if (!params.amount) {\n                // Transfer all balance minus gas\n                const publicClient = this.walletProvider.getPublicClient(\n                    params.chain\n                );\n                const balance = await publicClient.getBalance({\n                    address: fromAddress,\n                });\n\n                value = balance - this.DEFAULT_GAS_PRICE * 21000n;\n                options.gas = this.TRANSFER_GAS;\n                options.gasPrice = this.DEFAULT_GAS_PRICE;\n            } else {\n                value = parseEther(params.amount);\n            }\n\n            resp.amount = formatEther(value);\n            resp.txHash = await this.walletProvider.transfer(\n                params.chain,\n                params.toAddress,\n                value,\n                options\n            );\n        } else {\n            // ERC20 token transfer\n            elizaLogger.debug(\"ERC20 token transfer\");\n            let tokenAddress = params.token;\n            elizaLogger.debug(`Token before address resolution: ${params.token}`);\n            \n            // Special case: If token is BNB (the native token), handle it separately\n            // This avoids the LI.FI lookup which fails with null token\n            if (params.token === \"BNB\" || params.token === \"bnb\") {\n                elizaLogger.debug(`Detected native token (BNB) passed to ERC20 handling branch - switching to native token handling`);\n                \n                // Update response token to make sure it's consistent\n                resp.token = nativeToken;\n                \n                // Switch to native token transfer\n                const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\n                    data: dataParam,\n                };\n                let value: bigint;\n                if (!params.amount) {\n                    // Transfer all balance minus gas\n                    const publicClient = this.walletProvider.getPublicClient(\n                        params.chain\n                    );\n                    const balance = await publicClient.getBalance({\n                        address: fromAddress,\n                    });\n\n                    value = balance - this.DEFAULT_GAS_PRICE * 21000n;\n                    options.gas = this.TRANSFER_GAS;\n                    options.gasPrice = this.DEFAULT_GAS_PRICE;\n                } else {\n                    value = parseEther(params.amount);\n                }\n\n                resp.amount = formatEther(value);\n                resp.txHash = await this.walletProvider.transfer(\n                    params.chain,\n                    params.toAddress,\n                    value,\n                    options\n                );\n                \n                // Skip remaining ERC20 handling\n                elizaLogger.debug(`Native BNB transfer completed via transfer branch`);\n                return resp; // Return early to skip the rest of the ERC20 handling\n                \n            } else if (!params.token.startsWith(\"0x\")) {\n                try {\n                    elizaLogger.debug(`Attempting to resolve token symbol: ${params.token} on chain ${params.chain}`);\n                    // Configure the LI.FI SDK for token lookup\n                    this.walletProvider.configureLiFiSdk(params.chain);\n                    \n                    tokenAddress = await this.walletProvider.getTokenAddress(\n                        params.chain,\n                        params.token\n                    );\n                    \n                    elizaLogger.debug(`Resolved token address: ${tokenAddress} for ${params.token}`);\n                    \n                    // If token address doesn't start with 0x after resolution, it might have failed\n                    if (!tokenAddress || !tokenAddress.startsWith(\"0x\")) {\n                        elizaLogger.error(`Failed to resolve token to proper address: ${tokenAddress}`);\n                        throw new Error(`Could not resolve token symbol ${params.token} to a valid address`);\n                    }\n                } catch (error) {\n                    elizaLogger.error(`Error resolving token address for ${params.token}:`, error);\n                    throw new Error(`Could not find token ${params.token} on chain ${params.chain}. Please check the token symbol or use the contract address.`);\n                }\n            } else {\n                elizaLogger.debug(`Using token address directly: ${tokenAddress}`);\n            }\n            \n            elizaLogger.debug(`Final token address for ERC20 transfer: ${tokenAddress}`);\n\n            const publicClient = this.walletProvider.getPublicClient(\n                params.chain\n            );\n            const decimals = await publicClient.readContract({\n                address: tokenAddress as `0x${string}`,\n                abi: erc20Abi,\n                functionName: \"decimals\",\n            });\n\n            let value: bigint;\n            if (!params.amount) {\n                value = await publicClient.readContract({\n                    address: tokenAddress as `0x${string}`,\n                    abi: erc20Abi,\n                    functionName: \"balanceOf\",\n                    args: [fromAddress],\n                });\n            } else {\n                value = parseUnits(params.amount, decimals);\n            }\n\n            resp.amount = formatUnits(value, decimals);\n            resp.txHash = await this.walletProvider.transferERC20(\n                params.chain,\n                tokenAddress as `0x${string}`,\n                params.toAddress,\n                value\n            );\n        }\n\n        if (!resp.txHash || resp.txHash === \"0x\") {\n            throw new Error(\"Get transaction hash failed\");\n        }\n\n        // wait for the transaction to be confirmed\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n        await publicClient.waitForTransactionReceipt({\n            hash: resp.txHash,\n        });\n\n        return resp;\n    }\n\n    async validateAndNormalizeParams(params: TransferParams): Promise<void> {\n        if (!params.toAddress) {\n            throw new Error(\"To address is required\");\n        }\n        params.toAddress = await this.walletProvider.formatAddress(\n            params.toAddress\n        );\n\n        params.data = (\"null\" == params.data + \"\") ? \"0x\" : params.data;\n        elizaLogger.debug(\"params.data\" , params.data);\n\n    }\n}\n\nexport const transferAction = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting transfer action...\");\n        elizaLogger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n        // Extract prompt text if available to help with token detection\n        const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n        elizaLogger.debug(`Raw prompt text: \"${promptText}\"`);\n        \n        // Pre-analyze the prompt for token indicators - more aggressive token detection\n        const promptLower = promptText.toLowerCase();\n        \n        // Direct BNB token detection - look for explicit mentions of BNB\n        const containsBnb = promptLower.includes('bnb') || \n                            promptLower.includes('binance coin') || \n                            promptLower.includes('binance smart chain');\n        \n        // Direct token detection from prompt format like \"Transfer 0.0001 BNB to 0x123...\"\n        let directTokenMatch: string | null = null;\n        const transferRegex = /transfer\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)\\s+to\\s+(0x[a-fA-F0-9]{40})/i;\n        const match = promptText.match(transferRegex);\n        \n        if (match && match.length >= 3) {\n            const [_, amount, tokenSymbol, toAddress] = match;\n            directTokenMatch = tokenSymbol.toUpperCase();\n            elizaLogger.debug(`Directly extracted from prompt - Amount: ${amount}, Token: ${directTokenMatch}, To: ${toAddress}`);\n        }\n        \n        if (containsBnb) {\n            elizaLogger.debug(`BNB transfer detected in prompt text: \"${promptText}\"`);\n        }\n        \n        // Store this information for later use\n        const promptAnalysis = {\n            containsBnb,\n            directTokenMatch\n        };\n        \n        elizaLogger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n        // Validate transfer\n        if (!(message.content.source === \"direct\")) {\n            callback?.({\n                text: \"I can't do that for you.\",\n                content: { error: \"Transfer not allowed\" },\n            });\n            return false;\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        \n        try {\n            state.walletInfo = await bnbWalletProvider.get(\n                runtime,\n                message,\n                currentState\n            );\n            elizaLogger.debug(\"Wallet info:\", state.walletInfo);\n        } catch (error) {\n            elizaLogger.error(\"Error getting wallet info:\", error.message);\n        }\n\n        // Log available settings\n        elizaLogger.debug(\"Available runtime settings:\");\n        const bscProviderUrl = runtime.getSetting(\"BSC_PROVIDER_URL\");\n        const bscTestnetProviderUrl = runtime.getSetting(\"BSC_TESTNET_PROVIDER_URL\");\n        elizaLogger.debug(`BSC_PROVIDER_URL: ${bscProviderUrl ? \"set\" : \"not set\"}`);\n        elizaLogger.debug(`BSC_TESTNET_PROVIDER_URL: ${bscTestnetProviderUrl ? \"set\" : \"not set\"}`);\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n        \n        elizaLogger.debug(\"Generated transfer content:\", JSON.stringify(content, null, 2));\n        \n        // Normalize chain from content\n        let chain = content.chain?.toLowerCase() || \"bsc\";\n        elizaLogger.debug(`Chain parameter: ${chain}`);\n        \n        // Check if content has a token field\n        elizaLogger.debug(\"Token from content:\", content.token);\n        elizaLogger.debug(\"Content object keys:\", Object.keys(content));\n\n        // PRIORITY ORDER FOR TOKEN DETERMINATION:\n        // 1. Direct match from prompt text (most reliable)\n        // 2. Token specified in model-generated content\n        // 3. BNB detection from prompt analysis\n        // 4. Default to BNB (native token)\n        \n        let token: string;\n        \n        // 1. First priority: Use directly extracted token from prompt if available\n        if (directTokenMatch) {\n            token = directTokenMatch;\n            elizaLogger.debug(`Using token directly extracted from prompt: ${token}`);\n        }\n        // 2. Second priority: Use token from content if available\n        else if (content.token) {\n            token = content.token;\n            elizaLogger.debug(`Using token from generated content: ${token}`);\n        }\n        // 3. Third priority: Detected BNB in prompt\n        else if (containsBnb) {\n            token = \"BNB\";\n            elizaLogger.debug(`Using BNB as detected in prompt`);\n        }\n        // 4. Default fallback\n        else {\n            token = \"BNB\"; // Default to native token\n            elizaLogger.debug(`No token detected, defaulting to native token BNB`);\n        }\n        \n        // Final validation - never allow null/undefined as token value\n        if (!token) {\n            token = \"BNB\";\n            elizaLogger.debug(`Final safeguard: ensuring token is not null/undefined`);\n        }\n        \n        elizaLogger.debug(`Final token parameter: ${token}`);\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n        \n        // Process data field to avoid passing \"null\" string\n        let dataParam: Hex | undefined = undefined;\n        if (content.data && typeof content.data === 'string') {\n            if (content.data.startsWith('0x') && content.data !== '0x') {\n                dataParam = content.data as Hex;\n                elizaLogger.debug(`Using valid hex data: ${dataParam}`);\n            } else {\n                elizaLogger.debug(`Invalid data format or value: ${content.data}, ignoring`);\n            }\n        }\n        \n        const paramOptions: TransferParams = {\n            chain: chain as SupportedChain,\n            token: token,\n            amount: content.amount,\n            toAddress: content.toAddress,\n            data: dataParam,\n        };\n        \n        elizaLogger.debug(\"Transfer params before action:\", JSON.stringify(paramOptions, null, 2));\n\n        try {\n            elizaLogger.debug(\"Calling transfer with params:\", JSON.stringify(paramOptions, null, 2));\n            \n            const transferResp = await action.transfer(paramOptions);\n            callback?.({\n                text: `Successfully transferred ${transferResp.amount} ${transferResp.token} to ${transferResp.recipient}\\nTransaction Hash: ${transferResp.txHash}`,\n                content: { ...transferResp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during transfer:\", error.message);\n            \n            // Log the entire error object for diagnosis\n            try {\n                elizaLogger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n            } catch (e) {\n                elizaLogger.error(\"Error object not serializable, logging properties individually:\");\n                for (const key in error) {\n                    try {\n                        elizaLogger.error(`${key}:`, error[key]);\n                    } catch (e) {\n                        elizaLogger.error(`${key}: [Error serializing property]`);\n                    }\n                }\n            }\n            \n            // Enhanced error diagnosis\n            let errorMessage = error.message;\n            \n            // Check for LI.FI SDK errors\n            if (error.message.includes(\"LI.FI SDK\")) {\n                elizaLogger.error(\"LI.FI SDK error detected\");\n                \n                if (error.message.includes(\"Request failed with status code 404\") && \n                    error.message.includes(\"Could not find token\")) {\n                    // Extract the token that couldn't be found from the error message\n                    const tokenMatch = error.message.match(/Could not find token (.*?) on chain/);\n                    const tokenValue = tokenMatch ? tokenMatch[1] : paramOptions.token;\n                    \n                    errorMessage = `Could not find the token '${tokenValue}' on ${paramOptions.chain}. \n                    Please check the token symbol or address and try again.`;\n                    \n                    elizaLogger.error(`Token not found: ${tokenValue}`);\n                    elizaLogger.debug(`Original token from params: ${paramOptions.token}`);\n                    \n                    // Suggest a solution\n                    if (tokenValue === \"null\" || tokenValue === \"undefined\" || !tokenValue) {\n                        errorMessage += \" For BNB transfers, please explicitly specify 'BNB' as the token.\";\n                    }\n                } else if (error.message.includes(\"400 Bad Request\") && error.message.includes(\"chain must be\")) {\n                    errorMessage = `Chain validation error: '${paramOptions.chain}' is not a valid chain for the LI.FI SDK. \n                    Please use 'bsc' for BSC mainnet.`;\n                }\n            }\n            \n            // Check for other common errors\n            if (error.message.includes(\"insufficient funds\")) {\n                errorMessage = `Insufficient funds for the transaction. Please check your balance and try again with a smaller amount.`;\n            } else if (error.message.includes(\"transaction underpriced\")) {\n                errorMessage = `Transaction underpriced. Please try again with a higher gas price.`;\n            }\n            \n            callback?.({\n                text: `Transfer failed: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 0.001 BNB to 0x2CE4EaF47CACFbC6590686f8f7521e0385822334\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 0.001 BNB to 0x2CE4EaF47CACFbC6590686f8f7521e0385822334 on BSC\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"bsc\",\n                        token: \"BNB\",\n                        amount: \"1\",\n                        toAddress: \"0x2CE4EaF47CACFbC6590686f8f7521e0385822334\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"bsc\",\n                        token: \"0x1234\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"TRANSFER\", \"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { parseEther, getContract, parseUnits, erc20Abi } from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { bridgeTemplate } from \"../templates\";\nimport {\n    L1StandardBridgeAbi,\n    L2StandardBridgeAbi,\n    type BridgeParams,\n    type BridgeResponse,\n    type SupportedChain,\n} from \"../types\";\n\nexport { bridgeTemplate };\n\n/**\n * Helper function to check if a value is a \"null\" string and convert it to undefined\n */\nfunction convertNullStringToUndefined<T>(value: T | string | undefined | null): T | undefined {\n    if (value === \"null\" || value === null) {\n        return undefined;\n    }\n    return value as T;\n}\n\n// Exported for tests\nexport class BridgeAction {\n    private readonly L1_BRIDGE_ADDRESS =\n        \"0xF05F0e4362859c3331Cb9395CBC201E3Fa6757Ea\" as const;\n    private readonly L2_BRIDGE_ADDRESS =\n        \"0x4000698e3De52120DE28181BaACda82B21568416\" as const;\n    private readonly LEGACY_ERC20_ETH =\n        \"0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\" as const;\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async bridge(params: BridgeParams): Promise<BridgeResponse> {\n        elizaLogger.debug(\"Starting bridge operation with params:\", JSON.stringify(params, null, 2));\n        \n        // Validate and normalize parameters\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"After validation, bridge params:\", JSON.stringify(params, null, 2));\n\n        // Get wallet address and prepare chain switching\n        const fromAddress = this.walletProvider.getAddress();\n        elizaLogger.debug(`From address: ${fromAddress}`);\n        elizaLogger.debug(`Switching to chain: ${params.fromChain}`);\n        \n        this.walletProvider.switchChain(params.fromChain);\n        const walletClient = this.walletProvider.getWalletClient(params.fromChain);\n        const publicClient = this.walletProvider.getPublicClient(params.fromChain);\n\n        // Get native token for the chain\n        const nativeToken = this.walletProvider.chains[params.fromChain].nativeCurrency.symbol;\n        elizaLogger.debug(`Native token for chain ${params.fromChain}: ${nativeToken}`);\n\n        // Prepare response object\n        const resp: BridgeResponse = {\n            fromChain: params.fromChain,\n            toChain: params.toChain,\n            txHash: \"0x\",\n            recipient: params.toAddress ?? fromAddress,\n            amount: params.amount,\n            fromToken: params.fromToken ?? nativeToken,\n            toToken: params.toToken ?? nativeToken,\n        };\n        \n        elizaLogger.debug(`Bridge response initialized:`, JSON.stringify(resp, null, 2));\n\n        // Get account and chain config\n        const account = this.walletProvider.getAccount();\n        const chain = this.walletProvider.getChainConfigs(params.fromChain);\n        elizaLogger.debug(`Using account: ${account.address}`);\n        elizaLogger.debug(`Chain config: ${chain.name} (ID: ${chain.id})`);\n\n        // Determine bridge parameters\n        const selfBridge = !params.toAddress || params.toAddress === fromAddress;\n        const nativeTokenBridge = !params.fromToken || params.fromToken === nativeToken;\n        \n        elizaLogger.debug(`Self bridge: ${selfBridge}`);\n        elizaLogger.debug(`Native token bridge: ${nativeTokenBridge}`);\n\n        // Parse amount\n        let amount: bigint;\n        if (nativeTokenBridge) {\n            amount = parseEther(params.amount);\n            elizaLogger.debug(`Native token amount: ${amount} wei (${params.amount} ${nativeToken})`);\n        } else {\n            elizaLogger.debug(`Reading decimals for token: ${params.fromToken}`);\n            const decimals = await publicClient.readContract({\n                address: params.fromToken!,\n                abi: erc20Abi,\n                functionName: \"decimals\",\n            });\n            \n            amount = parseUnits(params.amount, decimals);\n            elizaLogger.debug(`Token amount: ${amount} (${params.amount} tokens with ${decimals} decimals)`);\n        }\n\n        try {\n            // Handle BSC to opBNB bridging\n            if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\n                elizaLogger.debug(`Bridging from L1 (BSC) to L2 (opBNB)`);\n                elizaLogger.debug(`Using L1 bridge contract: ${this.L1_BRIDGE_ADDRESS}`);\n                \n                // Set up L1 bridge contract\n                const l1BridgeContract = getContract({\n                    address: this.L1_BRIDGE_ADDRESS,\n                    abi: L1StandardBridgeAbi,\n                    client: {\n                        public: publicClient,\n                        wallet: walletClient,\n                    },\n                });\n\n                // Check ERC20 allowance if not native token\n                if (!nativeTokenBridge) {\n                    elizaLogger.debug(`Checking ERC20 allowance for L1 bridge`);\n                    const allowance = await this.walletProvider.checkERC20Allowance(\n                        params.fromChain,\n                        params.fromToken!,\n                        fromAddress,\n                        this.L1_BRIDGE_ADDRESS\n                    );\n                    elizaLogger.debug(`Current allowance: ${allowance}`);\n                    \n                    if (allowance < amount) {\n                        const neededAllowance = amount - allowance;\n                        elizaLogger.debug(`Increasing ERC20 allowance by ${neededAllowance}`);\n                        \n                        const txHash = await this.walletProvider.approveERC20(\n                            params.fromChain,\n                            params.fromToken!,\n                            this.L1_BRIDGE_ADDRESS,\n                            amount\n                        );\n                        elizaLogger.debug(`Approval transaction submitted with hash: ${txHash}`);\n                        \n                        await publicClient.waitForTransactionReceipt({\n                            hash: txHash,\n                        });\n                        elizaLogger.debug(`Approval transaction confirmed`);\n                    } else {\n                        elizaLogger.debug(`Sufficient allowance already granted`);\n                    }\n                }\n\n                // Execute the appropriate bridge function based on parameters\n                if (selfBridge && nativeTokenBridge) {\n                    elizaLogger.debug(`Self bridge with native token - using depositETH`);\n                    const args = [1, \"0x\"] as const;\n                    \n                    elizaLogger.debug(`Simulating depositETH with value: ${amount}`);\n                    await l1BridgeContract.simulate.depositETH(args, {\n                        value: amount,\n                    });\n                    \n                    elizaLogger.debug(`Executing depositETH transaction`);\n                    resp.txHash = await l1BridgeContract.write.depositETH(args, {\n                        account,\n                        chain,\n                        value: amount,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                } else if (selfBridge && !nativeTokenBridge) {\n                    elizaLogger.debug(`Self bridge with ERC20 token - using depositERC20`);\n                    elizaLogger.debug(`From token: ${params.fromToken}, To token: ${params.toToken}`);\n                    \n                    const args = [\n                        params.fromToken!,\n                        params.toToken!,\n                        amount,\n                        1,\n                        \"0x\",\n                    ] as const;\n                    \n                    elizaLogger.debug(`Simulating depositERC20`);\n                    await l1BridgeContract.simulate.depositERC20(args, {\n                        account,\n                    });\n                    \n                    elizaLogger.debug(`Executing depositERC20 transaction`);\n                    resp.txHash = await l1BridgeContract.write.depositERC20(args, {\n                        account,\n                        chain,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                } else if (!selfBridge && nativeTokenBridge) {\n                    elizaLogger.debug(`Bridge to another address with native token - using depositETHTo`);\n                    elizaLogger.debug(`Recipient address: ${params.toAddress}`);\n                    \n                    const args = [params.toAddress!, 1, \"0x\"] as const;\n                    \n                    elizaLogger.debug(`Simulating depositETHTo with value: ${amount}`);\n                    await l1BridgeContract.simulate.depositETHTo(args, {\n                        value: amount,\n                    });\n                    \n                    elizaLogger.debug(`Executing depositETHTo transaction`);\n                    resp.txHash = await l1BridgeContract.write.depositETHTo(args, {\n                        account,\n                        chain,\n                        value: amount,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                } else {\n                    elizaLogger.debug(`Bridge to another address with ERC20 token - using depositERC20To`);\n                    elizaLogger.debug(`From token: ${params.fromToken}, To token: ${params.toToken}`);\n                    elizaLogger.debug(`Recipient address: ${params.toAddress}`);\n                    \n                    const args = [\n                        params.fromToken!,\n                        params.toToken!,\n                        params.toAddress!,\n                        amount,\n                        1,\n                        \"0x\",\n                    ] as const;\n                    \n                    elizaLogger.debug(`Simulating depositERC20To`);\n                    await l1BridgeContract.simulate.depositERC20To(args, {\n                        account,\n                    });\n                    \n                    elizaLogger.debug(`Executing depositERC20To transaction`);\n                    resp.txHash = await l1BridgeContract.write.depositERC20To(\n                        args,\n                        {\n                            account,\n                            chain,\n                        }\n                    );\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                }\n            } \n            // Handle opBNB to BSC bridging\n            else if (params.fromChain === \"opBNB\" && params.toChain === \"bsc\") {\n                elizaLogger.debug(`Bridging from L2 (opBNB) to L1 (BSC)`);\n                elizaLogger.debug(`Using L2 bridge contract: ${this.L2_BRIDGE_ADDRESS}`);\n                \n                // Set up L2 bridge contract\n                const l2BridgeContract = getContract({\n                    address: this.L2_BRIDGE_ADDRESS,\n                    abi: L2StandardBridgeAbi,\n                    client: {\n                        public: publicClient,\n                        wallet: walletClient,\n                    },\n                });\n\n                // Get delegation fee\n                elizaLogger.debug(`Reading delegation fee from bridge contract`);\n                const delegationFee = await publicClient.readContract({\n                    address: this.L2_BRIDGE_ADDRESS,\n                    abi: L2StandardBridgeAbi,\n                    functionName: \"delegationFee\",\n                });\n                elizaLogger.debug(`Delegation fee: ${delegationFee}`);\n\n                // Check ERC20 allowance if not native token\n                if (!nativeTokenBridge) {\n                    elizaLogger.debug(`Checking ERC20 allowance for L2 bridge`);\n                    const allowance = await this.walletProvider.checkERC20Allowance(\n                        params.fromChain,\n                        params.fromToken!,\n                        fromAddress,\n                        this.L2_BRIDGE_ADDRESS\n                    );\n                    elizaLogger.debug(`Current allowance: ${allowance}`);\n                    \n                    if (allowance < amount) {\n                        const neededAllowance = amount - allowance;\n                        elizaLogger.debug(`Increasing ERC20 allowance by ${neededAllowance}`);\n                        \n                        const txHash = await this.walletProvider.approveERC20(\n                            params.fromChain,\n                            params.fromToken!,\n                            this.L2_BRIDGE_ADDRESS,\n                            amount\n                        );\n                        elizaLogger.debug(`Approval transaction submitted with hash: ${txHash}`);\n                        \n                        await publicClient.waitForTransactionReceipt({\n                            hash: txHash,\n                        });\n                        elizaLogger.debug(`Approval transaction confirmed`);\n                    } else {\n                        elizaLogger.debug(`Sufficient allowance already granted`);\n                    }\n                }\n\n                // Execute the appropriate bridge function based on parameters\n                if (selfBridge && nativeTokenBridge) {\n                    elizaLogger.debug(`Self bridge with native token - using withdraw with LEGACY_ERC20_ETH`);\n                    \n                    const args = [this.LEGACY_ERC20_ETH, amount, 1, \"0x\"] as const;\n                    const value = amount + delegationFee;\n                    \n                    elizaLogger.debug(`Simulating withdraw with value: ${value} (amount + delegationFee)`);\n                    await l2BridgeContract.simulate.withdraw(args, { value });\n                    \n                    elizaLogger.debug(`Executing withdraw transaction`);\n                    resp.txHash = await l2BridgeContract.write.withdraw(args, {\n                        account,\n                        chain,\n                        value,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                } else if (selfBridge && !nativeTokenBridge) {\n                    elizaLogger.debug(`Self bridge with ERC20 token - using withdraw`);\n                    elizaLogger.debug(`Token: ${params.fromToken}`);\n                    \n                    const args = [params.fromToken!, amount, 1, \"0x\"] as const;\n                    const value = delegationFee;\n                    \n                    elizaLogger.debug(`Simulating withdraw with delegationFee: ${value}`);\n                    await l2BridgeContract.simulate.withdraw(args, {\n                        account,\n                        value,\n                    });\n                    \n                    elizaLogger.debug(`Executing withdraw transaction`);\n                    resp.txHash = await l2BridgeContract.write.withdraw(args, {\n                        account,\n                        chain,\n                        value,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                } else if (!selfBridge && nativeTokenBridge) {\n                    elizaLogger.debug(`Bridge to another address with native token - using withdrawTo with LEGACY_ERC20_ETH`);\n                    elizaLogger.debug(`Recipient address: ${params.toAddress}`);\n                    \n                    const args = [\n                        this.LEGACY_ERC20_ETH,\n                        params.toAddress!,\n                        amount,\n                        1,\n                        \"0x\",\n                    ] as const;\n                    const value = amount + delegationFee;\n                    \n                    elizaLogger.debug(`Simulating withdrawTo with value: ${value} (amount + delegationFee)`);\n                    await l2BridgeContract.simulate.withdrawTo(args, { value });\n                    \n                    elizaLogger.debug(`Executing withdrawTo transaction`);\n                    resp.txHash = await l2BridgeContract.write.withdrawTo(args, {\n                        account,\n                        chain,\n                        value,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                } else {\n                    elizaLogger.debug(`Bridge to another address with ERC20 token - using withdrawTo`);\n                    elizaLogger.debug(`Token: ${params.fromToken}`);\n                    elizaLogger.debug(`Recipient address: ${params.toAddress}`);\n                    \n                    const args = [\n                        params.fromToken!,\n                        params.toAddress!,\n                        amount,\n                        1,\n                        \"0x\",\n                    ] as const;\n                    const value = delegationFee;\n                    \n                    elizaLogger.debug(`Simulating withdrawTo with delegationFee: ${value}`);\n                    await l2BridgeContract.simulate.withdrawTo(args, {\n                        account,\n                        value,\n                    });\n                    \n                    elizaLogger.debug(`Executing withdrawTo transaction`);\n                    resp.txHash = await l2BridgeContract.write.withdrawTo(args, {\n                        account,\n                        chain,\n                        value,\n                    });\n                    elizaLogger.debug(`Transaction submitted with hash: ${resp.txHash}`);\n                }\n            } else {\n                elizaLogger.error(`Unsupported bridge direction: ${params.fromChain} to ${params.toChain}`);\n                throw new Error(`Unsupported bridge direction: ${params.fromChain} to ${params.toChain}. Only BSC ↔ opBNB is supported.`);\n            }\n\n            // Verify transaction hash\n            if (!resp.txHash || resp.txHash === \"0x\") {\n                elizaLogger.error(\"Failed to get transaction hash\");\n                throw new Error(\"Get transaction hash failed\");\n            }\n\n            // Wait for transaction confirmation\n            elizaLogger.debug(`Waiting for transaction confirmation: ${resp.txHash}`);\n            await publicClient.waitForTransactionReceipt({\n                hash: resp.txHash,\n            });\n            elizaLogger.debug(`Transaction confirmed: ${resp.txHash}`);\n\n            return resp;\n        } catch (error) {\n            elizaLogger.error(`Error executing bridge operation:`, error);\n            \n            // Enhance error message based on common bridge errors\n            if (error.message.includes(\"insufficient funds\")) {\n                throw new Error(`Insufficient funds to bridge ${params.amount} ${resp.fromToken}. Please check your balance.`);\n            } else if (error.message.includes(\"user rejected\")) {\n                throw new Error(\"Transaction rejected by user.\");\n            } else if (error.message.includes(\"execution reverted\")) {\n                throw new Error(`Bridge transaction reverted. This could be due to contract restrictions or incorrect parameters.`);\n            }\n            \n            // Re-throw the original error\n            throw error;\n        }\n    }\n\n    async validateAndNormalizeParams(params: BridgeParams) {\n        elizaLogger.debug(`Validating bridge params:`, JSON.stringify(params, null, 2));\n        \n        // Validate chains\n        if (!params.fromChain) {\n            elizaLogger.error(\"From chain is required\");\n            throw new Error(\"From chain is required for bridging\");\n        }\n        \n        if (!params.toChain) {\n            elizaLogger.error(\"To chain is required\");\n            throw new Error(\"To chain is required for bridging\");\n        }\n        \n        // Check for supported bridge directions\n        const supportedBridges = [\n            { from: \"bsc\", to: \"opBNB\" },\n            { from: \"opBNB\", to: \"bsc\" }\n        ];\n        \n        const isSupported = supportedBridges.some(\n            bridge => bridge.from === params.fromChain && bridge.to === params.toChain\n        );\n        \n        if (!isSupported) {\n            elizaLogger.error(`Unsupported bridge direction: ${params.fromChain} to ${params.toChain}`);\n            throw new Error(`Unsupported bridge direction. Currently only supporting: BSC ↔ opBNB`);\n        }\n        \n        // Validate amount\n        if (!params.amount) {\n            elizaLogger.error(\"Amount is required\");\n            throw new Error(\"Amount is required for bridging\");\n        }\n        \n        try {\n            const amountValue = parseFloat(params.amount);\n            if (isNaN(amountValue) || amountValue <= 0) {\n                elizaLogger.error(`Invalid amount: ${params.amount}`);\n                throw new Error(`Invalid amount: ${params.amount}. Please provide a positive number.`);\n            }\n            elizaLogger.debug(`Amount validation passed: ${params.amount}`);\n        } catch (error) {\n            elizaLogger.error(`Failed to parse amount: ${params.amount}`, error);\n            throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n        }\n        \n        // Convert \"null\" strings to undefined for token addresses\n        params.fromToken = convertNullStringToUndefined(params.fromToken);\n        params.toToken = convertNullStringToUndefined(params.toToken);\n        \n        // Handle to address (default to sender address if not provided or null)\n        params.toAddress = convertNullStringToUndefined(params.toAddress);\n        \n        if (!params.toAddress) {\n            params.toAddress = this.walletProvider.getAddress();\n            elizaLogger.debug(`No valid toAddress provided, using wallet address: ${params.toAddress}`);\n        } else {\n            // Format address\n            elizaLogger.debug(`Formatting address: ${params.toAddress}`);\n            params.toAddress = await this.walletProvider.formatAddress(params.toAddress);\n            elizaLogger.debug(`Formatted address: ${params.toAddress}`);\n        }\n\n        // Validate token addresses for BSC to opBNB (ERC20 bridging)\n        if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\n            if (params.fromToken && !params.toToken) {\n                elizaLogger.error(\"Missing L2 token address for ERC20 bridging\");\n                throw new Error(\"Token address on opBNB is required when bridging ERC20 from BSC to opBNB\");\n            }\n            \n            // Validate token addresses format if provided\n            if (params.fromToken && !params.fromToken.startsWith(\"0x\")) {\n                elizaLogger.error(`Invalid fromToken address format: ${params.fromToken}`);\n                throw new Error(`Invalid token address format: ${params.fromToken}. Must start with 0x.`);\n            }\n            \n            if (params.toToken && !params.toToken.startsWith(\"0x\")) {\n                elizaLogger.error(`Invalid toToken address format: ${params.toToken}`);\n                throw new Error(`Invalid token address format: ${params.toToken}. Must start with 0x.`);\n            }\n        }\n        \n        elizaLogger.debug(`Validation passed for bridge params`);\n    }\n}\n\n// NOTE: The bridge action only supports bridge funds between BSC and opBNB for now. We may adding stargate support later.\nexport const bridgeAction = {\n    name: \"bridge\",\n    description: \"Bridge tokens between BSC and opBNB\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting bridge action...\");\n        elizaLogger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n        // Extract prompt text for bridge action analysis\n        const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n        elizaLogger.debug(`Raw prompt text: \"${promptText}\"`);\n        \n        // Analyze prompt to detect bridge operations directly\n        const promptLower = promptText.toLowerCase();\n        \n        // Look for bridge patterns in the prompt\n        const depositRegex = /(?:deposit|bridge|send)\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)(?:\\s+from)?\\s+(?:bsc|binance)(?:\\s+to)\\s+(?:opbnb|op)/i;\n        const withdrawRegex = /(?:withdraw|bridge|send)\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)(?:\\s+from)?\\s+(?:opbnb|op)(?:\\s+to)\\s+(?:bsc|binance)/i;\n        const toAddressRegex = /(?:to|address|recipient)\\s+(0x[a-fA-F0-9]{40})/i;\n        \n        let directFromChain: string | null = null;\n        let directToChain: string | null = null;\n        let directAmount: string | null = null;\n        let directToken: string | null = null;\n        let directToAddress: string | null = null;\n        \n        // Try to match deposit pattern (BSC to opBNB)\n        let match = promptText.match(depositRegex);\n        if (match && match.length >= 3) {\n            directFromChain = \"bsc\";\n            directToChain = \"opBNB\";\n            directAmount = match[1];\n            directToken = match[2].toUpperCase();\n            elizaLogger.debug(`Directly extracted BSC to opBNB bridge - Amount: ${directAmount}, Token: ${directToken}`);\n        } else {\n            // Try to match withdraw pattern (opBNB to BSC)\n            match = promptText.match(withdrawRegex);\n            if (match && match.length >= 3) {\n                directFromChain = \"opBNB\";\n                directToChain = \"bsc\";\n                directAmount = match[1];\n                directToken = match[2].toUpperCase();\n                elizaLogger.debug(`Directly extracted opBNB to BSC bridge - Amount: ${directAmount}, Token: ${directToken}`);\n            }\n        }\n        \n        // Check for recipient address in the prompt\n        match = promptText.match(toAddressRegex);\n        if (match && match.length >= 2) {\n            directToAddress = match[1];\n            elizaLogger.debug(`Directly extracted recipient address: ${directToAddress}`);\n        }\n        \n        // Check for direction keywords if not already detected\n        if (!directFromChain || !directToChain) {\n            if (promptLower.includes(\"bsc to opbnb\") || \n                promptLower.includes(\"binance to opbnb\") || \n                promptLower.includes(\"bsc to op\") || \n                promptLower.includes(\"deposit to opbnb\")) {\n                directFromChain = \"bsc\";\n                directToChain = \"opBNB\";\n                elizaLogger.debug(`Detected BSC to opBNB direction from keywords`);\n            } else if (promptLower.includes(\"opbnb to bsc\") || \n                       promptLower.includes(\"opbnb to binance\") || \n                       promptLower.includes(\"op to bsc\") || \n                       promptLower.includes(\"withdraw to bsc\")) {\n                directFromChain = \"opBNB\";\n                directToChain = \"bsc\";\n                elizaLogger.debug(`Detected opBNB to BSC direction from keywords`);\n            }\n        }\n        \n        // Extract amount if not already found\n        if (!directAmount) {\n            const amountRegex = /([0-9]+(?:\\.[0-9]+)?)/;\n            const amountMatch = promptText.match(amountRegex);\n            if (amountMatch && amountMatch.length >= 2) {\n                directAmount = amountMatch[1];\n                elizaLogger.debug(`Extracted amount from prompt: ${directAmount}`);\n            }\n        }\n        \n        // Extract token if not already found\n        if (!directToken) {\n            // Look for common token symbols in the prompt\n            const tokenRegex = /\\b(bnb|eth|usdt|usdc|busd|dai|btc)\\b/i;\n            const tokenMatch = promptLower.match(tokenRegex);\n            if (tokenMatch && tokenMatch.length >= 2) {\n                directToken = tokenMatch[1].toUpperCase();\n                elizaLogger.debug(`Extracted token from prompt: ${directToken}`);\n            }\n        }\n        \n        // Store prompt analysis results\n        const promptAnalysis = {\n            directFromChain,\n            directToChain,\n            directAmount,\n            directToken,\n            directToAddress,\n            containsBSC: promptLower.includes(\"bsc\") || promptLower.includes(\"binance\"),\n            containsOpBNB: promptLower.includes(\"opbnb\") || promptLower.includes(\"op bnb\") || promptLower.includes(\"op-bnb\"),\n            isDeposit: promptLower.includes(\"deposit\"),\n            isWithdraw: promptLower.includes(\"withdraw\")\n        };\n        \n        elizaLogger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        try {\n            state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n            elizaLogger.debug(\"Wallet info:\", state.walletInfo);\n        } catch (error) {\n            elizaLogger.error(\"Error getting wallet info:\", error.message);\n            callback?.({\n                text: `Unable to access wallet: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n\n        // Compose bridge context\n        const bridgeContext = composeContext({\n            state: currentState,\n            template: bridgeTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: bridgeContext,\n            modelClass: ModelClass.LARGE,\n        });\n        \n        elizaLogger.debug(\"Generated bridge content:\", JSON.stringify(content, null, 2));\n        \n        // PRIORITY ORDER FOR BRIDGE PARAMETERS:\n        // 1. Direct match from prompt text (most reliable)\n        // 2. Parameters specified in model-generated content\n        // 3. Default values where appropriate\n        \n        let fromChain: SupportedChain;\n        let toChain: SupportedChain;\n        let amount: string;\n        let fromToken: `0x${string}` | undefined;\n        let toToken: `0x${string}` | undefined;\n        let toAddress: `0x${string}` | undefined;\n        \n        // Determine from chain\n        if (directFromChain === \"bsc\" || directFromChain === \"opBNB\") {\n            fromChain = directFromChain;\n            elizaLogger.debug(`Using from chain directly extracted from prompt: ${fromChain}`);\n        } else if (content.fromChain) {\n            fromChain = content.fromChain;\n            elizaLogger.debug(`Using from chain from generated content: ${fromChain}`);\n        } else {\n            fromChain = \"bsc\"; // Default to BSC as from chain\n            elizaLogger.debug(`No from chain detected, defaulting to ${fromChain}`);\n        }\n        \n        // Determine to chain\n        if (directToChain === \"bsc\" || directToChain === \"opBNB\") {\n            toChain = directToChain;\n            elizaLogger.debug(`Using to chain directly extracted from prompt: ${toChain}`);\n        } else if (content.toChain) {\n            toChain = content.toChain;\n            elizaLogger.debug(`Using to chain from generated content: ${toChain}`);\n        } else {\n            // Set opposite of fromChain\n            toChain = fromChain === \"bsc\" ? \"opBNB\" : \"bsc\";\n            elizaLogger.debug(`No to chain detected, using opposite of fromChain: ${toChain}`);\n        }\n        \n        // Determine amount\n        if (directAmount) {\n            amount = directAmount;\n            elizaLogger.debug(`Using amount directly extracted from prompt: ${amount}`);\n        } else if (content.amount) {\n            amount = content.amount;\n            elizaLogger.debug(`Using amount from generated content: ${amount}`);\n        } else {\n            amount = \"0.001\"; // Default small amount\n            elizaLogger.debug(`No amount detected, defaulting to ${amount}`);\n        }\n        \n        // Determine fromToken (optional)\n        if (directToken && fromChain) {\n            // Only use as token if it's a hex address\n            if (directToken !== \"BNB\" && directToken.startsWith(\"0x\")) {\n                fromToken = directToken as `0x${string}`;\n                elizaLogger.debug(`Using token address directly extracted from prompt: ${fromToken}`);\n            } else {\n                fromToken = undefined; // Treat as native token\n                elizaLogger.debug(`Using native token (${directToken || \"BNB\"})`);\n            }\n        } else if (content.fromToken) {\n            fromToken = content.fromToken;\n            elizaLogger.debug(`Using from token from generated content: ${fromToken}`);\n        }\n        // Else leave undefined for native token\n        \n        // Determine toToken (optional)\n        if (content.toToken) {\n            toToken = convertNullStringToUndefined(content.toToken);\n            if (toToken) {\n                elizaLogger.debug(`Using to token from generated content: ${toToken}`);\n            } else {\n                elizaLogger.debug(`Content contained null/invalid toToken, using undefined instead`);\n            }\n        }\n        \n        // For ERC20 tokens from BSC to opBNB, toToken is required\n        if (fromChain === \"bsc\" && fromToken && !toToken) {\n            elizaLogger.error(`Missing destination token address for ERC20 bridge`);\n            callback?.({\n                text: `Cannot bridge ERC20 token from BSC to opBNB without destination token address. Please provide the token address on opBNB.`,\n                content: { error: \"Missing destination token address\" },\n            });\n            return false;\n        }\n        \n        // Determine toAddress (optional)\n        if (directToAddress && directToAddress.startsWith(\"0x\")) {\n            toAddress = directToAddress as `0x${string}`;\n            elizaLogger.debug(`Using to address directly extracted from prompt: ${toAddress}`);\n        } else if (content.toAddress) {\n            toAddress = convertNullStringToUndefined(content.toAddress);\n            if (toAddress) {\n                elizaLogger.debug(`Using to address from generated content: ${toAddress}`);\n            } else {\n                elizaLogger.debug(`Content contained null/invalid toAddress, using undefined instead`);\n            }\n        }\n        // Else leave undefined to use sender's address\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new BridgeAction(walletProvider);\n        const paramOptions: BridgeParams = {\n            fromChain,\n            toChain,\n            fromToken,\n            toToken,\n            amount,\n            toAddress,\n        };\n        \n        elizaLogger.debug(\"Final bridge options:\", JSON.stringify(paramOptions, null, 2));\n        \n        try {\n            elizaLogger.debug(\"Calling bridge with params:\", JSON.stringify(paramOptions, null, 2));\n            const bridgeResp = await action.bridge(paramOptions);\n            \n            let successText = `Successfully bridged ${bridgeResp.amount} ${bridgeResp.fromToken} from ${bridgeResp.fromChain} to ${bridgeResp.toChain}`;\n            if (bridgeResp.recipient && bridgeResp.recipient !== walletProvider.getAddress()) {\n                successText += ` (recipient: ${bridgeResp.recipient})`;\n            }\n            successText += `\\nTransaction Hash: ${bridgeResp.txHash}`;\n            \n            callback?.({\n                text: successText,\n                content: { ...bridgeResp },\n            });\n            \n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token bridge:\", error.message);\n            \n            // Log the entire error object for diagnosis\n            try {\n                elizaLogger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n            } catch (e) {\n                elizaLogger.error(\"Error object not serializable, logging properties individually:\");\n                for (const key in error) {\n                    try {\n                        elizaLogger.error(`${key}:`, error[key]);\n                    } catch (e) {\n                        elizaLogger.error(`${key}: [Error serializing property]`);\n                    }\n                }\n            }\n            \n            // Provide more user-friendly error messages\n            let errorMessage = error.message;\n            \n            if (error.message.includes(\"insufficient funds\")) {\n                errorMessage = `Insufficient funds for the bridge operation. Please check your balance and try with a smaller amount.`;\n            } else if (error.message.includes(\"user rejected\")) {\n                errorMessage = `Transaction was rejected. Please try again if you want to proceed with the bridge operation.`;\n            } else if (error.message.includes(\"token address on opBNB is required\")) {\n                errorMessage = `When bridging ERC20 tokens from BSC to opBNB, you must specify the token address on opBNB.`;\n            } else if (error.message.includes(\"Unsupported bridge direction\")) {\n                errorMessage = `Only bridges between BSC and opBNB are supported. Valid directions are BSC→opBNB and opBNB→BSC.`;\n            }\n            \n            callback?.({\n                text: `Bridge failed: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    template: bridgeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 0.001 BNB from BSC to opBNB\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 0.001 BNB from BSC to opBNB\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"bsc\",\n                        toChain: \"opBNB\",\n                        fromToken: undefined,\n                        toToken: undefined,\n                        amount: \"0.001\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 0.001 BNB from BSC to address 0x1234 on opBNB\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 0.001 BNB from BSC to address 0x1234 on opBNB\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"bsc\",\n                        toChain: \"opBNB\",\n                        fromToken: undefined,\n                        toToken: undefined,\n                        amount: \"0.001\",\n                        toAddress: \"0x1234\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 0.001 0x123 token from BSC to address 0x456 on opBNB. The corresponding token address on opBNB is 0x789\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 0.001 0x123 token from BSC to address 0x456 on opBNB\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"bsc\",\n                        toChain: \"opBNB\",\n                        fromToken: \"0x123\",\n                        toToken: \"0x789\",\n                        amount: \"0.001\",\n                        toAddress: \"0x456\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 0.001 BNB from opBNB to BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 0.001 BNB from opBNB to BSC\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"opBNB\",\n                        toChain: \"bsc\",\n                        fromToken: undefined,\n                        toToken: undefined,\n                        amount: \"0.001\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 0.001 0x1234 token from opBNB to address 0x5678 on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 0.001 0x1234 token from opBNB to address 0x5678 on BSC\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"opBNB\",\n                        toChain: \"bsc\",\n                        fromToken: \"0x1234\",\n                        toToken: undefined,\n                        amount: \"0.001\",\n                        toAddress: \"0x5678\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"BRIDGE\", \"TOKEN_BRIDGE\", \"DEPOSIT\", \"WITHDRAW\"],\n};\n","import type { Address, Hash } from \"viem\";\n\nexport type SupportedChain = \"bsc\" | \"bscTestnet\" | \"opBNB\" | \"opBNBTestnet\";\nexport type StakeAction = \"deposit\" | \"withdraw\" | \"claim\";\n\n// Action parameters\nexport interface GetBalanceParams {\n    chain: SupportedChain;\n    address?: Address;\n    token: string;\n}\n\nexport interface TransferParams {\n    chain: SupportedChain;\n    token?: string;\n    amount?: string;\n    toAddress: Address;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken?: Address;\n    toToken?: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\nexport interface StakeParams {\n    chain: SupportedChain;\n    action: StakeAction;\n    amount?: string;\n}\n\nexport interface FaucetParams {\n    token?: string;\n    toAddress?: Address;\n}\n\n// Action return types\nexport interface GetBalanceResponse {\n    chain: SupportedChain;\n    address: Address;\n    balance?: { token: string; amount: string };\n}\n\nexport interface TransferResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    amount: string;\n    token: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface BridgeResponse {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface StakeResponse {\n    response: string;\n}\n\nexport interface FaucetResponse {\n    token: string;\n    recipient: Address;\n    txHash: Hash;\n}\n\nexport interface IDeployERC20Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    decimals: number;\n    totalSupply: string;\n}\n\nexport interface IDeployERC721Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    baseURI: string;\n}\n\nexport interface IDeployERC1155Params {\n    chain: SupportedChain;\n    name: string;\n    baseURI: string;\n}\n\n// Contract ABIs\nexport const L1StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"receive\",\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"MESSENGER\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"OTHER_BRIDGE\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20To\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20To\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"deposits\",\n        inputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeETH\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeERC20Withdrawal\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeETHWithdrawal\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"initialize\",\n        inputs: [\n            {\n                name: \"_messenger\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n            {\n                name: \"_superchainConfig\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n            {\n                name: \"_systemConfig\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"l2TokenBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"messenger\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"otherBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"paused\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"superchainConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"systemConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"version\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n                internalType: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeFinalized\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeInitiated\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20DepositInitiated\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20WithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHDepositInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHWithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"Initialized\",\n        inputs: [\n            {\n                name: \"version\",\n                type: \"uint8\",\n                indexed: false,\n                internalType: \"uint8\",\n            },\n        ],\n        anonymous: false,\n    },\n] as const;\n\nexport const L2StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n                internalType: \"address payable\",\n            },\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"AddressEmptyCode\",\n        type: \"error\",\n        inputs: [{ name: \"target\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"AddressInsufficientBalance\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    { name: \"FailedInnerCall\", type: \"error\", inputs: [] },\n    {\n        name: \"OwnableInvalidOwner\",\n        type: \"error\",\n        inputs: [{ name: \"owner\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnableUnauthorizedAccount\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"SafeERC20FailedOperation\",\n        type: \"error\",\n        inputs: [{ name: \"token\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"previousOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"newOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\n    },\n    {\n        name: \"SetDelegationFee\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x0322f3257c2afe5fe8da7ab561f0d3384148487412fe2751678f2188731c0815\",\n    },\n    {\n        name: \"WithdrawTo\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"minGasLimit\",\n                type: \"uint32\",\n                indexed: false,\n                internalType: \"uint32\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x56f66275d9ebc94b7d6895aa0d96a3783550d0183ba106408d387d19f2e877f1\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"contract IL2StandardBridge\",\n            },\n        ],\n        constant: true,\n        signature: \"0x21d12763\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE_ADDRESS\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x2cb7cb06\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"delegationFee\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                value: \"2000000000000000\",\n                internalType: \"uint256\",\n            },\n        ],\n        constant: true,\n        signature: \"0xc5f0a58f\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"owner\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0xCe4750fDc02A07Eb0d99cA798CD5c170D8F8410A\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x8da5cb5b\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"renounceOwnership\",\n        type: \"function\",\n        inputs: [],\n        outputs: [],\n        signature: \"0x715018a6\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"setDelegationFee\",\n        type: \"function\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        outputs: [],\n        signature: \"0x55bfc81c\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"transferOwnership\",\n        type: \"function\",\n        inputs: [\n            { name: \"newOwner\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0xf2fde38b\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdraw\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0x32b7006d\",\n        stateMutability: \"payable\",\n    },\n    {\n        name: \"withdrawFee\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0x1ac3ddeb\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawFeeToL1\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        signature: \"0x244cafe0\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawTo\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_to\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0xa3a79548\",\n        stateMutability: \"payable\",\n    },\n] as const;\n\nexport const ListaDaoAbi = [\n    { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimAllWithdrawals\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_uuid\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimUndelegated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_uuid\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimUndelegatedFrom\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_idx\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimWithdrawal\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Delegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"_delegateVotePower\",\n                type: \"bool\",\n            },\n        ],\n        name: \"DelegateTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_delegateTo\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_votesChange\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DelegateVoteTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_src\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Deposit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"DisableValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"Paused\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposeManager\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_src\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_dest\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReDelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_rewardsId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Redelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"RemoveValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RequestWithdraw\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RewardsCompounded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousAdminRole\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newAdminRole\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"RoleAdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"RoleGranted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"RoleRevoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_annualRate\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetAnnualRate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetBSCValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetManager\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_minBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetMinBnb\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetRedirectAddress\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetReserveAmount\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetRevenuePool\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_synFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetSynFee\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_credit\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"toRemove\",\n                type: \"bool\",\n            },\n        ],\n        name: \"SyncCreditContract\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_nextUndelegatedRequestIndex\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bnbAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_shares\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Undelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bnbAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_shares\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UndelegateFrom\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UndelegateReserve\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"Unpaused\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"WhitelistValidator\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"BOT\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"DEFAULT_ADMIN_ROLE\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GUARDIAN\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TEN_DECIMALS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"acceptNewManager\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"amountToDelegate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"annualRate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\n        ],\n        name: \"binarySearchCoveredMaxIndex\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"claimUndelegated\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_idx\", type: \"uint256\" }],\n        name: \"claimWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\n        ],\n        name: \"claimWithdrawFor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"compoundRewards\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\n        ],\n        name: \"convertBnbToShares\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"convertBnbToSnBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\n        ],\n        name: \"convertSharesToBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"convertSnBnbToBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        name: \"creditContracts\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        name: \"creditStates\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"delegateTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"delegateVotePower\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_delegateTo\", type: \"address\" },\n        ],\n        name: \"delegateVoteTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"depositReserve\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"disableValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAmountToUndelegate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountToUndelegate\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" }],\n        name: \"getBotUndelegateRequest\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amount\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amountInSnBnb\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IStakeManager.BotUndelegateRequest\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"getClaimableAmount\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getContracts\",\n        outputs: [\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\n            { internalType: \"address\", name: \"_bscValidator\", type: \"address\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"getDelegated\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"getRedelegateFee\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"bytes32\", name: \"role\", type: \"bytes32\" }],\n        name: \"getRoleAdmin\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSlisBnbWithdrawLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_slisBnbWithdrawLimit\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBnbInValidators\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalPooledBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\n        ],\n        name: \"getUserRequestStatus\",\n        outputs: [\n            { internalType: \"bool\", name: \"_isClaimable\", type: \"bool\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"getUserWithdrawalRequests\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"uint256\", name: \"uuid\", type: \"uint256\" },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amountInSnBnb\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IStakeManager.WithdrawalRequest[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"grantRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"hasRole\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\n            { internalType: \"address\", name: \"_admin\", type: \"address\" },\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\n            { internalType: \"address\", name: \"_bot\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" },\n            { internalType: \"address\", name: \"_revenuePool\", type: \"address\" },\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"nextConfirmedRequestUUID\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pause\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"paused\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"placeholder\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"proposeNewManager\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"srcValidator\", type: \"address\" },\n            { internalType: \"address\", name: \"dstValidator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"redelegate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"redirectAddress\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"removeValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"renounceRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        name: \"requestIndexMap\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"requestUUID\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requestWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"reserveAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"revenuePool\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"revokeBotRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"revokeRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"_annualRate\", type: \"uint256\" },\n        ],\n        name: \"setAnnualRate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setBSCValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setBotRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"setMinBnb\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setRedirectAddress\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"setReserveAmount\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setRevenuePool\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" }],\n        name: \"setSynFee\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" },\n        ],\n        name: \"supportsInterface\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"synFee\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"togglePause\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"toggleVote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalDelegated\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalReserveAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"unbondingBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"undelegate\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"undelegateFrom\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_actualBnbAmount\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"undelegatedQuota\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        name: \"validators\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"whitelistValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"withdrawReserve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    { stateMutability: \"payable\", type: \"receive\" },\n] as const;\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport solc from \"solc\";\nimport { type Abi, type Address, parseUnits } from \"viem\";\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { ercContractTemplate } from \"../templates\";\nimport type {\n    IDeployERC1155Params,\n    IDeployERC721Params,\n    IDeployERC20Params,\n    SupportedChain,\n} from \"../types\";\nimport { compileSolidity } from \"../utils/contracts\";\n\nexport { ercContractTemplate };\n\nexport class DeployAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async compileSolidity(contractName: string, source: string) {\n        elizaLogger.debug(`Compiling Solidity contract: ${contractName}`);\n        const solName = `${contractName}.sol`;\n        const input = {\n            language: \"Solidity\",\n            sources: {\n                [solName]: {\n                    content: source,\n                },\n            },\n            settings: {\n                outputSelection: {\n                    \"*\": {\n                        \"*\": [\"*\"],\n                    },\n                },\n            },\n        };\n        elizaLogger.debug(\"Preparing to compile contract...\");\n        \n        try {\n            const output = JSON.parse(solc.compile(JSON.stringify(input)));\n            elizaLogger.debug(\"Compilation completed, checking for errors...\");\n\n            // Check compile error\n            if (output.errors) {\n                const errors = output.errors;\n                const hasError = errors.some((error) => error.type === \"Error\");\n                \n                if (hasError) {\n                    elizaLogger.error(`Compilation errors:`, JSON.stringify(errors, null, 2));\n                    const errorMessages = errors.map(e => e.formattedMessage || e.message).join(\"\\n\");\n                    throw new Error(`Contract compilation failed: ${errorMessages}`);\n                } else {\n                    // Just warnings\n                    elizaLogger.warn(`Compilation warnings:`, JSON.stringify(errors, null, 2));\n                }\n            }\n\n            const contract = output.contracts[solName][contractName];\n\n            if (!contract) {\n                elizaLogger.error(`Compilation result is empty for ${contractName}`);\n                throw new Error(`Compilation result is empty for ${contractName}`);\n            }\n\n            elizaLogger.debug(`Contract ${contractName} compiled successfully`);\n            return {\n                abi: contract.abi as Abi,\n                bytecode: contract.evm.bytecode.object,\n            };\n        } catch (error) {\n            elizaLogger.error(`Error compiling contract ${contractName}:`, error);\n            throw new Error(`Failed to compile contract: ${error.message}`);\n        }\n    }\n\n    async deployERC20(deployTokenParams: IDeployERC20Params) {\n        elizaLogger.debug(\"Deploying ERC20 token with params:\", JSON.stringify(deployTokenParams, null, 2));\n\n        // Validate parameters\n        const { name, symbol, decimals, totalSupply, chain } = deployTokenParams;\n        \n        if (!name || name === \"\") {\n            elizaLogger.error(\"Token name is required\");\n            throw new Error(\"Token name is required\");\n        }\n        if (!symbol || symbol === \"\") {\n            elizaLogger.error(\"Token symbol is required\");\n            throw new Error(\"Token symbol is required\");\n        }\n        if (!decimals || decimals === 0) {\n            elizaLogger.error(\"Token decimals is required\");\n            throw new Error(\"Token decimals is required\");\n        }\n        if (!totalSupply || totalSupply === \"\") {\n            elizaLogger.error(\"Token total supply is required\");\n            throw new Error(\"Token total supply is required\");\n        }\n        \n        elizaLogger.debug(`Deploying ERC20 token: ${name} (${symbol}) with ${decimals} decimals and total supply ${totalSupply}`);\n\n        try {\n            elizaLogger.debug(`Converting total supply ${totalSupply} to wei with ${decimals} decimals`);\n            const totalSupplyWithDecimals = parseUnits(totalSupply, decimals);\n            elizaLogger.debug(`Total supply in wei: ${totalSupplyWithDecimals.toString()}`);\n            \n            const args = [name, symbol, decimals, totalSupplyWithDecimals];\n            elizaLogger.debug(`Contract constructor arguments:`, args);\n            \n            elizaLogger.debug(`Deploying ERC20 contract on chain ${chain}...`);\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC20Contract\",\n                args\n            );\n\n            if (!contractAddress) {\n                elizaLogger.error(\"Failed to deploy ERC20 contract - no address returned\");\n                throw new Error(\"Failed to deploy ERC20 contract\");\n            }\n            \n            elizaLogger.debug(`ERC20 contract deployed successfully at address: ${contractAddress}`);\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Deploy ERC20 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployERC721(deployNftParams: IDeployERC721Params) {\n        elizaLogger.debug(\"Deploying ERC721 NFT with params:\", JSON.stringify(deployNftParams, null, 2));\n\n        // Validate parameters\n        const { baseURI, name, symbol, chain } = deployNftParams;\n        \n        if (!name || name === \"\") {\n            elizaLogger.error(\"NFT name is required\");\n            throw new Error(\"NFT name is required\");\n        }\n        if (!symbol || symbol === \"\") {\n            elizaLogger.error(\"NFT symbol is required\");\n            throw new Error(\"NFT symbol is required\");\n        }\n        if (!baseURI || baseURI === \"\") {\n            elizaLogger.error(\"NFT baseURI is required\");\n            throw new Error(\"NFT baseURI is required\");\n        }\n        \n        elizaLogger.debug(`Deploying ERC721 NFT: ${name} (${symbol}) with baseURI ${baseURI}`);\n        \n        try {\n            const args = [name, symbol, baseURI];\n            elizaLogger.debug(`Contract constructor arguments:`, args);\n            \n            elizaLogger.debug(`Deploying ERC721 contract on chain ${chain}...`);\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC721Contract\",\n                args\n            );\n\n            if (!contractAddress) {\n                elizaLogger.error(\"Failed to deploy ERC721 contract - no address returned\");\n                throw new Error(\"Failed to deploy ERC721 contract\");\n            }\n            \n            elizaLogger.debug(`ERC721 contract deployed successfully at address: ${contractAddress}`);\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Deploy ERC721 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployERC1155(deploy1155Params: IDeployERC1155Params) {\n        elizaLogger.debug(\"Deploying ERC1155 token with params:\", JSON.stringify(deploy1155Params, null, 2));\n\n        // Validate parameters\n        const { baseURI, name, chain } = deploy1155Params;\n        \n        if (!name || name === \"\") {\n            elizaLogger.error(\"Token name is required\");\n            throw new Error(\"Token name is required\");\n        }\n        if (!baseURI || baseURI === \"\") {\n            elizaLogger.error(\"Token baseURI is required\");\n            throw new Error(\"Token baseURI is required\");\n        }\n        \n        elizaLogger.debug(`Deploying ERC1155 token: ${name} with baseURI ${baseURI}`);\n        \n        try {\n            const args = [name, baseURI];\n            elizaLogger.debug(`Contract constructor arguments:`, args);\n            \n            elizaLogger.debug(`Deploying ERC1155 contract on chain ${chain}...`);\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC1155Contract\",\n                args\n            );\n\n            if (!contractAddress) {\n                elizaLogger.error(\"Failed to deploy ERC1155 contract - no address returned\");\n                throw new Error(\"Failed to deploy ERC1155 contract\");\n            }\n            \n            elizaLogger.debug(`ERC1155 contract deployed successfully at address: ${contractAddress}`);\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Deploy ERC1155 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployContract(\n        chain: SupportedChain,\n        contractName: string,\n        args: any[]\n    ): Promise<Address | null | undefined> {\n        elizaLogger.debug(`Starting contract deployment process for ${contractName} on chain ${chain}`);\n        \n        try {\n            elizaLogger.debug(`Compiling ${contractName}...`);\n            const { abi, bytecode } = await compileSolidity(contractName);\n            \n            if (!abi) {\n                elizaLogger.error(`No ABI found for ${contractName}`);\n                throw new Error(`Compilation failed: No ABI found for ${contractName}`);\n            }\n            \n            if (!bytecode) {\n                elizaLogger.error(`No bytecode found for ${contractName}`);\n                throw new Error(\"Bytecode is empty after compilation\");\n            }\n            \n            elizaLogger.debug(`Compilation successful, bytecode length: ${bytecode.length}`);\n            elizaLogger.debug(`Switching to chain ${chain} for deployment`);\n            this.walletProvider.switchChain(chain);\n\n            const chainConfig = this.walletProvider.getChainConfigs(chain);\n            elizaLogger.debug(`Using chain config: ${chainConfig.name} (ID: ${chainConfig.id})`);\n            \n            const walletClient = this.walletProvider.getWalletClient(chain);\n            const account = this.walletProvider.getAccount();\n            elizaLogger.debug(`Deploying from account: ${account.address}`);\n            \n            // Calculate approximate gas before deployment\n            const publicClient = this.walletProvider.getPublicClient(chain);\n            \n            elizaLogger.debug(`Submitting deployment transaction...`);\n            const hash = await walletClient.deployContract({\n                account,\n                abi,\n                bytecode,\n                args,\n                chain: chainConfig,\n            });\n\n            elizaLogger.debug(`Deployment transaction submitted with hash: ${hash}`);\n            elizaLogger.debug(`Waiting for deployment transaction confirmation...`);\n            \n            const receipt = await publicClient.waitForTransactionReceipt({\n                hash,\n            });\n            \n            if (receipt.status === \"success\") {\n                elizaLogger.debug(`Contract deployed successfully at address: ${receipt.contractAddress}`);\n            } else {\n                elizaLogger.error(`Deployment transaction failed with status: ${receipt.status}`);\n                throw new Error(\"Contract deployment transaction failed\");\n            }\n\n            return receipt.contractAddress;\n        } catch (error) {\n            elizaLogger.error(`Error deploying contract ${contractName}:`, error);\n            \n            // Provide more informative error messages\n            if (error.message.includes(\"insufficient funds\")) {\n                throw new Error(`Insufficient funds to deploy the contract. Please check your balance.`);\n            } else if (error.message.includes(\"user rejected\")) {\n                throw new Error(\"Transaction rejected by user.\");\n            }\n            \n            throw error;\n        }\n    }\n}\n\nexport const deployAction = {\n    name: \"deploy_token\",\n    description:\n        \"Deploy token contracts (ERC20/721/1155) based on user specifications\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting deploy action...\");\n        elizaLogger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n        // Extract prompt text for contract deployment analysis\n        const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n        elizaLogger.debug(`Raw prompt text: \"${promptText}\"`);\n        \n        // Analyze prompt to detect contract type and parameters\n        const promptLower = promptText.toLowerCase();\n        \n        // Regular expressions for contract parameter detection\n        const erc20Regex = /(?:deploy|create)\\s+(?:an?\\s+)?(?:erc20|token)(?:\\s+token)?\\s+(?:with|having|named)?\\s+(?:name\\s+['\"]?([^'\"]+)['\"]?|['\"]?([^'\"]+)['\"]?\\s+token)/i;\n        const erc721Regex = /(?:deploy|create)\\s+(?:an?\\s+)?(?:erc721|nft)(?:\\s+token)?\\s+(?:with|having|named)?\\s+(?:name\\s+['\"]?([^'\"]+)['\"]?|['\"]?([^'\"]+)['\"]?\\s+nft)/i;\n        const erc1155Regex = /(?:deploy|create)\\s+(?:an?\\s+)?(?:erc1155|multi-token)(?:\\s+token)?\\s+(?:with|having|named)?\\s+(?:name\\s+['\"]?([^'\"]+)['\"]?|['\"]?([^'\"]+)['\"]?\\s+token)/i;\n        \n        const symbolRegex = /symbol\\s+['\"]?([^'\"]+)['\"]?/i;\n        const decimalsRegex = /decimals\\s+([0-9]+)/i;\n        const totalSupplyRegex = /(?:total\\s+supply|supply)\\s+([0-9]+(?:\\.[0-9]+)?(?:\\s*[kmbt])?)/i;\n        const baseURIRegex = /(?:base\\s*uri|baseuri|uri)\\s+['\"]?(https?:\\/\\/[^'\"]+)['\"]?/i;\n        \n        // Detect contract type\n        let directContractType: string | null = null;\n        let directName: string | null = null;\n        let directSymbol: string | null = null;\n        let directDecimals: number | null = null;\n        let directTotalSupply: string | null = null;\n        let directBaseURI: string | null = null;\n        let directChain: SupportedChain | null = null;\n        \n        // Check for ERC20 pattern\n        let match = promptText.match(erc20Regex);\n        if (match) {\n            directContractType = \"erc20\";\n            directName = match[1] || match[2] || null;\n            elizaLogger.debug(`Detected ERC20 token deployment with name: ${directName}`);\n        }\n        \n        // Check for ERC721 pattern\n        if (!directContractType) {\n            match = promptText.match(erc721Regex);\n            if (match) {\n                directContractType = \"erc721\";\n                directName = match[1] || match[2] || null;\n                elizaLogger.debug(`Detected ERC721 NFT deployment with name: ${directName}`);\n            }\n        }\n        \n        // Check for ERC1155 pattern\n        if (!directContractType) {\n            match = promptText.match(erc1155Regex);\n            if (match) {\n                directContractType = \"erc1155\";\n                directName = match[1] || match[2] || null;\n                elizaLogger.debug(`Detected ERC1155 token deployment with name: ${directName}`);\n            }\n        }\n        \n        // Check for common keywords if no type detected yet\n        if (!directContractType) {\n            if (promptLower.includes(\"erc20\") || promptLower.includes(\"fungible token\")) {\n                directContractType = \"erc20\";\n                elizaLogger.debug(\"Detected ERC20 token deployment from keywords\");\n            } else if (promptLower.includes(\"erc721\") || promptLower.includes(\"nft\") || promptLower.includes(\"non-fungible\")) {\n                directContractType = \"erc721\";\n                elizaLogger.debug(\"Detected ERC721 token deployment from keywords\");\n            } else if (promptLower.includes(\"erc1155\") || promptLower.includes(\"multi\") || promptLower.includes(\"1155\")) {\n                directContractType = \"erc1155\";\n                elizaLogger.debug(\"Detected ERC1155 token deployment from keywords\");\n            }\n        }\n        \n        // Extract symbol\n        match = promptText.match(symbolRegex);\n        if (match && match.length >= 2) {\n            directSymbol = match[1].trim();\n            elizaLogger.debug(`Extracted token symbol: ${directSymbol}`);\n        }\n        \n        // Extract decimals\n        match = promptText.match(decimalsRegex);\n        if (match && match.length >= 2) {\n            directDecimals = parseInt(match[1], 10);\n            elizaLogger.debug(`Extracted token decimals: ${directDecimals}`);\n        }\n        \n        // Extract total supply\n        match = promptText.match(totalSupplyRegex);\n        if (match && match.length >= 2) {\n            directTotalSupply = match[1].trim();\n            // Convert shorthand notations (K, M, B, T) to full numbers\n            if (directTotalSupply.endsWith('k') || directTotalSupply.endsWith('K')) {\n                directTotalSupply = (parseFloat(directTotalSupply) * 1000).toString();\n            } else if (directTotalSupply.endsWith('m') || directTotalSupply.endsWith('M')) {\n                directTotalSupply = (parseFloat(directTotalSupply) * 1000000).toString();\n            } else if (directTotalSupply.endsWith('b') || directTotalSupply.endsWith('B')) {\n                directTotalSupply = (parseFloat(directTotalSupply) * 1000000000).toString();\n            } else if (directTotalSupply.endsWith('t') || directTotalSupply.endsWith('T')) {\n                directTotalSupply = (parseFloat(directTotalSupply) * 1000000000000).toString();\n            }\n            elizaLogger.debug(`Extracted token total supply: ${directTotalSupply}`);\n        }\n        \n        // Extract baseURI\n        match = promptText.match(baseURIRegex);\n        if (match && match.length >= 2) {\n            directBaseURI = match[1].trim();\n            elizaLogger.debug(`Extracted token baseURI: ${directBaseURI}`);\n        }\n        \n        // Detect chain\n        if (promptLower.includes(\"bsc\") || promptLower.includes(\"binance\")) {\n            directChain = \"bsc\";\n            elizaLogger.debug(\"Detected BSC chain from prompt\");\n        } else if (promptLower.includes(\"opbnb\") || promptLower.includes(\"op bnb\")) {\n            directChain = \"opBNB\";\n            elizaLogger.debug(\"Detected opBNB chain from prompt\");\n        }\n        \n        // Store prompt analysis results\n        const promptAnalysis = {\n            directContractType,\n            directName,\n            directSymbol,\n            directDecimals,\n            directTotalSupply,\n            directBaseURI,\n            directChain\n        };\n        \n        elizaLogger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        try {\n            elizaLogger.debug(\"Getting wallet info...\");\n            state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n            elizaLogger.debug(\"Wallet info retrieved:\", state.walletInfo);\n        } catch (error) {\n            elizaLogger.error(\"Error getting wallet info:\", error.message);\n            callback?.({\n                text: `Unable to access wallet: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n\n        // Compose context\n        elizaLogger.debug(\"Composing contract template context...\");\n        const context = composeContext({\n            state: currentState,\n            template: ercContractTemplate,\n        });\n        \n        elizaLogger.debug(\"Generating contract parameters via model...\");\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: context,\n            modelClass: ModelClass.LARGE,\n        });\n        \n        elizaLogger.debug(\"Generated contract content:\", JSON.stringify(content, null, 2));\n\n        // PRIORITY ORDER FOR CONTRACT PARAMETERS:\n        // 1. Direct match from prompt text (most reliable)\n        // 2. Parameters specified in model-generated content\n        // 3. Default values where appropriate\n        \n        // Determine contract type\n        let contractType: string;\n        if (directContractType) {\n            contractType = directContractType;\n            elizaLogger.debug(`Using contract type directly extracted from prompt: ${contractType}`);\n        } else if (content.contractType) {\n            contractType = content.contractType.toLowerCase();\n            elizaLogger.debug(`Using contract type from generated content: ${contractType}`);\n        } else {\n            contractType = \"erc20\"; // Default\n            elizaLogger.debug(`No contract type detected, defaulting to ${contractType}`);\n        }\n        \n        // Determine chain\n        let chain: SupportedChain = \"bsc\"; // Default\n        if (directChain) {\n            chain = directChain;\n            elizaLogger.debug(`Using chain directly extracted from prompt: ${chain}`);\n        } else if (content.chain) {\n            chain = content.chain;\n            elizaLogger.debug(`Using chain from generated content: ${chain}`);\n        } else {\n            elizaLogger.debug(`No chain detected, defaulting to ${chain}`);\n        }\n        \n        // Initialize wallet provider and action handler\n        elizaLogger.debug(\"Initializing wallet provider...\");\n        const walletProvider = initWalletProvider(runtime);\n        const action = new DeployAction(walletProvider);\n        \n        try {\n            elizaLogger.debug(`Starting deployment process for ${contractType.toUpperCase()} contract on ${chain}...`);\n            let result: any;\n            \n            switch (contractType.toLowerCase()) {\n                case \"erc20\":\n                    // Determine ERC20 specific parameters\n                    const name = directName || content.name || \"DefaultToken\";\n                    const symbol = directSymbol || content.symbol || \"DTK\";\n                    const decimals = directDecimals || content.decimals || 18;\n                    const totalSupply = directTotalSupply || content.totalSupply || \"1000000\";\n                    \n                    elizaLogger.debug(`Deploying ERC20 with params: name=${name}, symbol=${symbol}, decimals=${decimals}, totalSupply=${totalSupply}`);\n                    \n                    result = await action.deployERC20({\n                        chain,\n                        decimals,\n                        symbol,\n                        name,\n                        totalSupply,\n                    });\n                    break;\n                    \n                case \"erc721\":\n                    // Determine ERC721 specific parameters\n                    const nftName = directName || content.name || \"DefaultNFT\";\n                    const nftSymbol = directSymbol || content.symbol || \"DNFT\";\n                    const nftBaseURI = directBaseURI || content.baseURI || \"https://example.com/token/\";\n                    \n                    elizaLogger.debug(`Deploying ERC721 with params: name=${nftName}, symbol=${nftSymbol}, baseURI=${nftBaseURI}`);\n                    \n                    result = await action.deployERC721({\n                        chain,\n                        name: nftName,\n                        symbol: nftSymbol,\n                        baseURI: nftBaseURI,\n                    });\n                    break;\n                    \n                case \"erc1155\":\n                    // Determine ERC1155 specific parameters\n                    const multiName = directName || content.name || \"DefaultMultiToken\";\n                    const multiBaseURI = directBaseURI || content.baseURI || \"https://example.com/multi-token/\";\n                    \n                    elizaLogger.debug(`Deploying ERC1155 with params: name=${multiName}, baseURI=${multiBaseURI}`);\n                    \n                    result = await action.deployERC1155({\n                        chain,\n                        name: multiName,\n                        baseURI: multiBaseURI,\n                    });\n                    break;\n                    \n                default:\n                    elizaLogger.error(`Unsupported contract type: ${contractType}`);\n                    throw new Error(`Unsupported contract type: ${contractType}. Supported types are: erc20, erc721, erc1155`);\n            }\n\n            if (result && result.address) {\n                elizaLogger.debug(`Contract deployed successfully at address: ${result.address}`);\n                \n                // Prepare user-friendly response with contract type and chain info\n                const contractTypeName = contractType.toUpperCase();\n                const chainName = chain === \"bsc\" ? \"Binance Smart Chain\" : \"opBNB\";\n                \n                callback?.({\n                    text: `Successfully deployed ${contractTypeName} contract on ${chainName} at address: ${result.address}`,\n                    content: { \n                        ...result,\n                        contractType,\n                        chain \n                    },\n                });\n            } else {\n                elizaLogger.error(\"Contract deployment failed - no address returned\");\n                callback?.({\n                    text: \"Contract deployment failed\",\n                    content: { error: \"No contract address returned\" },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during contract deployment:\", error.message);\n            \n            // Log the entire error object for diagnosis\n            try {\n                elizaLogger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n            } catch (e) {\n                elizaLogger.error(\"Error object not serializable, logging properties individually:\");\n                for (const key in error) {\n                    try {\n                        elizaLogger.error(`${key}:`, error[key]);\n                    } catch (e) {\n                        elizaLogger.error(`${key}: [Error serializing property]`);\n                    }\n                }\n            }\n            \n            // Provide more user-friendly error messages\n            let errorMessage = error.message;\n            \n            if (error.message.includes(\"insufficient funds\")) {\n                errorMessage = `Insufficient funds for contract deployment. Please check your wallet balance.`;\n            } else if (error.message.includes(\"user rejected\")) {\n                errorMessage = `Transaction was rejected. Please try again if you want to proceed with the deployment.`;\n            } else if (error.message.includes(\"compilation failed\")) {\n                errorMessage = `Contract compilation failed. This might be due to syntax errors in the contract code.`;\n            }\n            \n            callback?.({\n                text: `Deployment failed: ${errorMessage}`,\n                content: { \n                    error: errorMessage,\n                    contractType \n                },\n            });\n            return false;\n        }\n    },\n    template: ercContractTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC20 token with name 'elizayolo', symbol 'ELIYOYO', decimals 18, total supply 10000\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC721 NFT contract with name 'MyNFT', symbol 'MNFT', baseURI 'https://my-nft-base-uri.com'\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC1155 contract with name 'My1155', baseURI 'https://my-1155-base-uri.com'\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"DEPLOY_ERC20\",\n        \"DEPLOY_ERC721\",\n        \"DEPLOY_ERC1155\",\n        \"CREATE_TOKEN\",\n        \"CREATE_NFT\",\n        \"CREATE_1155\",\n    ],\n};\n","import { elizaLogger } from \"@elizaos/core\";\nimport fs from \"node:fs\";\nimport { createRequire } from \"node:module\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport solc from \"solc\";\n\nconst require = createRequire(import.meta.url);\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-bnb/src/contracts\");\n\nfunction getContractSource(contractPath: string) {\n    return fs.readFileSync(contractPath, \"utf8\");\n}\n\nfunction findImports(importPath: string) {\n    try {\n        if (importPath.startsWith(\"@openzeppelin/\")) {\n            const modPath = require.resolve(importPath);\n            return { contents: fs.readFileSync(modPath, \"utf8\") };\n        }\n\n        const localPath = path.resolve(\"./contracts\", importPath);\n        if (fs.existsSync(localPath)) {\n            return { contents: fs.readFileSync(localPath, \"utf8\") };\n        }\n        return { error: \"File not found\" };\n    } catch {\n        return { error: `File not found: ${importPath}` };\n    }\n}\n\nexport async function compileSolidity(contractFileName: string) {\n    const contractPath = path.join(baseDir, `${contractFileName}.sol`);\n    const source = getContractSource(contractPath);\n\n    const input = {\n        language: \"Solidity\",\n        sources: {\n            [contractFileName]: {\n                content: source,\n            },\n        },\n        settings: {\n            optimizer: {\n                enabled: true,\n                runs: 200,\n            },\n            outputSelection: {\n                \"*\": {\n                    \"*\": [\"*\"],\n                },\n            },\n        },\n    };\n\n    elizaLogger.debug(\"Compiling contract...\");\n\n    try {\n        const output = JSON.parse(\n            solc.compile(JSON.stringify(input), { import: findImports })\n        );\n\n        if (output.errors) {\n            const hasError = output.errors.some(\n                (error) => error.type === \"Error\"\n            );\n            if (hasError) {\n                throw new Error(\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\n                );\n            }\n            elizaLogger.warn(\"Compilation warnings:\", output.errors);\n        }\n\n        const contractName = path.basename(contractFileName, \".sol\");\n        const contract = output.contracts[contractFileName][contractName];\n\n        if (!contract) {\n            throw new Error(\"Contract compilation result is empty\");\n        }\n\n        elizaLogger.debug(\"Contract compiled successfully\");\n        return {\n            abi: contract.abi,\n            bytecode: contract.evm.bytecode.object,\n        };\n    } catch (error) {\n        elizaLogger.error(\"Compilation failed:\", error.message);\n        throw error;\n    }\n}\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\n// Default RPC URLs as fallbacks\nconst DEFAULT_BSC_PROVIDER_URL = \"https://bsc-mainnet.nodereal.io/v1/64a9df0874fb4a93b9d0a3849de012d3\";\nconst DEFAULT_BSC_TESTNET_PROVIDER_URL = \"https://data-seed-prebsc-2-s3.bnbchain.org:8545\";\nconst DEFAULT_OPBNB_PROVIDER_URL = \"https://opbnb-mainnet-rpc.bnbchain.org\";\n\nexport const bnbEnvSchema = z.object({\n    BNB_PRIVATE_KEY: z.string().optional(),\n    BNB_PUBLIC_KEY: z.string().optional(),\n    BSC_PROVIDER_URL: z.string().default(DEFAULT_BSC_PROVIDER_URL),\n    BSC_TESTNET_PROVIDER_URL: z.string().default(DEFAULT_BSC_TESTNET_PROVIDER_URL),\n    OPBNB_PROVIDER_URL: z.string().default(DEFAULT_OPBNB_PROVIDER_URL),\n});\n\nexport type BnbConfig = z.infer<typeof bnbEnvSchema>;\n\n/**\n * Get configuration with defaults\n */\nexport function getConfig(): BnbConfig {\n    return {\n        BNB_PRIVATE_KEY: process.env.BNB_PRIVATE_KEY,\n        BNB_PUBLIC_KEY: process.env.BNB_PUBLIC_KEY,\n        BSC_PROVIDER_URL: process.env.BSC_PROVIDER_URL || DEFAULT_BSC_PROVIDER_URL,\n        BSC_TESTNET_PROVIDER_URL: process.env.BSC_TESTNET_PROVIDER_URL || DEFAULT_BSC_TESTNET_PROVIDER_URL,\n        OPBNB_PROVIDER_URL: process.env.OPBNB_PROVIDER_URL || DEFAULT_OPBNB_PROVIDER_URL,\n    };\n}\n\n/**\n * Validate BNB configuration using runtime settings or environment variables\n */\nexport async function validateBnbConfig(\n    runtime: IAgentRuntime\n): Promise<BnbConfig> {\n    try {\n        const config = {\n            BNB_PRIVATE_KEY: runtime.getSetting(\"BNB_PRIVATE_KEY\") || process.env.BNB_PRIVATE_KEY,\n            BNB_PUBLIC_KEY: runtime.getSetting(\"BNB_PUBLIC_KEY\") || process.env.BNB_PUBLIC_KEY,\n            BSC_PROVIDER_URL: runtime.getSetting(\"BSC_PROVIDER_URL\") || process.env.BSC_PROVIDER_URL || DEFAULT_BSC_PROVIDER_URL,\n            BSC_TESTNET_PROVIDER_URL: runtime.getSetting(\"BSC_TESTNET_PROVIDER_URL\") || process.env.BSC_TESTNET_PROVIDER_URL || DEFAULT_BSC_TESTNET_PROVIDER_URL,\n            OPBNB_PROVIDER_URL: runtime.getSetting(\"OPBNB_PROVIDER_URL\") || process.env.OPBNB_PROVIDER_URL || DEFAULT_OPBNB_PROVIDER_URL,\n        };\n\n        return bnbEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `BNB configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n\n/**\n * Check if a wallet is configured (either private or public key)\n */\nexport function hasWalletConfigured(config: BnbConfig): boolean {\n    return !!(config.BNB_PRIVATE_KEY || config.BNB_PUBLIC_KEY);\n}\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { getToken, type ChainId } from \"@lifi/sdk\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { getBalanceTemplate } from \"../templates\";\nimport type {\n    GetBalanceParams,\n    GetBalanceResponse,\n    SupportedChain,\n} from \"../types\";\nimport { type Address, erc20Abi, formatEther, formatUnits, isAddress } from \"viem\";\n// Import the environment configuration\nimport { validateBnbConfig } from \"../environment\";\n\n// List of supported testnet tokens\nconst SUPPORTED_TESTNET_TOKENS = [\"BNB\", \"BUSD\", \"DAI\", \"ETH\", \"USDC\"];\n\n// Testnet token contract addresses - using the latest valid addresses from Binance Oracle\nconst TESTNET_TOKEN_ADDRESSES: Record<string, string> = {\n    \"BNB\": \"0x64544969ed7EBf5f083679233325356EbE738930\",\n    \"BUSD\": \"0x48D87A2d14De41E2308A764905B93E05c9377cE1\",\n    \"DAI\": \"0x46B48c1Ef4B5F15B7DdC415290CEC2f774cD1021\",\n    \"ETH\": \"0x635780E5D02Ab29d7aE14d266936A38d3D5B0CC5\",\n    \"USDC\": \"0x053Fc65249dF91a02Ddb294A081f774615aB45F4\",\n};\n\n// Add logs to display token addresses for debugging\nelizaLogger.debug(\"TESTNET TOKEN ADDRESSES:\", TESTNET_TOKEN_ADDRESSES);\n\nexport class GetBalanceTestnetAction {\n    constructor(private walletProvider: WalletProvider) {\n        // Log that the action is being initialized\n        elizaLogger.debug(\"GetBalanceTestnetAction initialized with provider:\", \n            { providerType: walletProvider.constructor.name });\n    }\n\n    // Helper function to clean and validate token address\n    public normalizeTokenAddress(address: string): string | null {\n        // Remove any whitespace and make it lowercase\n        const cleanedAddress = address.trim().toLowerCase();\n        \n        // Check if it's a valid format\n        const isValidFormat = /^0x[0-9a-f]{40}$/i.test(cleanedAddress);\n        if (!isValidFormat) {\n            elizaLogger.error(`Invalid token address format: ${address}`);\n            return null;\n        }\n        \n        return cleanedAddress;\n    }\n\n    // Debug helper to check chain and token information\n    private async debugChainAndToken(chain: SupportedChain, token?: string) {\n        try {\n            // Debug the chain configuration\n            const chainConfig = this.walletProvider.getChainConfigs(chain);\n            elizaLogger.debug(`Chain config for ${chain}:`, {\n                id: chainConfig.id,\n                name: chainConfig.name,\n                nativeCurrency: chainConfig.nativeCurrency,\n                rpcUrls: chainConfig.rpcUrls\n            });\n            \n            // If token is provided, try to get more information about it\n            if (token) {\n                if (token.startsWith(\"0x\") && token.length === 42) {\n                    // If it's an address, try to get token info from the contract\n                    try {\n                        const publicClient = this.walletProvider.getPublicClient(chain);\n                        elizaLogger.debug(`Public client for ${chain}:`, \n                            { clientType: publicClient.constructor.name });\n                        \n                        elizaLogger.debug(`Attempting to read token contract at ${token}`);\n                        const decimals = await publicClient.readContract({\n                            address: token as `0x${string}`,\n                            abi: erc20Abi,\n                            functionName: \"decimals\",\n                        }).catch(e => {\n                            elizaLogger.debug(`Failed to get decimals for token ${token}:`, e.message);\n                            return null;\n                        });\n                        \n                        const symbol = await publicClient.readContract({\n                            address: token as `0x${string}`,\n                            abi: erc20Abi,\n                            functionName: \"symbol\",\n                        }).catch(e => {\n                            elizaLogger.debug(`Failed to get symbol for token ${token}:`, e.message);\n                            return null;\n                        });\n                        \n                        elizaLogger.debug(`Token information for ${token}:`, {\n                            symbol,\n                            decimals\n                        });\n                    } catch (error) {\n                        elizaLogger.error(`Error getting token info:`, error.message, error.stack);\n                    }\n                } else {\n                    // If it's a symbol, check our mapping\n                    const upperToken = token.toUpperCase();\n                    const mappedAddress = TESTNET_TOKEN_ADDRESSES[upperToken];\n                    elizaLogger.debug(`Token symbol ${token} maps to address:`, mappedAddress || \"Not found in mapping\");\n                    \n                    if (!mappedAddress) {\n                        elizaLogger.error(`Token ${token} not found in mapping. Available tokens:`, \n                            Object.keys(TESTNET_TOKEN_ADDRESSES));\n                    }\n                }\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in debugChainAndToken:\", error.message, error.stack);\n        }\n    }\n\n    // Debug helper to directly check balance via BSCScan API\n    private async checkBalanceViaBscScan(address: string): Promise<string | null> {\n        try {\n            elizaLogger.debug(`Checking balance via BSCScan API for address: ${address}`);\n            \n            // This is just for debugging - in production you would use an API key\n            const url = `https://api-testnet.bscscan.com/api?module=account&action=balance&address=${address}&tag=latest`;\n            \n            elizaLogger.debug(`Fetching from URL: ${url}`);\n            \n            // Make a fetch request to get the balance\n            const response = await fetch(url);\n            const data = await response.json();\n            \n            elizaLogger.debug(`BSCScan API response:`, data);\n            \n            if (data.status === \"1\" && data.message === \"OK\") {\n                const weiBalance = data.result;\n                const ethBalance = formatEther(BigInt(weiBalance));\n                elizaLogger.debug(`BSCScan reports balance: ${ethBalance} BNB`);\n                return ethBalance;\n            } else {\n                elizaLogger.error(`BSCScan API error: ${data.message}`);\n                return null;\n            }\n        } catch (error) {\n            elizaLogger.error(`Error checking BSCScan balance: ${error.message}`);\n            return null;\n        }\n    }\n\n    async getBalance(params: GetBalanceParams): Promise<GetBalanceResponse> {\n        elizaLogger.debug(\"Get testnet balance params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized get testnet balance params:\", params);\n\n        // Force chain to be bscTestnet\n        params.chain = \"bscTestnet\";\n        \n        // Debug chain and token information to help troubleshoot\n        await this.debugChainAndToken(\"bscTestnet\", params.token);\n        \n        const { chain, address, token } = params;\n        if (!address) {\n            elizaLogger.error(\"Address is required but was not provided\");\n            throw new Error(\"Address is required for getting balance\");\n        }\n\n        elizaLogger.debug(`Switching to chain: ${chain}`);\n        this.walletProvider.switchChain(chain);\n        const nativeSymbol =\n            this.walletProvider.getChainConfigs(chain).nativeCurrency.symbol;\n        elizaLogger.debug(`Native symbol for chain ${chain}: ${nativeSymbol}`);\n\n        let queryNativeToken = false;\n        if (\n            !token ||\n            token === \"\" ||\n            token.toLowerCase() === \"bnb\" ||\n            token.toLowerCase() === \"tbnb\"\n        ) {\n            elizaLogger.debug(`Will query native token (${nativeSymbol}) balance`);\n            queryNativeToken = true;\n        }\n\n        const resp: GetBalanceResponse = {\n            chain,\n            address,\n        };\n\n        // If ERC20 token is requested\n        if (!queryNativeToken) {\n            let tokenAddress: string;\n\n            // Check if token is already an address\n            if (isAddress(token)) {\n                elizaLogger.debug(`Token is already an address: ${token}`);\n                const normalizedAddress = this.normalizeTokenAddress(token);\n                if (!normalizedAddress) {\n                    throw new Error(`Invalid token address format: ${token}. Please provide a valid token address or symbol.`);\n                }\n                tokenAddress = normalizedAddress;\n            } else {\n                // Look up token in our testnet mapping\n                const upperToken = token.toUpperCase();\n                elizaLogger.debug(`Looking up token symbol in testnet mapping: ${upperToken}`);\n                \n                // Use the new wallet provider method for testnet token resolution\n                const mappedAddress = this.walletProvider.getTestnetTokenAddress(upperToken);\n                \n                if (!mappedAddress) {\n                    elizaLogger.error(`Token ${token} not found in testnet mapping`);\n                    throw new Error(`Token ${token} is not supported on BSC testnet. Supported tokens: ${SUPPORTED_TESTNET_TOKENS.join(', ')}`);\n                }\n                \n                tokenAddress = mappedAddress;\n                elizaLogger.debug(`Resolved token symbol ${token} to address: ${tokenAddress}`);\n            }\n\n            elizaLogger.debug(`Getting ERC20 balance for address ${address} and token ${tokenAddress}`);\n            try {\n                const amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    tokenAddress as `0x${string}`\n                );\n                elizaLogger.debug(`ERC20 balance result: ${amount} ${token}`);\n                resp.balance = { token, amount };\n            } catch (error) {\n                elizaLogger.error(`Error getting ERC20 balance: ${error.message}`, error.stack);\n                throw error;\n            }\n        } else {\n            // If native token is requested\n            elizaLogger.debug(`Getting native token balance for address ${address}`);\n            try {\n                const publicClient = this.walletProvider.getPublicClient(chain);\n                \n                // Log more details about the public client and RPC URL\n                const chainConfig = this.walletProvider.getChainConfigs(chain);\n                elizaLogger.debug(`Using RPC URL for chain ${chain}:`, {\n                    defaultRpc: chainConfig.rpcUrls.default.http[0],\n                    customRpc: chainConfig.rpcUrls.custom?.http[0],\n                    usingCustom: !!chainConfig.rpcUrls.custom\n                });\n                \n                // Check if we're connected to the correct chain\n                const chainId = await publicClient.getChainId().catch(e => {\n                    elizaLogger.error(`Failed to get chain ID: ${e.message}`);\n                    return null;\n                });\n                elizaLogger.debug(`Connected to chain ID: ${chainId}, expected: ${chainConfig.id}`);\n                \n                elizaLogger.debug(`Requesting balance for address: ${address}`);\n                const nativeBalanceWei = await publicClient.getBalance({ address });\n                elizaLogger.debug(`Raw balance result (Wei): ${nativeBalanceWei.toString()}`);\n                \n                const formattedBalance = formatEther(nativeBalanceWei);\n                elizaLogger.debug(`Formatted balance: ${formattedBalance} ${nativeSymbol}`);\n                \n                // If balance is 0, double-check with BSCScan API\n                if (nativeBalanceWei === 0n) {\n                    elizaLogger.debug(`Balance is 0, double-checking with BSCScan API`);\n                    const bscScanBalance = await this.checkBalanceViaBscScan(address);\n                    \n                    if (bscScanBalance && parseFloat(bscScanBalance) > 0) {\n                        elizaLogger.debug(`BSCScan reports non-zero balance: ${bscScanBalance} BNB`);\n                        resp.balance = {\n                            token: nativeSymbol,\n                            amount: bscScanBalance,\n                        };\n                        return resp;\n                    }\n                }\n                \n                resp.balance = {\n                    token: nativeSymbol,\n                    amount: formattedBalance,\n                };\n            } catch (error) {\n                elizaLogger.error(`Error getting native balance: ${error.message}`, error.stack);\n                \n                // Try fallback to BSCScan\n                elizaLogger.debug(`Trying BSCScan API as fallback`);\n                const bscScanBalance = await this.checkBalanceViaBscScan(address);\n                \n                if (bscScanBalance) {\n                    elizaLogger.debug(`BSCScan reports balance: ${bscScanBalance} BNB`);\n                    resp.balance = {\n                        token: nativeSymbol,\n                        amount: bscScanBalance,\n                    };\n                    return resp;\n                }\n                \n                throw error;\n            }\n        }\n\n        elizaLogger.debug(`Get balance response:`, resp);\n        return resp;\n    }\n\n    async getERC20TokenBalance(\n        chain: SupportedChain,\n        address: Address,\n        tokenAddress: Address\n    ): Promise<string> {\n        try {\n            elizaLogger.debug(`Getting ERC20 token balance for address ${address} and token ${tokenAddress} on chain ${chain}`);\n            const publicClient = this.walletProvider.getPublicClient(chain);\n            elizaLogger.debug(`Public client for chain ${chain}:`, {\n                clientType: publicClient.constructor.name\n            });\n            \n            elizaLogger.debug(`Reading balanceOf for token ${tokenAddress}`);\n            \n            // Wrap contract calls in try/catch to handle contract reverts gracefully\n            let balance: bigint;\n            try {\n                balance = await publicClient.readContract({\n                    address: tokenAddress,\n                    abi: erc20Abi,\n                    functionName: \"balanceOf\",\n                    args: [address],\n                });\n            } catch (e) {\n                elizaLogger.error(`Contract call to balanceOf failed: ${e.message}`);\n                elizaLogger.debug(`Contract error details:`, e);\n                // If the balanceOf call fails, the contract might not be valid\n                // or the token might not exist on testnet\n                elizaLogger.warn(`Token ${tokenAddress} might not exist on BSC testnet or isn't a valid ERC20 token`);\n                return \"0\";\n            }\n            \n            elizaLogger.debug(`Raw balance result: ${balance.toString()}`);\n\n            // Wrap decimals call in try/catch as well\n            let decimals: number;\n            try {\n                decimals = await publicClient.readContract({\n                    address: tokenAddress,\n                    abi: erc20Abi,\n                    functionName: \"decimals\",\n                });\n            } catch (e) {\n                elizaLogger.error(`Contract call to decimals failed: ${e.message}`);\n                // Default to 18 decimals if the call fails\n                elizaLogger.warn(`Defaulting to 18 decimals for token ${tokenAddress}`);\n                decimals = 18;\n            }\n            \n            elizaLogger.debug(`Token decimals: ${decimals}`);\n\n            const formattedBalance = formatUnits(balance, decimals);\n            elizaLogger.debug(`Formatted balance: ${formattedBalance}`);\n            return formattedBalance;\n        } catch (error) {\n            elizaLogger.error(`Error getting ERC20 balance: ${error.message}`, error.stack);\n            // Return \"0\" instead of throwing to provide a better user experience\n            return \"0\";\n        }\n    }\n\n    async validateAndNormalizeParams(params: GetBalanceParams): Promise<void> {\n        try {\n            // Force chain to be bscTestnet\n            params.chain = \"bscTestnet\";\n            \n            // If no address provided, use the wallet's own address\n            if (!params.address) {\n                params.address = this.walletProvider.getAddress();\n                elizaLogger.debug(`No address provided, using wallet address: ${params.address}`);\n                return;\n            }\n            \n            // Convert address to string for string comparisons\n            const addressStr = String(params.address);\n            \n            // If address is null or invalid strings, use wallet address\n            if (addressStr === 'null' || addressStr === 'undefined') {\n                params.address = this.walletProvider.getAddress();\n                elizaLogger.debug(`Invalid address string provided, using wallet address: ${params.address}`);\n                return;\n            }\n            \n            // If address already looks like a valid hex address, use it directly\n            if (addressStr.startsWith(\"0x\") && addressStr.length === 42) {\n                elizaLogger.debug(`Using valid hex address: ${params.address}`);\n                return;\n            }\n            \n            // Skip web3 name resolution for common token names that might have been\n            // mistakenly parsed as addresses\n            const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BUSD', 'WBNB', 'CAKE'];\n            if (commonTokens.includes(addressStr.toUpperCase())) {\n                elizaLogger.debug(`Address looks like a token symbol: ${params.address}, using wallet address instead`);\n                params.address = this.walletProvider.getAddress();\n                return;\n            }\n            \n            // SKIP WEB3NAME RESOLUTION ON TESTNET - it doesn't work and causes errors\n            elizaLogger.debug(`Web3Name resolution skipped on testnet for: ${params.address}`);\n            \n            // If it looks like a potential wallet address, try to use it\n            if (addressStr.startsWith(\"0x\")) {\n                elizaLogger.warn(`Address \"${params.address}\" doesn't look like a standard Ethereum address but will be used as is`);\n                return;\n            }\n            \n            // If we get here, we couldn't parse the address at all\n            // Fall back to the wallet's address\n            elizaLogger.warn(`Could not resolve address: ${params.address}, falling back to wallet address`);\n            params.address = this.walletProvider.getAddress();\n        } catch (error) {\n            elizaLogger.error(`Error validating address: ${error.message}`);\n            // Fall back to wallet's own address if there's an error\n            params.address = this.walletProvider.getAddress();\n        }\n    }\n}\n\n// Direct export of the action for use in the main plugin\nexport const getBalanceTestnetAction = {\n    name: \"getBalanceTestnet\",\n    description: \"Get testnet balance of a token on BSC for the given address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting getBalanceTestnet action...\");\n        \n        // Verify that the testnet configuration is correct\n        try {\n            const config = await validateBnbConfig(runtime);\n            elizaLogger.debug(\"BNB config:\", {\n                hasPrivateKey: !!config.BNB_PRIVATE_KEY,\n                hasPublicKey: !!config.BNB_PUBLIC_KEY,\n                bscTestnetUrl: config.BSC_TESTNET_PROVIDER_URL\n            });\n            \n            // Log the RPC URL to make sure we're using the right one\n            elizaLogger.debug(`Using BSC Testnet RPC URL: ${config.BSC_TESTNET_PROVIDER_URL}`);\n            \n            // Override the default RPC URL with a known working one if needed\n            if (config.BSC_TESTNET_PROVIDER_URL === \"https://data-seed-prebsc-2-s3.bnbchain.org:8545\") {\n                elizaLogger.debug(\"Using default RPC URL. Consider using a more reliable one like https://data-seed-prebsc-2-s3.bnbchain.org:8545/\");\n            }\n        } catch (error) {\n            elizaLogger.error(\"Failed to validate BNB config:\", error.message);\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        \n        try {\n            state.walletInfo = await bnbWalletProvider.get(\n                runtime,\n                message,\n                currentState\n            );\n            elizaLogger.debug(\"Wallet info:\", state.walletInfo);\n        } catch (error) {\n            elizaLogger.error(\"Error getting wallet info:\", error.message, error.stack);\n        }\n\n        // Compose context\n        const getBalanceContext = composeContext({\n            state: currentState,\n            template: getBalanceTemplate,\n        });\n        \n        elizaLogger.debug(\"Generating content from template...\");\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: getBalanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n        elizaLogger.debug(\"Generated content:\", content);\n\n        try {\n            elizaLogger.debug(\"Initializing wallet provider...\");\n            const walletProvider = initWalletProvider(runtime);\n            const action = new GetBalanceTestnetAction(walletProvider);\n            \n            // Check if a token address was provided directly\n            let tokenInput = content.token;\n            const originalToken = tokenInput; // Store the original token input\n            \n            elizaLogger.debug(`Original token input: ${originalToken}`);\n            \n            // Special handling for token string\n            if (tokenInput) {\n                tokenInput = tokenInput.trim();\n                \n                // Check if it looks like a direct token address\n                if (tokenInput.startsWith(\"0x\")) {\n                    // Try to clean and normalize it\n                    const normalizedAddress = action.normalizeTokenAddress(tokenInput);\n                    if (normalizedAddress) {\n                        elizaLogger.debug(`Using normalized token address: ${normalizedAddress}`);\n                        tokenInput = normalizedAddress;\n                    } else {\n                        // If invalid format but starts with 0x, try finding it in our mapping first\n                        const upperToken = tokenInput.replace(/^0x/i, \"\").toUpperCase();\n                        // Use the new wallet provider method for testnet token resolution\n                        const mappedAddress = walletProvider.getTestnetTokenAddress(upperToken);\n                        if (mappedAddress) {\n                            elizaLogger.debug(`Found token symbol in mapping despite 0x prefix: ${upperToken}`);\n                            tokenInput = mappedAddress;\n                        } else {\n                            // It's truly an invalid address\n                            if (callback) {\n                                callback({\n                                    text: `The token address \"${tokenInput}\" appears to be invalid. Please provide a valid token address or use one of the supported token symbols: ${SUPPORTED_TESTNET_TOKENS.join(', ')}`,\n                                    content: {\n                                        error: `Invalid token address: ${tokenInput}`,\n                                        chain: \"bscTestnet\",\n                                        supportedTokens: SUPPORTED_TESTNET_TOKENS\n                                    },\n                                });\n                            }\n                            return false;\n                        }\n                    }\n                } else {\n                    // It's a symbol, convert to uppercase and look in our mapping\n                    const upperToken = tokenInput.toUpperCase();\n                    elizaLogger.debug(`Looking up token symbol: ${upperToken}`);\n                    \n                    // Use the new wallet provider method for testnet token resolution\n                    const mappedAddress = walletProvider.getTestnetTokenAddress(upperToken);\n                    \n                    if (mappedAddress) {\n                        elizaLogger.debug(`Mapped token symbol ${tokenInput} to address: ${mappedAddress}`);\n                        tokenInput = mappedAddress;\n                    } else {\n                        // It's unlikely that lifi sdk will have testnet tokens,\n                        // so we'll just skip this fallback and show the user-friendly error\n                        elizaLogger.error(`Token ${tokenInput} not found in mapping`);\n                        if (callback) {\n                            callback({\n                                text: `Token \"${tokenInput}\" is not supported on BSC testnet. Supported tokens: ${SUPPORTED_TESTNET_TOKENS.join(', ')}`,\n                                content: {\n                                    error: `Unsupported token: ${tokenInput}`,\n                                    chain: \"bscTestnet\",\n                                    supportedTokens: SUPPORTED_TESTNET_TOKENS\n                                },\n                            });\n                        }\n                        return false;\n                    }\n                }\n            } else {\n                elizaLogger.debug(\"No token specified, will use native token (BNB)\");\n            }\n            \n            const getBalanceOptions: GetBalanceParams = {\n                chain: \"bscTestnet\", // Force use of testnet\n                address: content.address,\n                token: tokenInput,\n            };\n            elizaLogger.debug(\"Balance options:\", getBalanceOptions);\n            \n            try {\n                elizaLogger.debug(`Attempting to get balance for token: ${getBalanceOptions.token}`);\n                \n                // Ensure we're using a valid token format\n                // If the token starts with 0x and is 42 characters, it's likely a direct address\n                // and should be used as-is\n                if (typeof getBalanceOptions.token === 'string' && \n                    getBalanceOptions.token.startsWith('0x') && \n                    getBalanceOptions.token.length === 42) {\n                    elizaLogger.debug(`Using direct token address: ${getBalanceOptions.token}`);\n                    // The token value is already set correctly\n                } else {\n                    // For token symbols, we've already converted them to addresses in the previous steps\n                    elizaLogger.debug(`Using previously mapped token address: ${getBalanceOptions.token}`);\n                }\n                \n                const getBalanceResp = await action.getBalance(getBalanceOptions);\n                elizaLogger.debug(\"Balance response:\", getBalanceResp);\n                \n                if (callback) {\n                    let text = `No balance found for ${getBalanceOptions.address} on BSC Testnet`;\n                    if (getBalanceResp.balance) {\n                        // Use the original token symbol/address in the user response for clarity\n                        const displayToken = originalToken ? originalToken.toUpperCase() : \"BNB\";\n                        text = `Balance of ${getBalanceResp.address} on BSC Testnet:\\n${\n                            displayToken\n                        }: ${getBalanceResp.balance.amount}`;\n                    }\n                    elizaLogger.debug(\"Callback response text:\", text);\n                    callback({\n                        text,\n                        content: { ...getBalanceResp },\n                    });\n                }\n                return true;\n            } catch (error) {\n                elizaLogger.error(\"Error during get testnet balance:\", error.message, error.stack);\n                \n                // Provide more user-friendly error messages based on error type\n                let userMessage = `Error checking testnet balance on BSC Testnet: ${error.message}`;\n                \n                // Check for common error cases\n                if (error.message.includes(\"getTldInfo\") || error.message.includes(\"Only BSC mainnet supports looking up tokens\")) {\n                    userMessage = `Could not find token \"${originalToken || getBalanceOptions.token}\" on BSC Testnet. Supported tokens: ${SUPPORTED_TESTNET_TOKENS.join(', ')}`;\n                } else if (error.message.includes(\"No URL was provided\")) {\n                    userMessage = \"Network connection issue. Please check your BSC_TESTNET_PROVIDER_URL configuration.\";\n                } else if (error.message.includes(\"Invalid address\")) {\n                    userMessage = \"The address provided is invalid. Please provide a valid wallet address.\";\n                } else if (error.message.includes(\"not supported on BSC testnet\")) {\n                    userMessage = error.message;\n                } else if (error.message.includes(\"Contract 0x\")) {\n                    userMessage = \"Contract error. The token contract at the given address may not be valid on BSC testnet.\";\n                } else if (originalToken && originalToken.startsWith(\"0x\")) {\n                    // Special case for direct token addresses that failed\n                    userMessage = `The token address \"${originalToken}\" could not be queried on BSC Testnet. Please check that it's a valid token contract address.`;\n                }\n                \n                elizaLogger.debug(\"Error user message:\", userMessage);\n                callback?.({\n                    text: userMessage,\n                    content: { \n                        error: error.message,\n                        chain: \"bscTestnet\",\n                        token: originalToken || getBalanceOptions.token,\n                        supportedTokens: SUPPORTED_TESTNET_TOKENS\n                    },\n                });\n                return false;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Critical error in getBalanceTestnet handler:\", error.message, error.stack);\n            callback?.({\n                text: `A critical error occurred while checking testnet balance: ${error.message}`,\n                content: { \n                    error: error.message,\n                    chain: \"bscTestnet\"\n                }\n            });\n            return false;\n        }\n    },\n    template: getBalanceTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my testnet balance of BNB\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of BNB on BSC Testnet\",\n                    action: \"GET_BALANCE_TESTNET\",\n                    content: {\n                        chain: \"bscTestnet\",\n                        address: \"{{walletAddress}}\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my BNB balance on testnet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your BNB balance on BSC Testnet\",\n                    action: \"GET_BALANCE_TESTNET\",\n                    content: {\n                        chain: \"bscTestnet\",\n                        address: \"{{walletAddress}}\",\n                        token: \"BNB\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"GET_BALANCE_TESTNET\", \"CHECK_TESTNET_BALANCE\"],\n};\n","export * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\n// export * from \"./actions/getBalance\";\nexport * from \"./actions/bridge\";\n// export * from \"./actions/faucet\";\nexport * from \"./actions/deploy\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\nexport * from \"./environment\";\nexport * from \"./actions/getBalanceTestnet\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport ora from 'ora';\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { bnbWalletProvider } from \"./providers/wallet\";\nimport { getBalanceAction } from \"./actions/getBalance\";\nimport { bridgeAction } from \"./actions/bridge\";\nimport { stakeAction } from \"./actions/stake\";\nimport { faucetAction } from \"./actions/faucet\";\nimport { deployAction } from \"./actions/deploy\";\nimport { getConfig } from \"./environment\";\nimport { greenfieldAction } from \"./actions/gnfd\";\n\n// Start the loader\nconst spinner = ora({\n    text: chalk.cyan('Initializing BNB Plugin...'),\n    spinner: 'dots12',\n    color: 'cyan'\n}).start();\n\nconst actions = [\n    getBalanceAction,\n    transferAction,\n    swapAction,\n    bridgeAction,\n    stakeAction,\n    faucetAction,\n    deployAction,\n  greenfieldAction\n];\n\nconst BNB_SPLASH = true;\n\n// Initial banner\n// Only show splash screen if BNB_SPLASH is true\nif (BNB_SPLASH) {\n    // Initial banner with chalk styling\n    console.log(`\\n${chalk.cyan('┌────────────────────────────────────────┐')}`);\n    console.log(chalk.cyan('│') + chalk.yellow.bold('          BNB PLUGIN             ') + chalk.cyan(' │'));\n    console.log(chalk.cyan('├────────────────────────────────────────┤'));\n    console.log(chalk.cyan('│') + chalk.white('  Initializing BNB Services...    ') + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\n    console.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n    // Display configuration status\n    const config = getConfig();\n    const bscProvider = config.BSC_PROVIDER_URL ? chalk.green('✓') : chalk.red('✗');\n    const bscTestnetProvider = config.BSC_TESTNET_PROVIDER_URL ? chalk.green('✓') : chalk.red('✗');\n    const opbnbProvider = config.OPBNB_PROVIDER_URL ? chalk.green('✓') : chalk.red('✗');\n    const wallet = config.BNB_PRIVATE_KEY || config.BNB_PUBLIC_KEY ? chalk.green('✓') : chalk.yellow('?');\n    \n    console.log(`\\n${chalk.cyan('┌────────────────────────────────────────┐')}`);\n    console.log(chalk.cyan('│') + chalk.white(' Configuration Status                 ') + chalk.cyan('│'));\n    console.log(chalk.cyan('├────────────────────────────────────────┤'));\n    console.log(chalk.cyan('│') + chalk.white(` BSC Provider    : ${bscProvider}                    `) + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white(` BSC Testnet     : ${bscTestnetProvider}                    `) + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white(` OPBNB Provider  : ${opbnbProvider}                    `) + chalk.cyan('│'));\n    console.log(chalk.cyan('│') + chalk.white(` Wallet          : ${wallet}                    `) + chalk.cyan('│'));\n    console.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n    // Stop the loader\n    spinner.succeed(chalk.green('BNB Plugin initialized successfully!'));\n\n    // Create a beautiful table for actions\n    const actionTable = new Table({\n      head: [\n        chalk.cyan('Action'),\n        chalk.cyan('H'),\n        chalk.cyan('V'),\n        chalk.cyan('E'),\n        chalk.cyan('Similes')\n      ],\n      style: {\n        head: [],\n        border: ['cyan']\n      }\n    });\n\n    // Format and add action information\n    for (const action of actions) {\n        actionTable.push([\n            chalk.white(action.name),\n            typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\n            action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\n            chalk.gray(action.similes?.join(', ') || 'none')\n        ]);\n    }\n\n    // Display the action table\n    console.log(`\\n${actionTable.toString()}`);\n\n    // Plugin status with a nice table\n    const statusTable = new Table({\n      style: {\n        border: ['cyan']\n      }\n    });\n\n    statusTable.push(\n      [chalk.cyan('Plugin Status')],\n      [chalk.white('Name    : ') + chalk.yellow('plugin-bnb')],\n      [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\n      [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\n    );\n\n    console.log(`\\n${statusTable.toString()}\\n`);\n} else {\n    // Stop the loader silently if splash is disabled\n    spinner.stop();\n}\n\n// Create plugin object directly matching the Binance plugin pattern\nexport const bnbPlugin: Plugin = {\n    name: \"bnb\",\n    description: \"BNB Smart Chain (BSC) and opBNB integration plugin supporting transfers, swaps, staking, bridging, and token deployments\",\n    providers: [bnbWalletProvider],\n    services: [],\n    actions: actions,\n    evaluators: []\n};\n\nexport default bnbPlugin;\n\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { getToken } from \"@lifi/sdk\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { getBalanceTemplate } from \"../templates\";\nimport type {\n    GetBalanceParams,\n    GetBalanceResponse,\n    SupportedChain,\n} from \"../types\";\nimport { type Address, erc20Abi, formatEther, formatUnits } from \"viem\";\n\nexport { getBalanceTemplate };\n\nexport class GetBalanceAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async getBalance(params: GetBalanceParams): Promise<GetBalanceResponse> {\n        elizaLogger.debug(\"Get balance params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized get balance params:\", params);\n\n        const { chain, address, token } = params;\n        if (!address) {\n            throw new Error(\"Address is required for getting balance\");\n        }\n\n        this.walletProvider.switchChain(chain);\n        const nativeSymbol =\n            this.walletProvider.getChainConfigs(chain).nativeCurrency.symbol;\n        const chainId = this.walletProvider.getChainConfigs(chain).id;\n\n        let queryNativeToken = false;\n        if (\n            !token ||\n            token === \"\" ||\n            token.toLowerCase() === \"bnb\" ||\n            token.toLowerCase() === \"tbnb\"\n        ) {\n            queryNativeToken = true;\n        }\n\n        const resp: GetBalanceResponse = {\n            chain,\n            address,\n        };\n\n        // If ERC20 token is requested\n        if (!queryNativeToken) {\n            let amount: string;\n            if (token.startsWith(\"0x\")) {\n                amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    token as `0x${string}`\n                );\n            } else {\n                if (chainId !== 56) {\n                    throw new Error(\n                        \"Only BSC mainnet is supported for querying balance by token symbol\"\n                    );\n                }\n\n                this.walletProvider.configureLiFiSdk(chain);\n                const tokenInfo = await getToken(chainId, token);\n                amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    tokenInfo.address as `0x${string}`\n                );\n            }\n\n            resp.balance = { token, amount };\n        } else {\n            // If native token is requested\n            const nativeBalanceWei = await this.walletProvider\n                .getPublicClient(chain)\n                .getBalance({ address });\n            resp.balance = {\n                token: nativeSymbol,\n                amount: formatEther(nativeBalanceWei),\n            };\n        }\n\n        return resp;\n    }\n\n    async getERC20TokenBalance(\n        chain: SupportedChain,\n        address: Address,\n        tokenAddress: Address\n    ): Promise<string> {\n        const publicClient = this.walletProvider.getPublicClient(chain);\n\n        const balance = await publicClient.readContract({\n            address: tokenAddress,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [address],\n        });\n\n        const decimals = await publicClient.readContract({\n            address: tokenAddress,\n            abi: erc20Abi,\n            functionName: \"decimals\",\n        });\n\n        return formatUnits(balance, decimals);\n    }\n\n    async validateAndNormalizeParams(params: GetBalanceParams): Promise<void> {\n        try {\n            // If no chain specified, default to BSC\n            if (!params.chain) {\n                params.chain = \"bsc\";\n            }\n            \n            // If no address provided, use the wallet's own address\n            if (!params.address) {\n                params.address = this.walletProvider.getAddress();\n                elizaLogger.debug(`No address provided, using wallet address: ${params.address}`);\n                return;\n            }\n            \n            // Convert address to string for string comparisons\n            const addressStr = String(params.address);\n            \n            // If address is null or invalid strings, use wallet address\n            if (addressStr === 'null' || addressStr === 'undefined') {\n                params.address = this.walletProvider.getAddress();\n                elizaLogger.debug(`Invalid address string provided, using wallet address: ${params.address}`);\n                return;\n            }\n            \n            // If address already looks like a valid hex address, use it directly\n            if (addressStr.startsWith(\"0x\") && addressStr.length === 42) {\n                elizaLogger.debug(`Using valid hex address: ${params.address}`);\n                return;\n            }\n            \n            // Skip web3 name resolution for common token names that might have been\n            // mistakenly parsed as addresses\n            const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BUSD', 'WBNB', 'CAKE'];\n            if (commonTokens.includes(addressStr.toUpperCase())) {\n                elizaLogger.debug(`Address looks like a token symbol: ${params.address}, using wallet address instead`);\n                params.address = this.walletProvider.getAddress();\n                return;\n            }\n            \n            // Try to resolve as web3 name\n            elizaLogger.debug(`Attempting to resolve address as Web3Name: ${params.address}`);\n            const resolvedAddress = await this.walletProvider.resolveWeb3Name(params.address);\n            if (resolvedAddress) {\n                elizaLogger.debug(`Resolved Web3Name to address: ${resolvedAddress}`);\n                params.address = resolvedAddress as Address;\n                return;\n            }\n            \n            // If we can't resolve, but it looks like a potential wallet address, try to use it\n            if (addressStr.startsWith(\"0x\")) {\n                elizaLogger.warn(`Address \"${params.address}\" doesn't look like a standard Ethereum address but will be used as is`);\n                return;\n            }\n            \n            // If we get here, we couldn't parse the address at all\n            // Fall back to the wallet's address\n            elizaLogger.warn(`Could not resolve address: ${params.address}, falling back to wallet address`);\n            params.address = this.walletProvider.getAddress();\n        } catch (error) {\n            elizaLogger.error(`Error validating address: ${error.message}`);\n            // Fall back to wallet's own address if there's an error\n            params.address = this.walletProvider.getAddress();\n        }\n    }\n}\n\n// Direct export of the action for use in the main plugin\nexport const getBalanceAction = {\n    name: \"getBalance\",\n    description: \"Get balance of a token or all tokens for the given address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting getBalance action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose swap context\n        const getBalanceContext = composeContext({\n            state: currentState,\n            template: getBalanceTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: getBalanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new GetBalanceAction(walletProvider);\n        const getBalanceOptions: GetBalanceParams = {\n            chain: content.chain,\n            address: content.address,\n            token: content.token,\n        };\n        try {\n            const getBalanceResp = await action.getBalance(getBalanceOptions);\n            if (callback) {\n                let text = `No balance found for ${getBalanceOptions.address} on ${getBalanceOptions.chain}`;\n                if (getBalanceResp.balance) {\n                    text = `Balance of ${getBalanceResp.address} on ${getBalanceResp.chain}:\\n${\n                        getBalanceResp.balance.token\n                    }: ${getBalanceResp.balance.amount}`;\n                }\n                callback({\n                    text,\n                    content: { ...getBalanceResp },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during get balance:\", error);\n            \n            // Provide more user-friendly error messages based on error type\n            let userMessage = `Get balance failed: ${error.message}`;\n            \n            // Check for common error cases\n            if (error.message.includes(\"getTldInfo\")) {\n                userMessage = `Could not find token \"${getBalanceOptions.token}\" on ${getBalanceOptions.chain}. Please check the token symbol or address.`;\n            } else if (error.message.includes(\"No URL was provided\")) {\n                userMessage = `Network connection issue. Please try again later.`;\n            } else if (error.message.includes(\"Only BSC mainnet is supported\")) {\n                userMessage = `Only BSC mainnet supports looking up tokens by symbol. Please try using a token address instead.`;\n            } else if (error.message.includes(\"Invalid address\")) {\n                userMessage = `The address provided is invalid. Please provide a valid wallet address.`;\n            } else if (error.message.includes(\"Cannot read properties\")) {\n                userMessage = `There was an issue processing your request. Please check your inputs and try again.`;\n            }\n            \n            callback?.({\n                text: userMessage,\n                content: { \n                    error: error.message,\n                    chain: getBalanceOptions.chain,\n                    token: getBalanceOptions.token\n                },\n            });\n            return false;\n        }\n    },\n    template: getBalanceTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of USDT\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of USDC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"{{walletAddress}}\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of token 0x1234\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of token 0x1234\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"{{walletAddress}}\",\n                        token: \"0x1234\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get USDC balance of 0x1234\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check USDC balance of 0x1234\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"0x1234\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my wallet balance on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your wallet balance on BSC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"{{walletAddress}}\",\n                        token: undefined,\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"GET_BALANCE\", \"CHECK_BALANCE\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { type Address, formatEther, parseEther, erc20Abi } from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { stakeTemplate } from \"../templates\";\nimport { ListaDaoAbi, type StakeParams, type StakeResponse } from \"../types\";\n\nexport { stakeTemplate };\n\n// Exported for tests\nexport class StakeAction {\n    private readonly LISTA_DAO =\n        \"0x1adB950d8bB3dA4bE104211D5AB038628e477fE6\" as const;\n    private readonly SLIS_BNB =\n        \"0xB0b84D294e0C75A6abe60171b70edEb2EFd14A1B\" as const;\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async stake(params: StakeParams): Promise<StakeResponse> {\n        elizaLogger.debug(\"Starting stake action with params:\", JSON.stringify(params, null, 2));\n        \n        // Validate parameters\n        this.validateStakeParams(params);\n        elizaLogger.debug(\"After validation, stake params:\", JSON.stringify(params, null, 2));\n\n        // Switch to BSC chain (only supported chain for staking)\n        elizaLogger.debug(\"Switching to BSC chain for staking\");\n        this.walletProvider.switchChain(\"bsc\");\n\n        // Log contracts being used\n        elizaLogger.debug(`Using Lista DAO contract: ${this.LISTA_DAO}`);\n        elizaLogger.debug(`Using slisBNB token contract: ${this.SLIS_BNB}`);\n        \n        // Get wallet address\n        const walletAddress = this.walletProvider.getAddress();\n        elizaLogger.debug(`Wallet address: ${walletAddress}`);\n\n        // Execute the requested action\n        elizaLogger.debug(`Executing stake action: ${params.action}`);\n        const actions = {\n            deposit: async () => {\n                if (!params.amount) {\n                    throw new Error(\"Amount is required for deposit\");\n                }\n                elizaLogger.debug(`Depositing ${params.amount} BNB to Lista DAO`);\n                return await this.doDeposit(params.amount);\n            },\n            withdraw: async () => {\n                elizaLogger.debug(`Withdrawing ${params.amount || 'all'} slisBNB from Lista DAO`);\n                return await this.doWithdraw(params.amount);\n            },\n            claim: async () => {\n                elizaLogger.debug(`Claiming unlocked BNB from Lista DAO`);\n                return await this.doClaim();\n            },\n        };\n        \n        try {\n            const resp = await actions[params.action]();\n            elizaLogger.debug(`Stake action completed successfully: ${resp}`);\n            return { response: resp };\n        } catch (error) {\n            elizaLogger.error(`Error executing stake action ${params.action}:`, error);\n            throw error;\n        }\n    }\n\n    validateStakeParams(params: StakeParams) {\n        elizaLogger.debug(`Validating stake params: chain=${params.chain}, action=${params.action}, amount=${params.amount}`);\n        \n        // Validate chain\n        if (!params.chain) {\n            elizaLogger.debug(\"No chain specified, defaulting to bsc\");\n            params.chain = \"bsc\";\n        } else if (params.chain !== \"bsc\") {\n            elizaLogger.error(`Unsupported chain for staking: ${params.chain}`);\n            throw new Error(\"Only BSC mainnet is supported for staking\");\n        }\n\n        // Validate action\n        if (!params.action) {\n            elizaLogger.error(\"No action specified for staking\");\n            throw new Error(\"Action is required for staking. Use 'deposit', 'withdraw', or 'claim'\");\n        }\n        \n        const validActions = [\"deposit\", \"withdraw\", \"claim\"];\n        if (!validActions.includes(params.action)) {\n            elizaLogger.error(`Invalid staking action: ${params.action}`);\n            throw new Error(`Invalid staking action: ${params.action}. Valid actions are: ${validActions.join(\", \")}`);\n        }\n\n        // Validate amount for deposit and withdraw\n        if (params.action === \"deposit\" && !params.amount) {\n            elizaLogger.error(\"Amount is required for deposit\");\n            throw new Error(\"Amount is required for deposit\");\n        }\n\n        if (params.action === \"withdraw\" && !params.amount) {\n            elizaLogger.debug(\"No amount specified for withdraw, will withdraw all slisBNB\");\n        }\n        \n        // Validate amount format if provided\n        if (params.amount) {\n            try {\n                const amountValue = parseFloat(params.amount);\n                if (isNaN(amountValue) || amountValue <= 0) {\n                    elizaLogger.error(`Invalid amount: ${params.amount} (must be a positive number)`);\n                    throw new Error(`Invalid amount: ${params.amount}. Please provide a positive number.`);\n                }\n                elizaLogger.debug(`Amount validation passed: ${params.amount}`);\n            } catch (error) {\n                elizaLogger.error(`Failed to parse amount: ${params.amount}`, error);\n                throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n            }\n        }\n    }\n\n    async doDeposit(amount: string): Promise<string> {\n        elizaLogger.debug(`Starting deposit of ${amount} BNB to Lista DAO`);\n        \n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n        const account = walletClient.account;\n        \n        if (!account) {\n            elizaLogger.error(\"Wallet account not found\");\n            throw new Error(\"Wallet account not found\");\n        }\n        \n        elizaLogger.debug(`Using account address: ${account.address}`);\n        elizaLogger.debug(`Preparing to deposit ${amount} BNB with parseEther value: ${parseEther(amount)}`);\n\n        try {\n            // Simulate contract call before execution to catch any potential errors\n            elizaLogger.debug(`Simulating deposit transaction`);\n            const { request } = await publicClient.simulateContract({\n                account: this.walletProvider.getAccount(),\n                address: this.LISTA_DAO,\n                abi: ListaDaoAbi,\n                functionName: \"deposit\",\n                value: parseEther(amount),\n            });\n            \n            // Execute the deposit transaction\n            elizaLogger.debug(`Executing deposit transaction`);\n            const txHash = await walletClient.writeContract(request);\n            elizaLogger.debug(`Deposit transaction submitted with hash: ${txHash}`);\n            \n            // Wait for transaction confirmation\n            elizaLogger.debug(`Waiting for transaction confirmation`);\n            await publicClient.waitForTransactionReceipt({\n                hash: txHash,\n            });\n            elizaLogger.debug(`Transaction confirmed: ${txHash}`);\n\n            // Check the updated slisBNB balance\n            elizaLogger.debug(`Checking updated slisBNB balance`);\n            const slisBNBBalance = await publicClient.readContract({\n                address: this.SLIS_BNB,\n                abi: erc20Abi,\n                functionName: \"balanceOf\",\n                args: [account.address],\n            });\n            \n            const formattedBalance = formatEther(slisBNBBalance);\n            elizaLogger.debug(`Updated slisBNB balance: ${formattedBalance}`);\n\n            return `Successfully do deposit. ${formattedBalance} slisBNB held. \\nTransaction Hash: ${txHash}`;\n        } catch (error) {\n            elizaLogger.error(`Error during deposit operation:`, error);\n            \n            // Provide more specific error messages\n            if (error.message.includes(\"insufficient funds\")) {\n                throw new Error(`Insufficient funds to deposit ${amount} BNB. Please check your balance.`);\n            } else if (error.message.includes(\"user rejected\")) {\n                throw new Error(\"Transaction rejected by user.\");\n            }\n            \n            // Re-throw the original error if no specific handling\n            throw error;\n        }\n    }\n\n    async doWithdraw(amount?: string): Promise<string> {\n        elizaLogger.debug(`Starting withdraw of ${amount || 'all'} slisBNB from Lista DAO`);\n        \n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n        const account = walletClient.account;\n        \n        if (!account) {\n            elizaLogger.error(\"Wallet account not found\");\n            throw new Error(\"Wallet account not found\");\n        }\n        \n        elizaLogger.debug(`Using account address: ${account.address}`);\n\n        try {\n            // If amount is not provided, withdraw all slisBNB\n            let amountToWithdraw: bigint;\n            if (!amount) {\n                elizaLogger.debug(`No amount specified, checking total slisBNB balance`);\n                amountToWithdraw = await publicClient.readContract({\n                    address: this.SLIS_BNB,\n                    abi: erc20Abi,\n                    functionName: \"balanceOf\",\n                    args: [account.address],\n                });\n                elizaLogger.debug(`Total slisBNB balance to withdraw: ${formatEther(amountToWithdraw)}`);\n            } else {\n                amountToWithdraw = parseEther(amount);\n                elizaLogger.debug(`Withdrawing specific amount: ${amount} slisBNB (${amountToWithdraw} wei)`);\n            }\n            \n            // Check if there's anything to withdraw\n            if (amountToWithdraw <= 0n) {\n                elizaLogger.error(`No slisBNB to withdraw (amount: ${formatEther(amountToWithdraw)})`);\n                throw new Error(\"No slisBNB tokens available to withdraw\");\n            }\n\n            // Check slisBNB allowance\n            elizaLogger.debug(`Checking slisBNB allowance for Lista DAO contract`);\n            const allowance = await this.walletProvider.checkERC20Allowance(\n                \"bsc\",\n                this.SLIS_BNB,\n                account.address,\n                this.LISTA_DAO\n            );\n            elizaLogger.debug(`Current allowance: ${formatEther(allowance)}`);\n            \n            if (allowance < amountToWithdraw) {\n                const neededAllowance = amountToWithdraw - allowance;\n                elizaLogger.debug(`Increasing slisBNB allowance by ${formatEther(neededAllowance)}`);\n                \n                const txHash = await this.walletProvider.approveERC20(\n                    \"bsc\",\n                    this.SLIS_BNB,\n                    this.LISTA_DAO,\n                    amountToWithdraw\n                );\n                elizaLogger.debug(`Allowance approval transaction submitted with hash: ${txHash}`);\n                \n                await publicClient.waitForTransactionReceipt({\n                    hash: txHash,\n                });\n                elizaLogger.debug(`Allowance approval transaction confirmed`);\n            } else {\n                elizaLogger.debug(`Sufficient allowance already granted`);\n            }\n\n            // Simulate the withdraw request\n            elizaLogger.debug(`Simulating withdraw request transaction`);\n            const { request } = await publicClient.simulateContract({\n                account: this.walletProvider.getAccount(),\n                address: this.LISTA_DAO,\n                abi: ListaDaoAbi,\n                functionName: \"requestWithdraw\",\n                args: [amountToWithdraw],\n            });\n            \n            // Execute the withdraw request\n            elizaLogger.debug(`Executing withdraw request transaction`);\n            const txHash = await walletClient.writeContract(request);\n            elizaLogger.debug(`Withdraw request transaction submitted with hash: ${txHash}`);\n            \n            // Wait for transaction confirmation\n            elizaLogger.debug(`Waiting for transaction confirmation`);\n            await publicClient.waitForTransactionReceipt({\n                hash: txHash,\n            });\n            elizaLogger.debug(`Transaction confirmed: ${txHash}`);\n\n            // Check remaining slisBNB balance\n            elizaLogger.debug(`Checking remaining slisBNB balance`);\n            const slisBNBBalance = await publicClient.readContract({\n                address: this.SLIS_BNB,\n                abi: erc20Abi,\n                functionName: \"balanceOf\",\n                args: [account.address],\n            });\n            \n            const formattedBalance = formatEther(slisBNBBalance);\n            elizaLogger.debug(`Remaining slisBNB balance: ${formattedBalance}`);\n\n            return `Successfully do withdraw. ${formattedBalance} slisBNB left. \\nTransaction Hash: ${txHash}`;\n        } catch (error) {\n            elizaLogger.error(`Error during withdraw operation:`, error);\n            \n            // Provide more specific error messages\n            if (error.message.includes(\"insufficient funds\") || error.message.includes(\"insufficient balance\")) {\n                throw new Error(`Insufficient slisBNB balance to withdraw. Please check your balance.`);\n            } else if (error.message.includes(\"user rejected\")) {\n                throw new Error(\"Transaction rejected by user.\");\n            }\n            \n            // Re-throw the original error if no specific handling\n            throw error;\n        }\n    }\n\n    async doClaim(): Promise<string> {\n        elizaLogger.debug(`Starting claim operation for unlocked BNB from Lista DAO`);\n        \n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n        const account = walletClient.account;\n        \n        if (!account) {\n            elizaLogger.error(\"Wallet account not found\");\n            throw new Error(\"Wallet account not found\");\n        }\n        \n        elizaLogger.debug(`Using account address: ${account.address}`);\n\n        try {\n            // Get user's withdrawal requests\n            elizaLogger.debug(`Fetching user withdrawal requests`);\n            const requests = await publicClient.readContract({\n                address: this.LISTA_DAO,\n                abi: ListaDaoAbi,\n                functionName: \"getUserWithdrawalRequests\",\n                args: [account.address],\n            });\n            \n            elizaLogger.debug(`Found ${requests.length} withdrawal requests`);\n            \n            if (requests.length === 0) {\n                elizaLogger.warn(`No withdrawal requests found for claiming`);\n                return `No withdrawal requests found to claim. You need to request a withdrawal first using the 'withdraw' action.`;\n            }\n\n            let totalClaimed = 0n;\n            let claimedCount = 0;\n            \n            // Process each withdrawal request\n            for (let idx = 0; idx < requests.length; idx++) {\n                elizaLogger.debug(`Checking request #${idx} status`);\n                const [isClaimable, amount] = await publicClient.readContract({\n                    address: this.LISTA_DAO,\n                    abi: ListaDaoAbi,\n                    functionName: \"getUserRequestStatus\",\n                    args: [account.address, BigInt(idx)],\n                });\n\n                if (isClaimable) {\n                    elizaLogger.debug(`Request #${idx} is claimable, amount: ${formatEther(amount)} BNB`);\n                    \n                    // Simulate the claim transaction\n                    elizaLogger.debug(`Simulating claim transaction for request #${idx}`);\n                    const { request } = await publicClient.simulateContract({\n                        account: this.walletProvider.getAccount(),\n                        address: this.LISTA_DAO,\n                        abi: ListaDaoAbi,\n                        functionName: \"claimWithdraw\",\n                        args: [BigInt(idx)],\n                    });\n\n                    // Execute the claim transaction\n                    elizaLogger.debug(`Executing claim transaction for request #${idx}`);\n                    const txHash = await walletClient.writeContract(request);\n                    elizaLogger.debug(`Claim transaction submitted with hash: ${txHash}`);\n                    \n                    // Wait for transaction confirmation\n                    elizaLogger.debug(`Waiting for transaction confirmation`);\n                    await publicClient.waitForTransactionReceipt({\n                        hash: txHash,\n                    });\n                    elizaLogger.debug(`Transaction confirmed: ${txHash}`);\n\n                    totalClaimed += amount;\n                    claimedCount++;\n                } else {\n                    elizaLogger.debug(`Request #${idx} is not claimable yet, skipping`);\n                    break; // Requests are ordered, so once we hit a non-claimable one, we can stop\n                }\n            }\n\n            const formattedTotal = formatEther(totalClaimed);\n            elizaLogger.debug(`Total claimed: ${formattedTotal} BNB from ${claimedCount} requests`);\n            \n            if (claimedCount === 0) {\n                return `No claimable withdrawals found. Withdrawal requests typically need 7-14 days to become claimable.`;\n            }\n\n            return `Successfully do claim. ${formattedTotal} BNB claimed.`;\n        } catch (error) {\n            elizaLogger.error(`Error during claim operation:`, error);\n            \n            // Provide more specific error messages\n            if (error.message.includes(\"user rejected\")) {\n                throw new Error(\"Transaction rejected by user.\");\n            }\n            \n            // Re-throw the original error if no specific handling\n            throw error;\n        }\n    }\n}\n\nexport const stakeAction = {\n    name: \"stake\",\n    description: \"Stake related actions through Lista DAO\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting stake action...\");\n        elizaLogger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n        // Extract prompt text for stake action analysis\n        const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n        elizaLogger.debug(`Raw prompt text: \"${promptText}\"`);\n        \n        // Analyze prompt to detect stake actions directly\n        const promptLower = promptText.toLowerCase();\n        \n        // Look for stake patterns in the prompt\n        const stakeRegex = /(?:stake|deposit)\\s+([0-9.]+)\\s+(?:bnb|slisBNB)\\s+(?:on|in|to|at)?(?:\\s+lista\\s+dao)?(?:\\s+on)?\\s+(?:bsc|binance)/i;\n        const withdrawRegex = /(?:withdraw|unstake|undelegate)\\s+([0-9.]+)\\s+(?:bnb|slisBNB)\\s+(?:from|on)?\\s+(?:lista\\s+dao)?(?:\\s+on)?\\s+(?:bsc|binance)/i;\n        const claimRegex = /claim\\s+(?:bnb|unlocked\\s+bnb|rewards?)(?:\\s+from)?\\s+(?:lista\\s+dao)?(?:\\s+on)?\\s+(?:bsc|binance)/i;\n        \n        let directAction: string | null = null;\n        let directAmount: string | null = null;\n        \n        // Try to match stake pattern\n        let match = promptText.match(stakeRegex);\n        if (match && match.length >= 2) {\n            directAction = \"deposit\";\n            directAmount = match[1];\n            elizaLogger.debug(`Directly extracted deposit action - Amount: ${directAmount}`);\n        } else {\n            // Try to match withdraw pattern\n            match = promptText.match(withdrawRegex);\n            if (match && match.length >= 2) {\n                directAction = \"withdraw\";\n                directAmount = match[1];\n                elizaLogger.debug(`Directly extracted withdraw action - Amount: ${directAmount}`);\n            } else {\n                // Try to match claim pattern\n                match = promptText.match(claimRegex);\n                if (match) {\n                    directAction = \"claim\";\n                    elizaLogger.debug(`Directly extracted claim action`);\n                }\n            }\n        }\n        \n        // Check for action keywords\n        if (!directAction) {\n            if (promptLower.includes(\"stake\") || promptLower.includes(\"deposit\")) {\n                directAction = \"deposit\";\n                elizaLogger.debug(`Detected stake/deposit action from keywords`);\n            } else if (promptLower.includes(\"withdraw\") || promptLower.includes(\"unstake\") || promptLower.includes(\"undelegate\")) {\n                directAction = \"withdraw\";\n                elizaLogger.debug(`Detected withdraw/unstake action from keywords`);\n            } else if (promptLower.includes(\"claim\")) {\n                directAction = \"claim\";\n                elizaLogger.debug(`Detected claim action from keywords`);\n            }\n        }\n        \n        // Extract numeric values if not already found\n        if (!directAmount && directAction !== \"claim\") {\n            const amountRegex = /([0-9]+(?:\\.[0-9]+)?)/;\n            const amountMatch = promptText.match(amountRegex);\n            if (amountMatch && amountMatch.length >= 2) {\n                directAmount = amountMatch[1];\n                elizaLogger.debug(`Extracted amount from prompt: ${directAmount}`);\n            }\n        }\n        \n        // Store prompt analysis results\n        const promptAnalysis = {\n            directAction,\n            directAmount,\n            containsBNB: promptLower.includes(\"bnb\"),\n            containsListaDAO: promptLower.includes(\"lista\") || promptLower.includes(\"dao\"),\n            containsBSC: promptLower.includes(\"bsc\") || promptLower.includes(\"binance\")\n        };\n        \n        elizaLogger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n        // Validate stake\n        if (!(message.content.source === \"direct\")) {\n            callback?.({\n                text: \"I can't do that for you.\",\n                content: { error: \"Stake not allowed\" },\n            });\n            return false;\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        \n        try {\n            state.walletInfo = await bnbWalletProvider.get(\n                runtime,\n                message,\n                currentState\n            );\n            elizaLogger.debug(\"Wallet info:\", state.walletInfo);\n        } catch (error) {\n            elizaLogger.error(\"Error getting wallet info:\", error.message);\n            callback?.({\n                text: `Unable to access wallet: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n\n        // Compose stake context\n        const stakeContext = composeContext({\n            state: currentState,\n            template: stakeTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: stakeContext,\n            modelClass: ModelClass.LARGE,\n        });\n        \n        elizaLogger.debug(\"Generated stake content:\", JSON.stringify(content, null, 2));\n        \n        // PRIORITY ORDER FOR ACTION DETERMINATION:\n        // 1. Direct match from prompt text (most reliable)\n        // 2. Action specified in model-generated content\n        // 3. Default to deposit\n        \n        let stakeAction: string;\n        let amount: string | undefined;\n        \n        // 1. First priority: Use directly extracted action from prompt if available\n        if (directAction) {\n            stakeAction = directAction;\n            elizaLogger.debug(`Using action directly extracted from prompt: ${stakeAction}`);\n        }\n        // 2. Second priority: Use action from content if available\n        else if (content.action) {\n            stakeAction = content.action;\n            elizaLogger.debug(`Using action from generated content: ${stakeAction}`);\n        }\n        // 3. Default fallback\n        else {\n            stakeAction = \"deposit\"; // Default action\n            elizaLogger.debug(`No action detected, defaulting to deposit`);\n        }\n        \n        // Determine amount (if needed)\n        if (stakeAction !== \"claim\") {\n            // For deposit and withdraw, amount is needed\n            if (directAmount) {\n                amount = directAmount;\n                elizaLogger.debug(`Using amount directly extracted from prompt: ${amount}`);\n            } else if (content.amount) {\n                amount = content.amount;\n                elizaLogger.debug(`Using amount from generated content: ${amount}`);\n            } else if (stakeAction === \"deposit\") {\n                amount = \"0.001\"; // Default small amount for deposit\n                elizaLogger.debug(`No amount detected for deposit, defaulting to ${amount}`);\n            }\n            // For withdraw, undefined amount is valid (withdraws all)\n        }\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new StakeAction(walletProvider);\n        const paramOptions: StakeParams = {\n            chain: \"bsc\", // Only BSC is supported for staking\n            action: stakeAction as \"deposit\" | \"withdraw\" | \"claim\",\n            amount: amount,\n        };\n        \n        elizaLogger.debug(\"Final stake options:\", JSON.stringify(paramOptions, null, 2));\n        \n        try {\n            elizaLogger.debug(\"Calling stake with params:\", JSON.stringify(paramOptions, null, 2));\n            const stakeResp = await action.stake(paramOptions);\n            callback?.({\n                text: stakeResp.response,\n                content: { ...stakeResp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during stake:\", error.message);\n            \n            // Log the entire error object for diagnosis\n            try {\n                elizaLogger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n            } catch (e) {\n                elizaLogger.error(\"Error object not serializable, logging properties individually:\");\n                for (const key in error) {\n                    try {\n                        elizaLogger.error(`${key}:`, error[key]);\n                    } catch (e) {\n                        elizaLogger.error(`${key}: [Error serializing property]`);\n                    }\n                }\n            }\n            \n            // Provide more user-friendly error messages\n            let errorMessage = error.message;\n            \n            if (error.message.includes(\"insufficient funds\")) {\n                errorMessage = `Insufficient funds for the stake operation. Please check your balance and try with a smaller amount.`;\n            } else if (error.message.includes(\"user rejected\")) {\n                errorMessage = `Transaction was rejected. Please try again if you want to proceed with the stake operation.`;\n            } else if (error.message.includes(\"No withdrawal requests\")) {\n                errorMessage = `No withdrawal requests found to claim. You need to request a withdrawal first using the 'withdraw' action.`;\n            }\n            \n            callback?.({\n                text: `Stake failed: ${errorMessage}`,\n                content: { error: errorMessage },\n            });\n            return false;\n        }\n    },\n    template: stakeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Stake 0.001 BNB on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you stake 0.001 BNB to Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"deposit\",\n                        amount: \"0.001\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 0.001 BNB to Lista DAO\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you deposit 0.001 BNB to Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"deposit\",\n                        amount: \"0.001\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Undelegate 0.001 slisBNB on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you undelegate 0.001 slisBNB from Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"withdraw\",\n                        amount: \"0.001\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 0.001 slisBNB from Lista DAO\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you withdraw 0.001 slisBNB from Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"withdraw\",\n                        amount: \"0.001\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Claim unlocked BNB from Lista DAO\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you claim unlocked BNB from Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"claim\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"DELEGATE\",\n        \"STAKE\",\n        \"DEPOSIT\",\n        \"UNDELEGATE\",\n        \"UNSTAKE\",\n        \"WITHDRAW\",\n        \"CLAIM\",\n    ],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport type { Hex } from \"viem\";\nimport WebSocket, { type ClientOptions } from \"ws\";\n\nimport { faucetTemplate } from \"../templates\";\nimport type { FaucetResponse, FaucetParams } from \"../types\";\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\n\nexport { faucetTemplate };\n\n// Exported for tests\nexport class FaucetAction {\n    private readonly SUPPORTED_TOKENS: string[] = [\n        \"BNB\",\n        \"BTC\",\n        \"BUSD\",\n        \"DAI\",\n        \"ETH\",\n        \"USDC\",\n    ] as const;\n    private readonly FAUCET_URL = \"wss://testnet.bnbchain.org/faucet-smart/api\";\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async faucet(params: FaucetParams): Promise<FaucetResponse> {\n        elizaLogger.debug(\"Faucet params:\", params);\n        \n        try {\n            await this.validateAndNormalizeParams(params);\n            elizaLogger.debug(\"Normalized faucet params:\", params);\n            \n            // After validation, we know these values exist\n            if (!params.token) {\n                params.token = \"BNB\";\n                elizaLogger.debug(\"No token specified, defaulting to BNB\");\n            }\n            \n            if (!params.toAddress) {\n                params.toAddress = this.walletProvider.getAddress();\n                elizaLogger.debug(`No address specified, using wallet address: ${params.toAddress}`);\n            }\n\n            const resp: FaucetResponse = {\n                token: params.token,\n                recipient: params.toAddress,\n                txHash: \"0x\",\n            };\n\n            const options: ClientOptions = {\n                headers: {\n                    Connection: \"Upgrade\",\n                    Upgrade: \"websocket\",\n                },\n            };\n\n            const ws = new WebSocket(this.FAUCET_URL, options);\n\n            try {\n                // Wait for connection\n                await new Promise<void>((resolve, reject) => {\n                    ws.once(\"open\", () => resolve());\n                    ws.once(\"error\", reject);\n                });\n\n                // Send the message\n                const message = {\n                    tier: 0,\n                    url: params.toAddress,\n                    symbol: params.token,\n                    captcha: \"noCaptchaToken\",\n                };\n                elizaLogger.debug(`Sending faucet request: ${JSON.stringify(message)}`);\n                ws.send(JSON.stringify(message));\n\n                // Wait for response with transaction hash\n                const txHash = await new Promise<Hex>((resolve, reject) => {\n                    const timeout = setTimeout(() => {\n                        ws.close();\n                        reject(new Error(\"Faucet request timeout\"));\n                    }, 15000);\n\n                    ws.on(\"message\", (data) => {\n                        const response = JSON.parse(data.toString());\n                        elizaLogger.debug(`Faucet response: ${JSON.stringify(response)}`);\n\n                        // First response: funding request accepted\n                        if (response.success) {\n                            elizaLogger.debug(\"Faucet request accepted\");\n                            return;\n                        }\n\n                        // Second response: transaction details\n                        if (response.requests?.length > 0) {\n                            const txHash = response.requests[0].tx.hash;\n                            if (txHash) {\n                                clearTimeout(timeout);\n                                elizaLogger.debug(`Faucet transaction hash received: ${txHash}`);\n                                resolve(txHash as Hex);\n                            }\n                        }\n\n                        // Handle error case\n                        if (response.error) {\n                            clearTimeout(timeout);\n                            elizaLogger.error(`Faucet error: ${response.error}`);\n                            reject(new Error(response.error));\n                        }\n                    });\n\n                    ws.on(\"error\", (error) => {\n                        clearTimeout(timeout);\n                        elizaLogger.error(`WebSocket error: ${error.message}`);\n                        reject(\n                            new Error(`WebSocket error occurred: ${error.message}`)\n                        );\n                    });\n                });\n\n                resp.txHash = txHash;\n                elizaLogger.debug(`Faucet success: ${params.token} to ${params.toAddress}, tx: ${txHash}`);\n                return resp;\n            } finally {\n                ws.close();\n            }\n        } catch (error) {\n            elizaLogger.error(`Faucet error: ${error.message}`, error);\n            throw error;\n        }\n    }\n\n    async validateAndNormalizeParams(params: FaucetParams): Promise<void> {\n        elizaLogger.debug(\"Original faucet params:\", params);\n        \n        try {\n            // Token validation\n            if (!params.token) {\n                params.token = \"BNB\";\n                elizaLogger.debug(\"No token specified, defaulting to BNB\");\n            }\n            \n            if (!this.SUPPORTED_TOKENS.includes(params.token)) {\n                throw new Error(`Unsupported token: ${params.token}. Supported tokens are: ${this.SUPPORTED_TOKENS.join(', ')}`);\n            }\n            \n            // Address validation\n            if (!params.toAddress) {\n                // Use wallet's own address if none provided\n                params.toAddress = this.walletProvider.getAddress();\n                elizaLogger.debug(`No address provided, using wallet address: ${params.toAddress}`);\n                return;\n            }\n            \n            // If the address is already in the correct format, use it directly\n            if (typeof params.toAddress === 'string' && params.toAddress.startsWith(\"0x\") && params.toAddress.length === 42) {\n                elizaLogger.debug(`Using provided hex address: ${params.toAddress}`);\n                return;\n            }\n            \n            // Otherwise try to format it\n            try {\n                params.toAddress = await this.walletProvider.formatAddress(params.toAddress);\n                elizaLogger.debug(`Successfully formatted address to: ${params.toAddress}`);\n            } catch (error) {\n                elizaLogger.error(`Error formatting address: ${error.message}`);\n                // Fall back to wallet's own address if formatting fails\n                params.toAddress = this.walletProvider.getAddress();\n                elizaLogger.debug(`Falling back to wallet address: ${params.toAddress}`);\n            }\n        } catch (error) {\n            elizaLogger.error(`Error in validateAndNormalizeParams: ${error.message}`);\n            throw error;\n        }\n        \n        elizaLogger.debug(\"Normalized faucet params:\", params);\n    }\n}\n\nexport const faucetAction = {\n    name: \"faucet\",\n    description: \"Get test tokens from the BSC Testnet faucet (token list: BNB, BUSD, DAI, USDC)\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting faucet action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose faucet context\n        const faucetContext = composeContext({\n            state: currentState,\n            template: faucetTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: faucetContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new FaucetAction(walletProvider);\n        const paramOptions: FaucetParams = {\n            token: content.token,\n            toAddress: content.toAddress,\n        };\n        try {\n            const faucetResp = await action.faucet(paramOptions);\n            callback?.({\n                text: `Successfully transferred ${faucetResp.token} to ${faucetResp.recipient}\\nTransaction Hash: ${faucetResp.txHash}`,\n                content: {\n                    hash: faucetResp.txHash,\n                    recipient: faucetResp.recipient,\n                    chain: content.chain || \"bscTestnet\", // Default to testnet for faucet\n                },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during faucet:\", error.message);\n            \n            // Provide more user-friendly error messages\n            let userMessage = `Get test tokens failed: ${error.message}`;\n            \n            if (error.message.includes(\"Invalid address\")) {\n                userMessage = \"Failed to validate address. Please provide a valid BSC address.\";\n            } else if (error.message.includes(\"Unsupported token\")) {\n                userMessage = error.message;\n            } else if (error.message.includes(\"WebSocket error\")) {\n                userMessage = \"Connection to faucet failed. Please try again later.\";\n            }\n            \n            callback?.({\n                text: userMessage,\n                content: { \n                    error: error.message,\n                    requestedToken: paramOptions.token || \"BNB\",\n                    requestedAddress: paramOptions.toAddress\n                },\n            });\n            return false;\n        }\n    },\n    template: faucetTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get some USDC from the testnet faucet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Sure, I'll request some test USDC from the BSC Testnet faucet now. This will be sent to your wallet address.\",\n                    action: \"FAUCET\",\n                    content: {\n                        token: \"USDC\",\n                        toAddress: \"{{walletAddress}}\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get some test tokens from the faucet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll request some test BNB tokens from the BSC Testnet faucet. These tokens have no real value and are only for testing purposes.\",\n                    action: \"FAUCET\",\n                    content: {\n                        token: \"BNB\",\n                        toAddress: \"{{walletAddress}}\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"FAUCET\", \"GET_TEST_TOKENS\"],\n};\n","import {\n    MsgCreateBucket,\n    MsgDeleteObject,\n} from \"@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx\";\nimport { createRequire } from \"module\";\nimport {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    Media,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { readFileSync, statSync } from \"fs\";\nimport { lookup } from \"mime-types\";\nimport { extname } from \"node:path\";\nimport { CONFIG, getGnfdConfig, InitGnfdClient } from \"../providers/gnfd\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { greenfieldTemplate } from \"../templates\";\nimport { DelegatedPubObjectRequest } from \"@bnb-chain/greenfield-js-sdk\";\nimport { SupportedChain } from \"../types\";\nimport { CROSS_CHAIN_ABI } from \"../abi/CrossChainAbi\";\nimport { TOKENHUB_ABI } from \"../abi/TokenHubAbi\";\nimport { parseEther, stringToHex } from \"viem\";\n\nexport { greenfieldTemplate };\n\nconst require = createRequire(import.meta.url);\nconst {\n    Client,\n    Long,\n    VisibilityType,\n} = require(\"@bnb-chain/greenfield-js-sdk\");\n\nexport class GreenfieldAction {\n    constructor(\n        private walletProvider: WalletProvider,\n        private gnfdClient: typeof Client\n    ) { }\n\n    async getSps() {\n        const sps = await this.gnfdClient.sp.getStorageProviders();\n\n        return sps;\n    }\n\n    async selectSp() {\n        const finalSps = await this.getSps();\n\n        const selectIndex = Math.floor(Math.random() * finalSps.length);\n\n        const secondarySpAddresses = [\n            ...finalSps.slice(0, selectIndex),\n            ...finalSps.slice(selectIndex + 1),\n        ].map((item) => item.operatorAddress);\n        const selectSpInfo = {\n            id: finalSps[selectIndex].id,\n            endpoint: finalSps[selectIndex].endpoint,\n            primarySpAddress: finalSps[selectIndex]?.operatorAddress,\n            sealAddress: finalSps[selectIndex].sealAddress,\n            secondarySpAddresses,\n        };\n\n        return selectSpInfo;\n    }\n\n    async bnbTransferToGnfd(amount: bigint, runtime: IAgentRuntime) {\n        const config = await getGnfdConfig(runtime)\n\n        const chain: SupportedChain = config.NETWORK === 'TESTNET' ? 'bscTestnet' : 'bsc'\n        this.walletProvider.switchChain(chain);\n        const publicClient = this.walletProvider.getPublicClient(chain);\n        const walletClient = this.walletProvider.getWalletClient(chain);\n\n        const [relayFee, ackRelayFee] = await publicClient.readContract({\n            address: config.CROSSCHAIN_ADDRESS as `0x${string}`,\n            abi: CROSS_CHAIN_ABI,\n            functionName: \"getRelayFees\",\n        });\n        const relayerFee = relayFee + ackRelayFee;\n        const totalAmount = relayerFee + amount;\n\n        const { request } = await publicClient.simulateContract({\n            account: this.walletProvider.getAccount(),\n            address: config.TOKENHUB_ADDRESS as `0x${string}`,\n            abi: TOKENHUB_ABI,\n            functionName: \"transferOut\",\n            args: [this.walletProvider.getAddress(), amount],\n            value: totalAmount,\n        });\n\n        const hash = await walletClient.writeContract(request);\n        const tx = await publicClient.waitForTransactionReceipt({\n            hash,\n        });\n\n        return tx.transactionHash;\n    }\n\n    async createBucket(msg: MsgCreateBucket) {\n        elizaLogger.log(\"create bucket...\");\n        const createBucketTx = await this.gnfdClient.bucket.createBucket(msg);\n\n        const createBucketTxSimulateInfo = await createBucketTx.simulate({\n            denom: \"BNB\",\n        });\n\n        const createBucketTxRes = await createBucketTx.broadcast({\n            denom: \"BNB\",\n            gasLimit: Number(createBucketTxSimulateInfo?.gasLimit),\n            gasPrice: createBucketTxSimulateInfo?.gasPrice || \"5000000000\",\n            payer: msg.paymentAddress,\n            granter: \"\",\n            privateKey: this.walletProvider.getPk(),\n        });\n\n        elizaLogger.log(\"createBucketTxRes\", createBucketTxRes);\n\n        if (createBucketTxRes.code === 0) {\n            elizaLogger.log(\"create bucket success\");\n        }\n        return createBucketTxRes.transactionHash;\n    }\n\n    async headBucket(bucketName: string) {\n        const { bucketInfo } = await this.gnfdClient.bucket.headBucket(bucketName)\n        return bucketInfo.id;\n    }\n\n    async uploadObject(msg: DelegatedPubObjectRequest) {\n        elizaLogger.log(\"start uploadObject action\");\n        const uploadRes = await this.gnfdClient.object.delegateUploadObject(\n            msg,\n            {\n                type: \"ECDSA\",\n                privateKey: this.walletProvider.getPk(),\n            }\n        );\n        if (uploadRes.code === 0) {\n            elizaLogger.log(\"upload object success\");\n        }\n        return uploadRes.message;\n    }\n\n    async headObject(bucketName: string, objectName: string) {\n        const { objectInfo } = await this.gnfdClient.object.headObject(bucketName, objectName);\n        return objectInfo.id;\n    }\n\n    async deleteObject(msg: MsgDeleteObject) {\n        const deleteObjectTx = await this.gnfdClient.object.deleteObject(msg);\n\n        const simulateInfo = await deleteObjectTx.simulate({\n            denom: \"BNB\",\n        });\n\n        const res = await deleteObjectTx.broadcast({\n            denom: \"BNB\",\n            gasLimit: Number(simulateInfo?.gasLimit),\n            gasPrice: simulateInfo?.gasPrice || \"5000000000\",\n            payer: msg.operator,\n            granter: \"\",\n            privateKey: this.walletProvider.getPk(),\n        });\n\n        if (res.code === 0) {\n            elizaLogger.log(\"delete success\");\n        }\n\n        return res.transactionHash;\n    }\n}\n\nexport const greenfieldAction = {\n    name: \"GREENFIELD_ACTION\",\n    description:\n        \"create bucket, upload object, delete object on the greenfield chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting Gnfd action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        // Compose context\n        const context = composeContext({\n            state,\n            template: greenfieldTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: context,\n            modelClass: ModelClass.LARGE,\n        });\n\n        elizaLogger.log(\"content\", content);\n\n        const config = await getGnfdConfig(runtime)\n        const gnfdClient = await InitGnfdClient(runtime);\n        const walletProvider = initWalletProvider(runtime);\n        const action = new GreenfieldAction(walletProvider, gnfdClient);\n\n        const actionType = content.actionType;\n        const spInfo = await action.selectSp();\n        elizaLogger.log('action.selectSp()', spInfo)\n\n        elizaLogger.log('GREENFIELD_ACTION content', content)\n\n        const { bucketName, objectName } = content;\n        const attachments = message.content.attachments;\n\n        try {\n            let result = '';\n            switch (actionType) {\n                case \"createBucket\": {\n                    const msg = {\n                        bucketName: bucketName,\n                        creator: walletProvider.account.address,\n                        visibility: VisibilityType.VISIBILITY_TYPE_PUBLIC_READ,\n                        chargedReadQuota: Long.fromString(\"0\"),\n                        paymentAddress: walletProvider.account.address,\n                        primarySpAddress: spInfo.primarySpAddress,\n                    }\n                    const hash = await action.createBucket(msg);\n                    const bucketId = await action.headBucket(msg.bucketName)\n                    result = `create bucket successfully, details: ${config.GREENFIELD_SCAN}/bucket/${toHex(bucketId)}`;\n                    break;\n                }\n\n                case \"uploadObject\": {\n                    if (!attachments) {\n                        throw new Error(\"no file to upload\");\n                    }\n\n                    const uploadObjName = objectName;\n\n                    var uploadMsg = await action.uploadObject({\n                        bucketName,\n                        objectName: uploadObjName,\n                        body: generateFile(attachments[0]),\n                        delegatedOpts: {\n                            visibility: VisibilityType.VISIBILITY_TYPE_PUBLIC_READ,\n                        },\n                    });\n                    elizaLogger.log(\"uploadObject result\", uploadMsg);\n                    const objectId = await action.headObject(bucketName, objectName)\n\n                    if (attachments.length > 1) {\n                        result += `Only one object can be uploaded. \\n`;\n                    }\n                    result += `Upload object (${uploadObjName}) successfully, details: ${config.GREENFIELD_SCAN}/object/${toHex(objectId)}`;\n                    break;\n                }\n\n                case \"deleteObject\": {\n                    const hash = await action.deleteObject({\n                        bucketName,\n                        objectName,\n                        operator: walletProvider.account.address,\n                    });\n                    result = `delete object successfully, hash: 0x${hash}`;\n                    break;\n                }\n\n                case \"crossChainTransfer\": {\n                    const hash = await action.bnbTransferToGnfd(parseEther(String(content.amount)), runtime)\n                    result = `transfer bnb to greenfield successfully, hash: ${hash}`;\n                    break;\n                }\n            }\n            if (result) {\n                callback?.({\n                    text: result,\n                });\n            } else {\n                callback?.({\n                    text: `Unsuccessfully ${actionType || ''}`,\n                    content: result,\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error execute greenfield action:\", error.message);\n            callback?.({\n                text: `Bridge failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: greenfieldTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Create a bucket(${bucketName}) on greenfield\",\n                    action: \"GREENFIELD_ACTION\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Upload a object(${objectName}) in bucket(${bucketName}) on greenfield\",\n                    action: \"GREENFIELD_ACTION\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Delete object(${objectName}) in bucket(${bucketName}) on greenfield\",\n                    action: \"GREENFIELD_ACTION\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Cross Chain Transfer 0.00001 BNB to myself greenfield for create account\",\n                    action: \"GREENFIELD_ACTION\",\n                    content: {\n                        amount: \"0.00001\"\n                    }\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"GREENFIELD_ACTION\",\n        \"CREATE_BUCKET\",\n        \"UPLOAD_OBJECT\",\n        \"DELETE_BUCKET\",\n        \"TRANSFER_BNB_TO_GREENFIELD\",\n    ],\n};\n\nfunction generateFile(attachment: Media) {\n    const filePath = fixPath(attachment.url);\n\n    elizaLogger.log(\"filePath\", filePath);\n\n    const stats = statSync(filePath);\n    const fileSize = stats.size;\n    const name = extname(filePath);\n    const type = lookup(name);\n\n    if (!type) throw new Error(`Unsupported file type: ${filePath}`);\n\n    return {\n        name: filePath,\n        type,\n        size: fileSize,\n        content: readFileSync(filePath),\n    };\n}\n\nfunction fixPath(url: string) {\n    return url.replace(\"/agent/agent/\", \"/agent/\");\n}\n\nfunction toHex(n: string) {\n    return \"0x\" + Number(n).toString(16).padStart(64, '0');\n}\n","import { createRequire } from \"module\";\nimport { IAgentRuntime } from \"@elizaos/core\";\n\nconst require = createRequire(import.meta.url);\nconst { Client } = require(\"@bnb-chain/greenfield-js-sdk\");\n\nexport const getGnfdConfig = async (runtime: IAgentRuntime) => {\n    const network = runtime.getSetting(\"GREENFIELD_NETWORK\");\n    const config =\n    network === \"TESTNET\" ? CONFIG[\"TESTNET\"] : CONFIG[\"MAINNET\"];\n\n    return config\n}\n\nexport const InitGnfdClient = async (runtime: IAgentRuntime) => {\n    const config = await getGnfdConfig(runtime)\n    if (!config.GREENFIELD_CHAIN_ID || !config.GREENFIELD_RPC_URL) {\n        throw new Error(\"Creating greenfield client params is error\");\n    }\n\n    const client = Client.create(\n        config.GREENFIELD_RPC_URL,\n        config.GREENFIELD_CHAIN_ID\n    );\n\n    return client;\n};\n\nexport const CONFIG = {\n    MAINNET: {\n        NETWORK: \"MAINNET\",\n        TOKENHUB_ADDRESS: \"0xeA97dF87E6c7F68C9f95A69dA79E19B834823F25\",\n        CROSSCHAIN_ADDRESS: \"0x77e719b714be09F70D484AB81F70D02B0E182f7d\",\n        GREENFIELD_RPC_URL: \"https://greenfield-chain.bnbchain.org\",\n        GREENFIELD_CHAIN_ID: \"1017\",\n        GREENFIELD_SCAN: 'https://greenfieldscan.com'\n    },\n    TESTNET: {\n        NETWORK: \"TESTNET\",\n        TOKENHUB_ADDRESS: \"0xED8e5C546F84442219A5a987EE1D820698528E04\",\n        CROSSCHAIN_ADDRESS: \"0xa5B2c9194131A4E0BFaCbF9E5D6722c873159cb7\",\n        GREENFIELD_RPC_URL:\n            \"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org\",\n        GREENFIELD_CHAIN_ID: \"5600\",\n        GREENFIELD_SCAN: 'https://testnet.greenfieldscan.com'\n    },\n};\n","export const CROSS_CHAIN_ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n        ],\n        name: \"AddChannel\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"srcChainId\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"dstChainId\",\n                type: \"uint32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"oracleSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"payload\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"CrossChainPackage\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isEnable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"EnableOrDisableChannel\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ParamChange\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalTypeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"proposer\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint128\",\n                name: \"quorum\",\n                type: \"uint128\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint128\",\n                name: \"expiredAt\",\n                type: \"uint128\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"contentHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposalSubmitted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"packageType\",\n                type: \"uint8\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"ReceivedPackage\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"executor\",\n                type: \"address\",\n            },\n        ],\n        name: \"Reopened\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"executor\",\n                type: \"address\",\n            },\n        ],\n        name: \"Suspended\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"lowLevelData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnexpectedFailureAssertionInPackageHandler\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"reason\",\n                type: \"string\",\n            },\n        ],\n        name: \"UnexpectedRevertInPackageHandler\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"payload\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnsupportedPackage\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ACK_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CANCEL_TRANSFER_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CODE_OK\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CROSS_CHAIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"EMERGENCY_PROPOSAL_EXPIRE_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"EMPTY_CONTENT_HASH\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ERROR_FAIL_DECODE\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"FAIL_ACK_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"IN_TURN_RELAYER_VALIDITY_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"LIGHT_CLIENT\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"OUT_TURN_RELAYER_BACKOFF_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROXY_ADMIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"RELAYER_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REOPEN_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SUSPEND_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SYN_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_CHANNEL_ID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_OUT_CHANNEL_ID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"batchSizeForOracle\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callbackGasPrice\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"attacker\",\n                type: \"address\",\n            },\n        ],\n        name: \"cancelTransfer\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"chainId\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelHandlerMap\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelReceiveSequenceMap\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelSendSequenceMap\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"emergencyProposals\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"quorum\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"uint128\",\n                name: \"expiredAt\",\n                type: \"uint128\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"contentHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"packageType\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ackRelayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"encodePayload\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRelayFees\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_minAckRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"gnfdChainId\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_payload\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_blsSignature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_validatorsBitSet\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"handlePackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint16\",\n                name: \"_gnfdChainId\",\n                type: \"uint16\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isSuspended\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minAckRelayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"oracleSequence\",\n        outputs: [\n            {\n                internalType: \"int64\",\n                name: \"\",\n                type: \"int64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"previousTxHeight\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"quorumMap\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"registeredContractChannelMap\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"relayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"reopen\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ackRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"sendSynPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"suspend\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"txCounter\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"updateParam\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"upgradeInfo\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"version\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"description\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n] as const;\n","export const TOKENHUB_ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ParamChange\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReceiveTransferIn\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"status\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"RefundFailure\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"status\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"RefundSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RewardTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferInSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"senderAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"relayFee\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"ackRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferOutSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnexpectedPackage\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"APP_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CODE_OK\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CROSS_CHAIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ERROR_FAIL_DECODE\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"LIGHT_CLIENT\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MAX_GAS_FOR_TRANSFER_BNB\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROXY_ADMIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"RELAYER_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REWARD_UPPER_LIMIT\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_INSUFFICIENT_BALANCE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_NON_PAYABLE_RECIPIENT\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_UNKNOWN\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_SUCCESS\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_OUT_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"claimRelayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"govHub\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleAckPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleFailAckPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleSynPackage\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferOut\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n] as const;\n"],"mappings":";AAAA;AAAA,EACI;AAAA,EACA,eAAAA;AAAA,EACA;AAAA,EAEA;AAAA,OAIG;AACP,SAAS,cAAc,iBAAiB;AACxC,SAAS,kBAAkB;;;ACL3B,SAAS,KAAK,cAAc,gBAAgB;AAW5C;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACG;AACP,SAAS,2BAA2B;AACpC,YAAY,gBAAgB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAIrB,IAAM,iBAAN,MAAM,gBAAe;AAAA,EAChB,eAA+B;AAAA,EACvC,SAAgC,EAAE,KAAgB,eAAI;AAAA,EACtD;AAAA,EACQ;AAAA,EACR,YAAY,YAA2B,QAAgC;AACnE,SAAK,aAAa;AAClB,SAAK,WAAW,UAAU;AAC1B,SAAK,UAAU,MAAM;AAErB,QAAI,UAAU,OAAO,KAAK,MAAM,EAAE,SAAS,GAAG;AAC1C,WAAK,gBAAgB,OAAO,KAAK,MAAM,EAAE,CAAC,CAAmB;AAAA,IACjE;AAAA,EACJ;AAAA,EAEA,aAAgC;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,QAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,aAAsB;AAClB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EAEA,kBAAyB;AACrB,WAAO,KAAK,OAAO,KAAK,YAAY;AAAA,EACxC;AAAA,EAEA,gBACI,WACuD;AACvD,UAAM,YAAY,KAAK,oBAAoB,SAAS;AAEpD,UAAM,eAAe,mBAAmB;AAAA,MACpC,OAAO,KAAK,OAAO,SAAS;AAAA,MAC5B;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,WAAyC;AACrD,UAAM,YAAY,KAAK,oBAAoB,SAAS;AAEpD,UAAM,eAAe,mBAAmB;AAAA,MACpC,OAAO,KAAK,OAAO,SAAS;AAAA,MAC5B;AAAA,MACA,SAAS,KAAK;AAAA,IAClB,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,WAAkC;AAC9C,UAAM,QAAQ,WAAW,SAAS;AAElC,QAAI,CAAC,OAAO,IAAI;AACZ,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACxC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,iBAAiB,WAA2B;AACxC,UAAM,SAAS,OAAO,OAAO,KAAK,MAAM;AACxC,UAAM,eAAe,KAAK,gBAAgB,SAAS;AAEnD,iBAAa;AAAA,MACT,YAAY;AAAA,MACZ,WAAW;AAAA,QACP,IAAI;AAAA,UACA,iBAAiB,YAAY;AAAA,UAC7B,aAAa,OAAO,YAChB,mBAAmB;AAAA,YACf,SAAS,KAAK;AAAA,YACd,OAAO,OAAO;AAAA,cACV,CAAC,UAAU,MAAM,OAAO;AAAA,YAC5B;AAAA,YACA,WAAW,KAAK;AAAA,UACpB,CAAC;AAAA,QACT,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,cAAc,SAAsD;AAEtE,QAAI,YAAY,QAAQ,YAAY,QAAW;AAC3C,kBAAY,MAAM,0DAA0D;AAC5E,aAAO,KAAK,WAAW;AAAA,IAC3B;AAGA,QAAI,OAAO,YAAY,YAAY,QAAQ,KAAK,EAAE,WAAW,GAAG;AAC5D,kBAAY,MAAM,qDAAqD;AACvE,aAAO,KAAK,WAAW;AAAA,IAC3B;AAGA,UAAM,aAAa,OAAO,OAAO,EAAE,KAAK;AAGxC,QAAI,WAAW,WAAW,IAAI,KAAK,WAAW,WAAW,IAAI;AACzD,kBAAY,MAAM,4BAA4B,UAAU,EAAE;AAC1D,aAAO;AAAA,IACX;AAIA,UAAM,eAAe,CAAC,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,MAAM,OAAO,QAAQ,QAAQ,MAAM;AAC/H,QAAI,aAAa,SAAS,WAAW,YAAY,CAAC,GAAG;AACjD,kBAAY,MAAM,uDAAuD,UAAU,+BAA+B;AAClH,aAAO,KAAK,WAAW;AAAA,IAC3B;AAGA,QAAI;AACA,kBAAY,MAAM,sCAAsC,UAAU,EAAE;AACpE,YAAM,kBAAkB,MAAM,KAAK,gBAAgB,UAAU;AAC7D,UAAI,iBAAiB;AACjB,oBAAY,MAAM,iCAAiC,eAAe,EAAE;AACpE,eAAO;AAAA,MACX;AAAA,IACJ,SAAS,OAAO;AACZ,kBAAY,MAAM,+BAA+B,UAAU,MAAM,MAAM,OAAO,2BAA2B;AAAA,IAE7G;AAGA,QAAI,WAAW,WAAW,IAAI,GAAG;AAC7B,kBAAY,MAAM,YAAY,UAAU,wEAAwE;AAChH,aAAO;AAAA,IACX;AAGA,gBAAY,MAAM,8BAA8B,UAAU,gCAAgC;AAC1F,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EAEA,MAAM,gBAAgB,MAAyD;AAE3E,QAAI,SAAS,QAAQ,SAAS,UAAa,SAAS,QAAQ;AACxD,kBAAY,MAAM,sDAAsD;AACxE,aAAO;AAAA,IACX;AAGA,UAAM,UAAU,OAAO,IAAI,EAAE,KAAK;AAClC,QAAI,QAAQ,WAAW,GAAG;AACtB,kBAAY,MAAM,8CAA8C;AAChE,aAAO;AAAA,IACX;AAGA,QAAI,QAAQ,WAAW,IAAI,KAAK,QAAQ,WAAW,IAAI;AACnD,kBAAY,MAAM,qCAAqC,OAAO,EAAE;AAChE,aAAO;AAAA,IACX;AAGA,UAAM,eAAe,CAAC,QAAQ,QAAQ,OAAO,OAAO,OAAO,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,MAAM,OAAO,QAAQ,QAAQ,MAAM;AAC7I,QAAI,aAAa,SAAS,QAAQ,YAAY,CAAC,GAAG;AAC9C,kBAAY,MAAM,kDAAkD,OAAO,EAAE;AAC7E,aAAO;AAAA,IACX;AAEA,QAAI;AAEA,YAAM,QAAQ,KAAK,gBAAgB;AACnC,YAAM,SAAS,MAAM,QAAQ,QAAQ,KAAK,CAAC,KAAK,MAAM,QAAQ,QAAQ,KAAK,CAAC;AAE5E,kBAAY,MAAM,uBAAuB,OAAO,gBAAgB,MAAM,IAAI,aAAa,MAAM,EAAE;AAG/F,YAAM,cAAc,eAAe;AAAA,QAC/B;AAAA,MACJ,CAAC;AAGD,YAAM,SAAS,MAAM,QAAQ,KAAK;AAAA,QAC9B,YAAY,WAAW,OAAO;AAAA,QAC9B,IAAI;AAAA,UAAc,CAAC,YACf,WAAW,MAAM;AACb,wBAAY,MAAM,mCAAmC,OAAO,EAAE;AAC9D,oBAAQ,IAAI;AAAA,UAChB,GAAG,GAAI;AAAA;AAAA,QACX;AAAA,MACJ,CAAC;AAED,UAAI,QAAQ;AACR,oBAAY,MAAM,sBAAsB,OAAO,WAAM,MAAM,EAAE;AAC7D,eAAO;AAAA,MACX,OAAO;AACH,oBAAY,MAAM,0BAA0B,OAAO,EAAE;AACrD,eAAO;AAAA,MACX;AAAA,IACJ,SAAS,OAAO;AAEZ,kBAAY,MAAM,4BAA4B,OAAO,KAAK,MAAM,OAAO,EAAE;AACzE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,oBACF,OACA,OACA,OACA,SACe;AACf,UAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,WAAO,MAAM,aAAa,aAAa;AAAA,MACnC,SAAS;AAAA,MACT,KAAK;AAAA,MACL,cAAc;AAAA,MACd,MAAM,CAAC,OAAO,OAAO;AAAA,IACzB,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,aACF,OACA,OACA,SACA,QACY;AACZ,UAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,UAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,UAAM,EAAE,QAAQ,IAAI,MAAM,aAAa,iBAAiB;AAAA,MACpD,SAAS,KAAK;AAAA,MACd,SAAS;AAAA,MACT,KAAK;AAAA,MACL,cAAc;AAAA,MACd,MAAM,CAAC,SAAS,MAAM;AAAA,IAC1B,CAAC;AAED,WAAO,MAAM,aAAa,cAAc,OAAO;AAAA,EACnD;AAAA,EAEA,MAAM,SACF,OACA,WACA,QACA,SAKY;AACZ,UAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,WAAO,MAAM,aAAa,gBAAgB;AAAA,MACtC,SAAS,KAAK;AAAA,MACd,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,OAAO,KAAK,gBAAgB,KAAK;AAAA,MACjC,GAAG;AAAA,IACP,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,cACF,OACA,cACA,WACA,QACA,SAIY;AACZ,UAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,UAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,UAAM,EAAE,QAAQ,IAAI,MAAM,aAAa,iBAAiB;AAAA,MACpD,SAAS,KAAK;AAAA,MACd,SAAS;AAAA,MACT,KAAK;AAAA,MACL,cAAc;AAAA,MACd,MAAM,CAAC,WAA4B,MAAM;AAAA,MACzC,GAAG;AAAA,IACP,CAAC;AAED,WAAO,MAAM,aAAa,cAAc,OAAO;AAAA,EACnD;AAAA,EAEA,MAAM,aAA8B;AAChC,UAAM,SAAS,KAAK,gBAAgB,KAAK,YAAY;AACrD,UAAM,UAAU,MAAM,OAAO,WAAW;AAAA,MACpC,SAAS,KAAK,QAAQ;AAAA,IAC1B,CAAC;AACD,WAAO,YAAY,SAAS,EAAE;AAAA,EAClC;AAAA,EAEA,MAAM,gBACF,WACA,aACe;AACf,UAAM,QAAQ,MAAM;AAAA,MAChB,KAAK,gBAAgB,SAAS,EAAE;AAAA,MAChC;AAAA,IACJ;AACA,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB,aAAoC;AAEvD,UAAMC,2BAAkD;AAAA,MACpD,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAGA,UAAM,mBAAmB,YAAY,YAAY;AAGjD,QAAIA,yBAAwB,gBAAgB,GAAG;AAC3C,kBAAY,MAAM,mCAAmC,gBAAgB,KAAKA,yBAAwB,gBAAgB,CAAC,EAAE;AACrH,aAAOA,yBAAwB,gBAAgB;AAAA,IACnD;AAEA,gBAAY,MAAM,sCAAsC,gBAAgB,EAAE;AAC1E,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,OAA8B;AACnC,SAAK,UAAU,KAAK;AAAA,EACxB;AAAA,EAEA,YAAY,WAA2B,cAAuB;AAC1D,QAAI,CAAC,KAAK,OAAO,SAAS,GAAG;AACzB,YAAM,QAAQ,gBAAe;AAAA,QACzB;AAAA,QACA;AAAA,MACJ;AACA,WAAK,SAAS,EAAE,CAAC,SAAS,GAAG,MAAM,CAAC;AAAA,IACxC;AACA,SAAK,gBAAgB,SAAS;AAAA,EAClC;AAAA,EAEQ,aAAa,CAAC,OAAsB;AACxC,SAAK,UAAU,oBAAoB,EAAE;AAAA,EACzC;AAAA,EAEQ,YAAY,CAAC,WAAmC;AACpD,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,eAAW,SAAS,OAAO,KAAK,MAAM,GAAG;AACrC,WAAK,OAAO,KAAK,IAAI,OAAO,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA,EAEQ,kBAAkB,CAAC,UAA0B;AACjD,SAAK,eAAe;AAAA,EACxB;AAAA,EAEQ,sBAAsB,CAAC,cAA8B;AACzD,UAAM,QAAQ,KAAK,OAAO,SAAS;AAEnC,QAAI,MAAM,QAAQ,QAAQ;AACtB,aAAO,KAAK,MAAM,QAAQ,OAAO,KAAK,CAAC,CAAC;AAAA,IAC5C;AACA,WAAO,KAAK,MAAM,QAAQ,QAAQ,KAAK,CAAC,CAAC;AAAA,EAC7C;AAAA,EAEA,OAAO,iBACH,WACA,cACK;AACL,UAAM,YAAY,WAAW,SAAS;AAEtC,QAAI,CAAC,WAAW,IAAI;AAChB,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACxC;AAEA,UAAM,YAAmB,eACnB;AAAA,MACI,GAAG;AAAA,MACH,SAAS;AAAA,QACL,GAAG,UAAU;AAAA,QACb,QAAQ;AAAA,UACJ,MAAM,CAAC,YAAY;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ,IACA;AAEN,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,uBAAuB,CACzB,YACwB;AACxB,QAAM,aAAa,CAAC,OAAO,cAAc,SAAS,cAAc;AAChE,QAAM,SAAS,CAAC;AAEhB,aAAW,aAAa,YAAY;AAChC,UAAM,QAAQ,eAAe,iBAAiB,SAAS;AACvD,WAAO,SAAS,IAAI;AAAA,EACxB;AAEA,QAAM,iBAAiB,QAAQ,WAAW,kBAAkB;AAC5D,MAAI,gBAAgB;AAChB,UAAM,QAAQ,eAAe,iBAAiB,OAAO,cAAc;AACnE,WAAO,KAAK,IAAI;AAAA,EACpB;AAEA,QAAM,iBAAiB,QAAQ,WAAW,0BAA0B;AACpE,MAAI,gBAAgB;AAChB,UAAM,QAAQ,eAAe,iBAAiB,cAAc,cAAc;AAC1E,WAAO,YAAY,IAAI;AAAA,EAC3B;AAEA,QAAM,eAAe,QAAQ,WAAW,oBAAoB;AAC5D,MAAI,cAAc;AACd,UAAM,QAAQ,eAAe,iBAAiB,SAAS,YAAY;AACnE,WAAO,OAAO,IAAI;AAAA,EACtB;AAEA,SAAO;AACX;AAEO,IAAM,qBAAqB,CAAC,YAA2B;AAC1D,QAAM,aAAa,QAAQ,WAAW,iBAAiB;AACvD,MAAI,CAAC,YAAY;AACb,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AAEA,QAAM,SAAS,qBAAqB,OAAO;AAE3C,SAAO,IAAI,eAAe,YAA6B,MAAM;AACjE;AAEO,IAAM,oBAA8B;AAAA,EACvC,MAAM,IACF,SACA,UACA,QACsB;AACtB,QAAI;AACA,YAAM,iBAAiB,mBAAmB,OAAO;AACjD,YAAM,UAAU,eAAe,WAAW;AAC1C,YAAM,UAAU,MAAM,eAAe,WAAW;AAChD,YAAM,QAAQ,eAAe,gBAAgB;AAC7C,aAAO,6BAA6B,OAAO;AAAA,WAAc,OAAO,IAAI,MAAM,eAAe,MAAM;AAAA,YAAe,MAAM,EAAE,WAAW,MAAM,IAAI;AAAA,IAC/I,SAAS,OAAO;AACZ,cAAQ,MAAM,uCAAuC,KAAK;AAC1D,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;ACveO,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuB3B,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BzB,IAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BrB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BvB,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBtB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBvB,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoC5B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AFlK3B,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EAErD,MAAM,KAAK,QAA2C;AAClD,IAAAC,aAAY,MAAM,8BAA8B,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAG/E,SAAK,2BAA2B,MAAM;AACtC,IAAAA,aAAY,MAAM,6BAA6B,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAE9E,UAAM,cAAc,KAAK,eAAe,WAAW;AACnD,IAAAA,aAAY,MAAM,iBAAiB,WAAW,EAAE;AAEhD,UAAM,UAAU,KAAK,eAAe,gBAAgB,OAAO,KAAK,EAAE;AAClE,IAAAA,aAAY,MAAM,aAAa,OAAO,EAAE;AAGxC,IAAAA,aAAY,MAAM,oCAAoC,OAAO,KAAK,EAAE;AACpE,SAAK,eAAe,iBAAiB,OAAO,KAAK;AAGjD,QAAI,mBAAmB,OAAO;AAC9B,QAAI,iBAAiB,OAAO;AAG5B,QAAI,CAAC,OAAO,UAAU,WAAW,IAAI,GAAG;AACpC,UAAI;AACA,QAAAA,aAAY,MAAM,gCAAgC,OAAO,SAAS,EAAE;AACpE,2BAAmB,MAAM,KAAK,eAAe;AAAA,UACzC,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA,QAAAA,aAAY,MAAM,gCAAgC,gBAAgB,EAAE;AAGpE,YAAI,OAAO,UAAU,YAAY,MAAM,OAAO;AAC1C,UAAAA,aAAY,MAAM,4CAA4C;AAC9D,6BAAmB;AAAA,QACvB;AAAA,MACJ,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,0CAA0C,OAAO,SAAS,KAAK,KAAK;AACtF,cAAM,IAAI,MAAM,wBAAwB,OAAO,SAAS,aAAa,OAAO,KAAK,kCAAkC;AAAA,MACvH;AAAA,IACJ,OAAO;AACH,MAAAA,aAAY,MAAM,oCAAoC,gBAAgB,EAAE;AAAA,IAC5E;AAGA,QAAI,CAAC,OAAO,QAAQ,WAAW,IAAI,GAAG;AAClC,UAAI;AACA,QAAAA,aAAY,MAAM,8BAA8B,OAAO,OAAO,EAAE;AAChE,yBAAiB,MAAM,KAAK,eAAe;AAAA,UACvC,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA,QAAAA,aAAY,MAAM,8BAA8B,cAAc,EAAE;AAGhE,YAAI,OAAO,QAAQ,YAAY,MAAM,OAAO;AACxC,UAAAA,aAAY,MAAM,4CAA4C;AAC9D,2BAAiB;AAAA,QACrB;AAAA,MACJ,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,wCAAwC,OAAO,OAAO,KAAK,KAAK;AAClF,cAAM,IAAI,MAAM,wBAAwB,OAAO,OAAO,aAAa,OAAO,KAAK,kCAAkC;AAAA,MACrH;AAAA,IACJ,OAAO;AACH,MAAAA,aAAY,MAAM,kCAAkC,cAAc,EAAE;AAAA,IACxE;AAEA,UAAM,OAAqB;AAAA,MACvB,OAAO,OAAO;AAAA,MACd,QAAQ;AAAA,MACR,WAAW,OAAO;AAAA,MAClB,SAAS,OAAO;AAAA,MAChB,QAAQ,OAAO;AAAA,IACnB;AAEA,IAAAA,aAAY,MAAM,uBAAuB,gBAAgB,OAAO,cAAc,EAAE;AAGhF,UAAM,WAAW,OAAO,YAAY;AACpC,IAAAA,aAAY,MAAM,mBAAmB,QAAQ,EAAE;AAE/C,QAAI;AACA,YAAM,SAAS,MAAM,UAAU;AAAA,QAC3B,aAAa;AAAA,QACb,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,YAAY,WAAW,OAAO,MAAM,EAAE,SAAS;AAAA,QAC/C;AAAA,QACA,SAAS;AAAA,UACL;AAAA,UACA,OAAO;AAAA,QACX;AAAA,MACJ,CAAC;AAED,MAAAA,aAAY,MAAM,SAAS,OAAO,OAAO,MAAM,SAAS;AAExD,UAAI,CAAC,OAAO,OAAO,QAAQ;AACvB,cAAM,IAAI,MAAM,wBAAwB,OAAO,SAAS,OAAO,OAAO,OAAO,gBAAgB,OAAO,MAAM,EAAE;AAAA,MAChH;AAEA,MAAAA,aAAY,MAAM,oBAAoB,KAAK,UAAU,OAAO,OAAO,CAAC,EAAE,OAAO,MAAM,CAAC,CAAC,EAAE;AACvF,YAAM,YAAY,MAAM,aAAa,OAAO,OAAO,CAAC,CAAC;AAErD,MAAAA,aAAY,MAAM,cAAc,KAAK,UAAU,UAAU,OAAO,MAAM,CAAC,CAAC,EAAE;AAE1E,YAAMC,WACF,UAAU,MAAM,CAAC,GAAG,WAAW,QAC3B,UAAU,MAAM,CAAC,GAAG,WAAW,QAAQ,SAAS,CACpD;AAEJ,UAAI,CAACA,UAAS,UAAUA,SAAQ,WAAW,UAAU;AACjD,cAAM,IAAI,MAAM,uBAAuBA,UAAS,UAAU,eAAe,EAAE;AAAA,MAC/E;AAEA,WAAK,SAASA,SAAQ;AACtB,MAAAD,aAAY,MAAM,iCAAiC,KAAK,MAAM,EAAE;AAEhE,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,gCAAgC,KAAK;AAGvD,UAAI,eAAe,MAAM;AAEzB,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,QAAAA,aAAY,MAAM,6BAA6B;AAC/C,cAAM,IAAI,MAAM,mCAAmC,OAAO,MAAM,IAAI,OAAO,SAAS,8BAA8B;AAAA,MACtH,WAAW,MAAM,QAAQ,SAAS,wBAAwB,GAAG;AACzD,QAAAA,aAAY,MAAM,4BAA4B;AAC9C,cAAM,IAAI,MAAM,+FAA+F;AAAA,MACnH;AAGA,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,2BAA2B,QAA0B;AACjD,IAAAA,aAAY,MAAM,iCAAiC,OAAO,KAAK,UAAU,OAAO,SAAS,QAAQ,OAAO,OAAO,YAAY,OAAO,MAAM,EAAE;AAG1I,QAAI,CAAC,OAAO,OAAO;AACf,MAAAA,aAAY,MAAM,uCAAuC;AACzD,aAAO,QAAQ;AAAA,IACnB,WAAW,OAAO,UAAU,OAAO;AAC/B,MAAAA,aAAY,MAAM,sBAAsB,OAAO,KAAK,EAAE;AACtD,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC7D;AAGA,QAAI,CAAC,OAAO,WAAW;AACnB,MAAAA,aAAY,MAAM,0BAA0B;AAC5C,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACrD;AAEA,QAAI,CAAC,OAAO,SAAS;AACjB,MAAAA,aAAY,MAAM,wBAAwB;AAC1C,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACnD;AAGA,QAAI,OAAO,cAAc,OAAO,SAAS;AACrC,MAAAA,aAAY,MAAM,2CAA2C,OAAO,SAAS,EAAE;AAC/E,YAAM,IAAI,MAAM,2CAA2C,OAAO,SAAS,EAAE;AAAA,IACjF;AAGA,QAAI,CAAC,OAAO,QAAQ;AAChB,MAAAA,aAAY,MAAM,sBAAsB;AACxC,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD;AAEA,QAAI;AACA,YAAM,eAAe,WAAW,OAAO,MAAM;AAC7C,UAAI,gBAAgB,IAAI;AACpB,QAAAA,aAAY,MAAM,mBAAmB,OAAO,MAAM,2BAA2B;AAC7E,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD;AACA,MAAAA,aAAY,MAAM,kBAAkB,aAAa,SAAS,CAAC,MAAM;AAAA,IACrE,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,2BAA2B,OAAO,MAAM,IAAI,KAAK;AACnE,YAAM,IAAI,MAAM,wBAAwB,OAAO,MAAM,kCAAkC;AAAA,IAC3F;AAGA,QAAI,OAAO,aAAa,QAAW;AAC/B,UAAI,OAAO,OAAO,aAAa,UAAU;AACrC,QAAAA,aAAY,MAAM,0BAA0B,OAAO,OAAO,QAAQ,EAAE;AACpE,cAAM,IAAI,MAAM,2BAA2B;AAAA,MAC/C;AAEA,UAAI,OAAO,YAAY,KAAK,OAAO,WAAW,GAAG;AAC7C,QAAAA,aAAY,MAAM,2BAA2B,OAAO,QAAQ,4BAA4B;AACxF,cAAM,IAAI,MAAM,sDAAsD;AAAA,MAC1E;AAAA,IACJ,OAAO;AAEH,aAAO,WAAW;AAClB,MAAAA,aAAY,MAAM,2BAA2B,OAAO,QAAQ,EAAE;AAAA,IAClE;AAAA,EACJ;AACJ;AAEO,IAAM,aAAa;AAAA,EACtB,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,yBAAyB;AACzC,IAAAA,aAAY,MAAM,oBAAoB,KAAK,UAAU,QAAQ,SAAS,MAAM,CAAC,CAAC;AAG9E,UAAM,aAAa,OAAO,QAAQ,QAAQ,SAAS,WAAW,QAAQ,QAAQ,KAAK,KAAK,IAAI;AAC5F,IAAAA,aAAY,MAAM,qBAAqB,UAAU,GAAG;AAGpD,UAAM,cAAc,WAAW,YAAY;AAG3C,UAAM,iBAAiB;AACvB,UAAM,oBAAoB;AAE1B,QAAI,kBAAiC;AACrC,QAAI,gBAA+B;AACnC,QAAI,eAA8B;AAGlC,UAAM,QAAQ,WAAW,MAAM,cAAc,KAAK,WAAW,MAAM,iBAAiB;AACpF,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,qBAAe,MAAM,CAAC;AACtB,wBAAkB,MAAM,CAAC,EAAE,YAAY;AACvC,sBAAgB,MAAM,CAAC,EAAE,YAAY;AACrC,MAAAA,aAAY,MAAM,4CAA4C,YAAY,WAAW,eAAe,SAAS,aAAa,EAAE;AAAA,IAChI;AAGA,UAAM,gBAAyC,CAAC;AAChD,UAAM,eAAe,CAAC,QAAQ,QAAQ,OAAO,OAAO,OAAO,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,MAAM,OAAO,QAAQ,QAAQ,MAAM;AAE7I,eAAW,SAAS,cAAc;AAE9B,YAAM,QAAQ,IAAI,OAAO,MAAM,KAAK,OAAO,GAAG;AAC9C,UAAI,MAAM,KAAK,UAAU,GAAG;AACxB,sBAAc,KAAK,IAAI;AACvB,QAAAA,aAAY,MAAM,6BAA6B,KAAK,EAAE;AAAA,MAC1D;AAAA,IACJ;AAGA,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,2BAA2B,cAAc;AAG3D,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,UAAM,aAAa,MAAM,kBAAkB;AAAA,MACvC;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAGA,UAAM,cAAc,eAAe;AAAA,MAC/B,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAM,yBAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAY,WAAW;AAAA,IAC3B,CAAC;AAED,IAAAA,aAAY,MAAM,2BAA2B,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC;AAG7E,QAAI,QAAQ,QAAQ,OAAO,YAAY,KAAK;AAC5C,IAAAA,aAAY,MAAM,oBAAoB,KAAK,EAAE;AAQ7C,QAAI;AACJ,QAAI,iBAAiB;AACjB,kBAAY;AACZ,MAAAA,aAAY,MAAM,oDAAoD,SAAS,EAAE;AAAA,IACrF,WAAW,QAAQ,YAAY;AAC3B,kBAAY,QAAQ;AACpB,MAAAA,aAAY,MAAM,4CAA4C,SAAS,EAAE;AAAA,IAC7E,WAAW,cAAc,KAAK,GAAG;AAC7B,kBAAY;AACZ,MAAAA,aAAY,MAAM,kDAAkD;AAAA,IACxE,OAAO;AACH,kBAAY;AACZ,MAAAA,aAAY,MAAM,2CAA2C;AAAA,IACjE;AAGA,QAAI,UAAkB;AACtB,QAAI,eAAe;AACf,gBAAU;AACV,MAAAA,aAAY,MAAM,kDAAkD,OAAO,EAAE;AAAA,IACjF,WAAW,QAAQ,aAAa;AAC5B,gBAAU,QAAQ;AAClB,MAAAA,aAAY,MAAM,0CAA0C,OAAO,EAAE;AAAA,IACzE,OAAO;AAEH,UAAI,aAAa;AACjB,iBAAW,SAAS,CAAC,QAAQ,QAAQ,MAAM,GAAG;AAC1C,YAAI,UAAU,aAAa,cAAc,KAAK,GAAG;AAC7C,oBAAU;AACV,UAAAA,aAAY,MAAM,SAAS,KAAK,+BAA+B;AAC/D,uBAAa;AACb;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,YAAY;AACb,kBAAU,cAAc,QAAQ,SAAS;AACzC,QAAAA,aAAY,MAAM,uCAAuC,OAAO,EAAE;AAAA,MACtE;AAAA,IACJ;AAGA,QAAI;AACJ,QAAI,cAAc;AACd,eAAS;AACT,MAAAA,aAAY,MAAM,gDAAgD,MAAM,EAAE;AAAA,IAC9E,WAAW,QAAQ,QAAQ;AACvB,eAAS,QAAQ;AACjB,MAAAA,aAAY,MAAM,wCAAwC,MAAM,EAAE;AAAA,IACtE,OAAO;AACH,eAAS;AACT,MAAAA,aAAY,MAAM,qCAAqC,MAAM,EAAE;AAAA,IACnE;AAGA,QAAI,WAAW,QAAQ;AACvB,QAAI,OAAO,aAAa,YAAY,YAAY,KAAK,WAAW,GAAG;AAC/D,iBAAW;AACX,MAAAA,aAAY,MAAM,+CAA+C,QAAQ,EAAE;AAAA,IAC/E,OAAO;AACH,MAAAA,aAAY,MAAM,gCAAgC,QAAQ,EAAE;AAAA,IAChE;AAEA,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,WAAW,cAAc;AAC5C,UAAM,cAA0B;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,aAAa,MAAM,CAAC,CAAC;AAE7E,QAAI;AACA,MAAAA,aAAY,MAAM,6BAA6B,KAAK,UAAU,aAAa,MAAM,CAAC,CAAC;AACnF,YAAM,WAAW,MAAM,OAAO,KAAK,WAAW;AAC9C,iBAAW;AAAA,QACP,MAAM,wBAAwB,SAAS,MAAM,IAAI,SAAS,SAAS,OAAO,SAAS,OAAO;AAAA,oBAAuB,SAAS,MAAM;AAAA,QAChI,SAAS,EAAE,GAAG,SAAS;AAAA,MAC3B,CAAC;AACD,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,sBAAsB,MAAM,OAAO;AAGrD,UAAI;AACA,QAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AAAA,MAC3E,SAAS,GAAG;AACR,QAAAA,aAAY,MAAM,iEAAiE;AACnF,mBAAW,OAAO,OAAO;AACrB,cAAI;AACA,YAAAA,aAAY,MAAM,GAAG,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,UAC3C,SAASE,IAAG;AACR,YAAAF,aAAY,MAAM,GAAG,GAAG,gCAAgC;AAAA,UAC5D;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,eAAe,MAAM;AAEzB,UAAI,MAAM,QAAQ,SAAS,iBAAiB,GAAG;AAC3C,uBAAe,4BAA4B,YAAY,SAAS,OAAO,YAAY,OAAO;AAAA,MAC9F,WAAW,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AACrD,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,uBAAe;AAAA,MACnB;AAEA,iBAAW;AAAA,QACP,MAAM,gBAAgB,YAAY;AAAA,QAClC,SAAS;AAAA,UACL,OAAO;AAAA,UACP,WAAW,YAAY;AAAA,UACvB,SAAS,YAAY;AAAA,QACzB;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,YAA2B;AACxC,UAAM,aAAa,QAAQ,WAAW,iBAAiB;AACvD,WAAO,OAAO,eAAe,YAAY,WAAW,WAAW,IAAI;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,YAAY;AAAA,YACZ,aAAa;AAAA,YACb,QAAQ;AAAA,YACR,UAAU;AAAA,UACd;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,YAAY;AAAA,YACZ,aAAa;AAAA,YACb,QAAQ;AAAA,YACR,UAAU;AAAA,UACd;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,QAAQ,cAAc,mBAAmB,cAAc;AACrE;;;AGrfA;AAAA,EACI,kBAAAG;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AACP;AAAA,EACI;AAAA,EACA,eAAAC;AAAA,EACA,cAAAC;AAAA,EACA;AAAA,EACA,YAAAC;AAAA,OAEG;AAaA,IAAM,iBAAN,MAAqB;AAAA;AAAA,EAIxB,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EAHpC,eAAe;AAAA,EACf,oBAAoB;AAAA,EAIrC,MAAM,SAAS,QAAmD;AAC9D,IAAAC,aAAY,MAAM,kCAAkC,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAGnF,IAAAA,aAAY,MAAM,4BAA4B,OAAO,KAAK,EAAE;AAC5D,IAAAA,aAAY,MAAM,qBAAqB,OAAO,KAAK,KAAK,eAAe,MAAM,CAAC;AAG9E,QAAI,CAAC,KAAK,eAAe,OAAO,OAAO,KAAK,GAAG;AAC3C,MAAAA,aAAY,MAAM,UAAU,OAAO,KAAK,yCAAyC,OAAO,KAAK,KAAK,eAAe,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;AACrI,YAAM,IAAI,MAAM,UAAU,OAAO,KAAK,0CAA0C,OAAO,KAAK,KAAK,eAAe,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;AAAA,IACxI;AAIA,QAAI,YAA6B;AACjC,QAAI,OAAO,QAAQ,OAAO,OAAO,SAAS,YAAY,OAAO,KAAK,WAAW,IAAI,GAAG;AAChF,kBAAY,OAAO;AACnB,MAAAA,aAAY,MAAM,yBAAyB,SAAS,EAAE;AAAA,IAC1D,WAAW,OAAO,MAAM;AACpB,MAAAA,aAAY,MAAM,oCAAoC,OAAO,IAAI,EAAE;AAAA,IACvE;AAEA,UAAM,KAAK,2BAA2B,MAAM;AAC5C,IAAAA,aAAY,MAAM,qCAAqC,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAEtF,UAAM,cAAc,KAAK,eAAe,WAAW;AACnD,IAAAA,aAAY,MAAM,iBAAiB,WAAW,EAAE;AAEhD,IAAAA,aAAY,MAAM,uBAAuB,OAAO,KAAK,EAAE;AACvD,SAAK,eAAe,YAAY,OAAO,KAAK;AAE5C,UAAM,cAAc,KAAK,eAAe,OAAO,OAAO,KAAK,EAAE,eAAe;AAC5E,IAAAA,aAAY,MAAM,0BAA0B,OAAO,KAAK,KAAK,WAAW,EAAE;AAG1E,QAAI,CAAC,OAAO,OAAO;AACf,aAAO,QAAQ;AACf,MAAAA,aAAY,MAAM,uCAAuC,WAAW,EAAE;AAAA,IAC1E,WAAW,OAAO,MAAM,YAAY,MAAM,YAAY,YAAY,GAAG;AAEjE,aAAO,QAAQ;AACf,MAAAA,aAAY,MAAM,kDAAkD,WAAW,EAAE;AAAA,IACrF;AAEA,IAAAA,aAAY,MAAM,yBAAyB,OAAO,KAAK,EAAE;AAEzD,UAAM,OAAyB;AAAA,MAC3B,OAAO,OAAO;AAAA,MACd,QAAQ;AAAA,MACR,WAAW,OAAO;AAAA,MAClB,QAAQ;AAAA,MACR,OAAO,OAAO;AAAA,IAClB;AAEA,QAAI,CAAC,OAAO,SAAS,OAAO,SAAQ,UAAU,OAAO,UAAU,aAAa;AACxE,MAAAA,aAAY,MAAM,0BAA0B,WAAW;AAEvD,YAAM,UAA2D;AAAA,QAC7D,MAAM;AAAA,MACV;AACA,UAAI;AACJ,UAAI,CAAC,OAAO,QAAQ;AAEhB,cAAMC,gBAAe,KAAK,eAAe;AAAA,UACrC,OAAO;AAAA,QACX;AACA,cAAM,UAAU,MAAMA,cAAa,WAAW;AAAA,UAC1C,SAAS;AAAA,QACb,CAAC;AAED,gBAAQ,UAAU,KAAK,oBAAoB;AAC3C,gBAAQ,MAAM,KAAK;AACnB,gBAAQ,WAAW,KAAK;AAAA,MAC5B,OAAO;AACH,gBAAQC,YAAW,OAAO,MAAM;AAAA,MACpC;AAEA,WAAK,SAAS,YAAY,KAAK;AAC/B,WAAK,SAAS,MAAM,KAAK,eAAe;AAAA,QACpC,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,OAAO;AAEH,MAAAF,aAAY,MAAM,sBAAsB;AACxC,UAAI,eAAe,OAAO;AAC1B,MAAAA,aAAY,MAAM,oCAAoC,OAAO,KAAK,EAAE;AAIpE,UAAI,OAAO,UAAU,SAAS,OAAO,UAAU,OAAO;AAClD,QAAAA,aAAY,MAAM,kGAAkG;AAGpH,aAAK,QAAQ;AAGb,cAAM,UAA2D;AAAA,UAC7D,MAAM;AAAA,QACV;AACA,YAAIG;AACJ,YAAI,CAAC,OAAO,QAAQ;AAEhB,gBAAMF,gBAAe,KAAK,eAAe;AAAA,YACrC,OAAO;AAAA,UACX;AACA,gBAAM,UAAU,MAAMA,cAAa,WAAW;AAAA,YAC1C,SAAS;AAAA,UACb,CAAC;AAED,UAAAE,SAAQ,UAAU,KAAK,oBAAoB;AAC3C,kBAAQ,MAAM,KAAK;AACnB,kBAAQ,WAAW,KAAK;AAAA,QAC5B,OAAO;AACH,UAAAA,SAAQD,YAAW,OAAO,MAAM;AAAA,QACpC;AAEA,aAAK,SAAS,YAAYC,MAAK;AAC/B,aAAK,SAAS,MAAM,KAAK,eAAe;AAAA,UACpC,OAAO;AAAA,UACP,OAAO;AAAA,UACPA;AAAA,UACA;AAAA,QACJ;AAGA,QAAAH,aAAY,MAAM,mDAAmD;AACrE,eAAO;AAAA,MAEX,WAAW,CAAC,OAAO,MAAM,WAAW,IAAI,GAAG;AACvC,YAAI;AACA,UAAAA,aAAY,MAAM,uCAAuC,OAAO,KAAK,aAAa,OAAO,KAAK,EAAE;AAEhG,eAAK,eAAe,iBAAiB,OAAO,KAAK;AAEjD,yBAAe,MAAM,KAAK,eAAe;AAAA,YACrC,OAAO;AAAA,YACP,OAAO;AAAA,UACX;AAEA,UAAAA,aAAY,MAAM,2BAA2B,YAAY,QAAQ,OAAO,KAAK,EAAE;AAG/E,cAAI,CAAC,gBAAgB,CAAC,aAAa,WAAW,IAAI,GAAG;AACjD,YAAAA,aAAY,MAAM,8CAA8C,YAAY,EAAE;AAC9E,kBAAM,IAAI,MAAM,kCAAkC,OAAO,KAAK,qBAAqB;AAAA,UACvF;AAAA,QACJ,SAAS,OAAO;AACZ,UAAAA,aAAY,MAAM,qCAAqC,OAAO,KAAK,KAAK,KAAK;AAC7E,gBAAM,IAAI,MAAM,wBAAwB,OAAO,KAAK,aAAa,OAAO,KAAK,8DAA8D;AAAA,QAC/I;AAAA,MACJ,OAAO;AACH,QAAAA,aAAY,MAAM,iCAAiC,YAAY,EAAE;AAAA,MACrE;AAEA,MAAAA,aAAY,MAAM,2CAA2C,YAAY,EAAE;AAE3E,YAAMC,gBAAe,KAAK,eAAe;AAAA,QACrC,OAAO;AAAA,MACX;AACA,YAAM,WAAW,MAAMA,cAAa,aAAa;AAAA,QAC7C,SAAS;AAAA,QACT,KAAKG;AAAA,QACL,cAAc;AAAA,MAClB,CAAC;AAED,UAAI;AACJ,UAAI,CAAC,OAAO,QAAQ;AAChB,gBAAQ,MAAMH,cAAa,aAAa;AAAA,UACpC,SAAS;AAAA,UACT,KAAKG;AAAA,UACL,cAAc;AAAA,UACd,MAAM,CAAC,WAAW;AAAA,QACtB,CAAC;AAAA,MACL,OAAO;AACH,gBAAQ,WAAW,OAAO,QAAQ,QAAQ;AAAA,MAC9C;AAEA,WAAK,SAASC,aAAY,OAAO,QAAQ;AACzC,WAAK,SAAS,MAAM,KAAK,eAAe;AAAA,QACpC,OAAO;AAAA,QACP;AAAA,QACA,OAAO;AAAA,QACP;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,UAAU,KAAK,WAAW,MAAM;AACtC,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD;AAGA,UAAM,eAAe,KAAK,eAAe,gBAAgB,OAAO,KAAK;AACrE,UAAM,aAAa,0BAA0B;AAAA,MACzC,MAAM,KAAK;AAAA,IACf,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,2BAA2B,QAAuC;AACpE,QAAI,CAAC,OAAO,WAAW;AACnB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AACA,WAAO,YAAY,MAAM,KAAK,eAAe;AAAA,MACzC,OAAO;AAAA,IACX;AAEA,WAAO,OAAQ,UAAU,OAAO,OAAO,KAAM,OAAO,OAAO;AAC3D,IAAAL,aAAY,MAAM,eAAgB,OAAO,IAAI;AAAA,EAEjD;AACJ;AAEO,IAAM,iBAAiB;AAAA,EAC1B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,6BAA6B;AAC7C,IAAAA,aAAY,MAAM,oBAAoB,KAAK,UAAU,QAAQ,SAAS,MAAM,CAAC,CAAC;AAG9E,UAAM,aAAa,OAAO,QAAQ,QAAQ,SAAS,WAAW,QAAQ,QAAQ,KAAK,KAAK,IAAI;AAC5F,IAAAA,aAAY,MAAM,qBAAqB,UAAU,GAAG;AAGpD,UAAM,cAAc,WAAW,YAAY;AAG3C,UAAM,cAAc,YAAY,SAAS,KAAK,KAC1B,YAAY,SAAS,cAAc,KACnC,YAAY,SAAS,qBAAqB;AAG9D,QAAI,mBAAkC;AACtC,UAAM,gBAAgB;AACtB,UAAM,QAAQ,WAAW,MAAM,aAAa;AAE5C,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,YAAM,CAAC,GAAG,QAAQ,aAAa,SAAS,IAAI;AAC5C,yBAAmB,YAAY,YAAY;AAC3C,MAAAA,aAAY,MAAM,4CAA4C,MAAM,YAAY,gBAAgB,SAAS,SAAS,EAAE;AAAA,IACxH;AAEA,QAAI,aAAa;AACb,MAAAA,aAAY,MAAM,0CAA0C,UAAU,GAAG;AAAA,IAC7E;AAGA,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,2BAA2B,cAAc;AAG3D,QAAI,EAAE,QAAQ,QAAQ,WAAW,WAAW;AACxC,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS,EAAE,OAAO,uBAAuB;AAAA,MAC7C,CAAC;AACD,aAAO;AAAA,IACX;AAGA,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,QAAI;AACA,YAAM,aAAa,MAAM,kBAAkB;AAAA,QACvC;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AACA,MAAAA,aAAY,MAAM,gBAAgB,MAAM,UAAU;AAAA,IACtD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,MAAM,OAAO;AAAA,IACjE;AAGA,IAAAA,aAAY,MAAM,6BAA6B;AAC/C,UAAM,iBAAiB,QAAQ,WAAW,kBAAkB;AAC5D,UAAM,wBAAwB,QAAQ,WAAW,0BAA0B;AAC3E,IAAAA,aAAY,MAAM,qBAAqB,iBAAiB,QAAQ,SAAS,EAAE;AAC3E,IAAAA,aAAY,MAAM,6BAA6B,wBAAwB,QAAQ,SAAS,EAAE;AAG1F,UAAM,kBAAkBM,gBAAe;AAAA,MACnC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,IAAAR,aAAY,MAAM,+BAA+B,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC;AAGjF,QAAI,QAAQ,QAAQ,OAAO,YAAY,KAAK;AAC5C,IAAAA,aAAY,MAAM,oBAAoB,KAAK,EAAE;AAG7C,IAAAA,aAAY,MAAM,uBAAuB,QAAQ,KAAK;AACtD,IAAAA,aAAY,MAAM,wBAAwB,OAAO,KAAK,OAAO,CAAC;AAQ9D,QAAI;AAGJ,QAAI,kBAAkB;AAClB,cAAQ;AACR,MAAAA,aAAY,MAAM,+CAA+C,KAAK,EAAE;AAAA,IAC5E,WAES,QAAQ,OAAO;AACpB,cAAQ,QAAQ;AAChB,MAAAA,aAAY,MAAM,uCAAuC,KAAK,EAAE;AAAA,IACpE,WAES,aAAa;AAClB,cAAQ;AACR,MAAAA,aAAY,MAAM,iCAAiC;AAAA,IACvD,OAEK;AACD,cAAQ;AACR,MAAAA,aAAY,MAAM,mDAAmD;AAAA,IACzE;AAGA,QAAI,CAAC,OAAO;AACR,cAAQ;AACR,MAAAA,aAAY,MAAM,uDAAuD;AAAA,IAC7E;AAEA,IAAAA,aAAY,MAAM,0BAA0B,KAAK,EAAE;AAEnD,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,eAAe,cAAc;AAGhD,QAAI,YAA6B;AACjC,QAAI,QAAQ,QAAQ,OAAO,QAAQ,SAAS,UAAU;AAClD,UAAI,QAAQ,KAAK,WAAW,IAAI,KAAK,QAAQ,SAAS,MAAM;AACxD,oBAAY,QAAQ;AACpB,QAAAA,aAAY,MAAM,yBAAyB,SAAS,EAAE;AAAA,MAC1D,OAAO;AACH,QAAAA,aAAY,MAAM,iCAAiC,QAAQ,IAAI,YAAY;AAAA,MAC/E;AAAA,IACJ;AAEA,UAAM,eAA+B;AAAA,MACjC;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ;AAAA,MAChB,WAAW,QAAQ;AAAA,MACnB,MAAM;AAAA,IACV;AAEA,IAAAA,aAAY,MAAM,kCAAkC,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAEzF,QAAI;AACA,MAAAA,aAAY,MAAM,iCAAiC,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAExF,YAAM,eAAe,MAAM,OAAO,SAAS,YAAY;AACvD,iBAAW;AAAA,QACP,MAAM,4BAA4B,aAAa,MAAM,IAAI,aAAa,KAAK,OAAO,aAAa,SAAS;AAAA,oBAAuB,aAAa,MAAM;AAAA,QAClJ,SAAS,EAAE,GAAG,aAAa;AAAA,MAC/B,CAAC;AAED,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,0BAA0B,MAAM,OAAO;AAGzD,UAAI;AACA,QAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AAAA,MAC3E,SAAS,GAAG;AACR,QAAAA,aAAY,MAAM,iEAAiE;AACnF,mBAAW,OAAO,OAAO;AACrB,cAAI;AACA,YAAAA,aAAY,MAAM,GAAG,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,UAC3C,SAASS,IAAG;AACR,YAAAT,aAAY,MAAM,GAAG,GAAG,gCAAgC;AAAA,UAC5D;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,eAAe,MAAM;AAGzB,UAAI,MAAM,QAAQ,SAAS,WAAW,GAAG;AACrC,QAAAA,aAAY,MAAM,0BAA0B;AAE5C,YAAI,MAAM,QAAQ,SAAS,qCAAqC,KAC5D,MAAM,QAAQ,SAAS,sBAAsB,GAAG;AAEhD,gBAAM,aAAa,MAAM,QAAQ,MAAM,qCAAqC;AAC5E,gBAAM,aAAa,aAAa,WAAW,CAAC,IAAI,aAAa;AAE7D,yBAAe,6BAA6B,UAAU,QAAQ,aAAa,KAAK;AAAA;AAGhF,UAAAA,aAAY,MAAM,oBAAoB,UAAU,EAAE;AAClD,UAAAA,aAAY,MAAM,+BAA+B,aAAa,KAAK,EAAE;AAGrE,cAAI,eAAe,UAAU,eAAe,eAAe,CAAC,YAAY;AACpE,4BAAgB;AAAA,UACpB;AAAA,QACJ,WAAW,MAAM,QAAQ,SAAS,iBAAiB,KAAK,MAAM,QAAQ,SAAS,eAAe,GAAG;AAC7F,yBAAe,4BAA4B,aAAa,KAAK;AAAA;AAAA,QAEjE;AAAA,MACJ;AAGA,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,yBAAyB,GAAG;AAC1D,uBAAe;AAAA,MACnB;AAEA,iBAAW;AAAA,QACP,MAAM,oBAAoB,YAAY;AAAA,QACtC,SAAS,EAAE,OAAO,aAAa;AAAA,MACnC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,YAA2B;AACxC,UAAM,aAAa,QAAQ,WAAW,iBAAiB;AACvD,WAAO,OAAO,eAAe,YAAY,WAAW,WAAW,IAAI;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,YAAY,eAAe,kBAAkB,aAAa;AACxE;;;AC1hBA;AAAA,EACI,kBAAAU;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AACP,SAAS,cAAAC,aAAY,aAAa,cAAAC,aAAY,YAAAC,iBAAgB;;;ACwGvD,IAAM,sBAAsB;AAAA,EAC/B;AAAA,IACI,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACf;AACJ;AAEO,IAAM,sBAAsB;AAAA,EAC/B;AAAA,IACI,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC,EAAE,MAAM,UAAU,MAAM,WAAW,cAAc,UAAU,CAAC;AAAA,EACzE;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC,EAAE,MAAM,WAAW,MAAM,WAAW,cAAc,UAAU,CAAC;AAAA,EAC1E;AAAA,EACA,EAAE,MAAM,mBAAmB,MAAM,SAAS,QAAQ,CAAC,EAAE;AAAA,EACrD;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC,EAAE,MAAM,SAAS,MAAM,WAAW,cAAc,UAAU,CAAC;AAAA,EACxE;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC,EAAE,MAAM,WAAW,MAAM,WAAW,cAAc,UAAU,CAAC;AAAA,EAC1E;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC,EAAE,MAAM,SAAS,MAAM,WAAW,cAAc,UAAU,CAAC;AAAA,EACxE;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,IACX,WACI;AAAA,EACR;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,IACX,WACI;AAAA,EACR;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,IACX,WACI;AAAA,EACR;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,MACL;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ,CAAC;AAAA,IACT,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ;AAAA,QACI,MAAM;AAAA,QACN,MAAM;AAAA,QACN,cAAc;AAAA,MAClB;AAAA,IACJ;AAAA,IACA,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,EAAE,MAAM,YAAY,MAAM,WAAW,cAAc,UAAU;AAAA,IACjE;AAAA,IACA,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,EAAE,MAAM,YAAY,MAAM,WAAW,cAAc,UAAU;AAAA,MAC7D,EAAE,MAAM,WAAW,MAAM,WAAW,cAAc,UAAU;AAAA,MAC5D,EAAE,MAAM,gBAAgB,MAAM,UAAU,cAAc,SAAS;AAAA,MAC/D,EAAE,MAAM,cAAc,MAAM,SAAS,cAAc,QAAQ;AAAA,IAC/D;AAAA,IACA,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,IACT,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,EAAE,MAAM,cAAc,MAAM,WAAW,cAAc,UAAU;AAAA,IACnE;AAAA,IACA,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,EAAE,MAAM,cAAc,MAAM,WAAW,cAAc,UAAU;AAAA,MAC/D,EAAE,MAAM,gBAAgB,MAAM,UAAU,cAAc,SAAS;AAAA,MAC/D,EAAE,MAAM,cAAc,MAAM,SAAS,cAAc,QAAQ;AAAA,IAC/D;AAAA,IACA,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,EAAE,MAAM,YAAY,MAAM,WAAW,cAAc,UAAU;AAAA,MAC7D,EAAE,MAAM,OAAO,MAAM,WAAW,cAAc,UAAU;AAAA,MACxD,EAAE,MAAM,WAAW,MAAM,WAAW,cAAc,UAAU;AAAA,MAC5D,EAAE,MAAM,gBAAgB,MAAM,UAAU,cAAc,SAAS;AAAA,MAC/D,EAAE,MAAM,cAAc,MAAM,SAAS,cAAc,QAAQ;AAAA,IAC/D;AAAA,IACA,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,IACT,WAAW;AAAA,IACX,iBAAiB;AAAA,EACrB;AACJ;AAEO,IAAM,cAAc;AAAA,EACvB,EAAE,QAAQ,CAAC,GAAG,iBAAiB,cAAc,MAAM,cAAc;AAAA,EACjE;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,IACnE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,IACnE;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL,EAAE,cAAc,WAAW,MAAM,SAAS,MAAM,UAAU;AAAA,MAC1D,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU,CAAC;AAAA,IACnE,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,SAAS,MAAM,UAAU;AAAA,MAC1D,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,IAC7D;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,aAAa,MAAM,UAAU;AAAA,MAC9D,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,IACnE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU,CAAC;AAAA,IACtE,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,aAAa,MAAM,UAAU;AAAA,MAC9D,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAC/D,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAC/D,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,QAAQ,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1D,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,MAC/D,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,QAAQ,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1D,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,eAAe,MAAM,UAAU;AAAA,IACpE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,SAAS,MAAM,UAAU,CAAC;AAAA,IACpE,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,YAAY;AAAA,UACR;AAAA,YACI,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACV;AAAA,UACA;AAAA,YACI,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACV;AAAA,UACA;AAAA,YACI,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACV;AAAA,UACA;AAAA,YACI,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACV;AAAA,QACJ;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,IACnE;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,MAC7D,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,MAC7D,EAAE,cAAc,WAAW,MAAM,iBAAiB,MAAM,UAAU;AAAA,IACtE;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,IACnE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU,CAAC;AAAA,IACtE,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU,CAAC;AAAA,IACnE,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,SAAS,MAAM,UAAU;AAAA,MAC1D,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,IAC7D;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL,EAAE,cAAc,QAAQ,MAAM,gBAAgB,MAAM,OAAO;AAAA,MAC3D,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,YAAY;AAAA,UACR,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,UACzD;AAAA,YACI,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACV;AAAA,UACA;AAAA,YACI,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACV;AAAA,QACJ;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,MACzD,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,MACzD,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,QAAQ,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1D,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,MAC7D,EAAE,cAAc,WAAW,MAAM,UAAU,MAAM,UAAU;AAAA,MAC3D,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,MAC7D,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,MACzD,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,MAC5D,EAAE,cAAc,WAAW,MAAM,gBAAgB,MAAM,UAAU;AAAA,MACjE,EAAE,cAAc,WAAW,MAAM,cAAc,MAAM,UAAU;AAAA,IACnE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,QAAQ,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1D,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,gBAAgB,MAAM,UAAU;AAAA,MACjE,EAAE,cAAc,WAAW,MAAM,gBAAgB,MAAM,UAAU;AAAA,MACjE,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,MACzD,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAC/D,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,QAAQ,MAAM,UAAU;AAAA,MACzD,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,eAAe,MAAM,UAAU;AAAA,IACpE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU,CAAC;AAAA,IACtE,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,UAAU,MAAM,UAAU,CAAC;AAAA,IACrE,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU,CAAC;AAAA,IACtE,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,UAAU,MAAM,eAAe,MAAM,SAAS;AAAA,IAClE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,QAAQ,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1D,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL,EAAE,cAAc,WAAW,MAAM,SAAS,MAAM,UAAU;AAAA,MAC1D,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,aAAa,MAAM,UAAU;AAAA,MAC9D,EAAE,cAAc,WAAW,MAAM,WAAW,MAAM,UAAU;AAAA,IAChE;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAC/D,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,QAAQ,MAAM,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1D,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ,EAAE,cAAc,WAAW,MAAM,YAAY,MAAM,UAAU;AAAA,IACjE;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC,EAAE,cAAc,WAAW,MAAM,UAAU,MAAM,UAAU,CAAC;AAAA,IACrE,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA,EAAE,iBAAiB,WAAW,MAAM,UAAU;AAClD;;;ADz8EA,SAAS,6BAAgC,OAAqD;AAC1F,MAAI,UAAU,UAAU,UAAU,MAAM;AACpC,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAGO,IAAM,eAAN,MAAmB;AAAA,EAQtB,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EAPpC,oBACb;AAAA,EACa,oBACb;AAAA,EACa,mBACb;AAAA,EAIJ,MAAM,OAAO,QAA+C;AACxD,IAAAC,aAAY,MAAM,0CAA0C,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAG3F,UAAM,KAAK,2BAA2B,MAAM;AAC5C,IAAAA,aAAY,MAAM,oCAAoC,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAGrF,UAAM,cAAc,KAAK,eAAe,WAAW;AACnD,IAAAA,aAAY,MAAM,iBAAiB,WAAW,EAAE;AAChD,IAAAA,aAAY,MAAM,uBAAuB,OAAO,SAAS,EAAE;AAE3D,SAAK,eAAe,YAAY,OAAO,SAAS;AAChD,UAAM,eAAe,KAAK,eAAe,gBAAgB,OAAO,SAAS;AACzE,UAAM,eAAe,KAAK,eAAe,gBAAgB,OAAO,SAAS;AAGzE,UAAM,cAAc,KAAK,eAAe,OAAO,OAAO,SAAS,EAAE,eAAe;AAChF,IAAAA,aAAY,MAAM,0BAA0B,OAAO,SAAS,KAAK,WAAW,EAAE;AAG9E,UAAM,OAAuB;AAAA,MACzB,WAAW,OAAO;AAAA,MAClB,SAAS,OAAO;AAAA,MAChB,QAAQ;AAAA,MACR,WAAW,OAAO,aAAa;AAAA,MAC/B,QAAQ,OAAO;AAAA,MACf,WAAW,OAAO,aAAa;AAAA,MAC/B,SAAS,OAAO,WAAW;AAAA,IAC/B;AAEA,IAAAA,aAAY,MAAM,gCAAgC,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC;AAG/E,UAAM,UAAU,KAAK,eAAe,WAAW;AAC/C,UAAM,QAAQ,KAAK,eAAe,gBAAgB,OAAO,SAAS;AAClE,IAAAA,aAAY,MAAM,kBAAkB,QAAQ,OAAO,EAAE;AACrD,IAAAA,aAAY,MAAM,iBAAiB,MAAM,IAAI,SAAS,MAAM,EAAE,GAAG;AAGjE,UAAM,aAAa,CAAC,OAAO,aAAa,OAAO,cAAc;AAC7D,UAAM,oBAAoB,CAAC,OAAO,aAAa,OAAO,cAAc;AAEpE,IAAAA,aAAY,MAAM,gBAAgB,UAAU,EAAE;AAC9C,IAAAA,aAAY,MAAM,wBAAwB,iBAAiB,EAAE;AAG7D,QAAI;AACJ,QAAI,mBAAmB;AACnB,eAASC,YAAW,OAAO,MAAM;AACjC,MAAAD,aAAY,MAAM,wBAAwB,MAAM,SAAS,OAAO,MAAM,IAAI,WAAW,GAAG;AAAA,IAC5F,OAAO;AACH,MAAAA,aAAY,MAAM,+BAA+B,OAAO,SAAS,EAAE;AACnE,YAAM,WAAW,MAAM,aAAa,aAAa;AAAA,QAC7C,SAAS,OAAO;AAAA,QAChB,KAAKE;AAAA,QACL,cAAc;AAAA,MAClB,CAAC;AAED,eAASC,YAAW,OAAO,QAAQ,QAAQ;AAC3C,MAAAH,aAAY,MAAM,iBAAiB,MAAM,KAAK,OAAO,MAAM,gBAAgB,QAAQ,YAAY;AAAA,IACnG;AAEA,QAAI;AAEA,UAAI,OAAO,cAAc,SAAS,OAAO,YAAY,SAAS;AAC1D,QAAAA,aAAY,MAAM,sCAAsC;AACxD,QAAAA,aAAY,MAAM,6BAA6B,KAAK,iBAAiB,EAAE;AAGvE,cAAM,mBAAmB,YAAY;AAAA,UACjC,SAAS,KAAK;AAAA,UACd,KAAK;AAAA,UACL,QAAQ;AAAA,YACJ,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ,CAAC;AAGD,YAAI,CAAC,mBAAmB;AACpB,UAAAA,aAAY,MAAM,wCAAwC;AAC1D,gBAAM,YAAY,MAAM,KAAK,eAAe;AAAA,YACxC,OAAO;AAAA,YACP,OAAO;AAAA,YACP;AAAA,YACA,KAAK;AAAA,UACT;AACA,UAAAA,aAAY,MAAM,sBAAsB,SAAS,EAAE;AAEnD,cAAI,YAAY,QAAQ;AACpB,kBAAM,kBAAkB,SAAS;AACjC,YAAAA,aAAY,MAAM,iCAAiC,eAAe,EAAE;AAEpE,kBAAM,SAAS,MAAM,KAAK,eAAe;AAAA,cACrC,OAAO;AAAA,cACP,OAAO;AAAA,cACP,KAAK;AAAA,cACL;AAAA,YACJ;AACA,YAAAA,aAAY,MAAM,6CAA6C,MAAM,EAAE;AAEvE,kBAAM,aAAa,0BAA0B;AAAA,cACzC,MAAM;AAAA,YACV,CAAC;AACD,YAAAA,aAAY,MAAM,gCAAgC;AAAA,UACtD,OAAO;AACH,YAAAA,aAAY,MAAM,sCAAsC;AAAA,UAC5D;AAAA,QACJ;AAGA,YAAI,cAAc,mBAAmB;AACjC,UAAAA,aAAY,MAAM,kDAAkD;AACpE,gBAAM,OAAO,CAAC,GAAG,IAAI;AAErB,UAAAA,aAAY,MAAM,qCAAqC,MAAM,EAAE;AAC/D,gBAAM,iBAAiB,SAAS,WAAW,MAAM;AAAA,YAC7C,OAAO;AAAA,UACX,CAAC;AAED,UAAAA,aAAY,MAAM,kCAAkC;AACpD,eAAK,SAAS,MAAM,iBAAiB,MAAM,WAAW,MAAM;AAAA,YACxD;AAAA,YACA;AAAA,YACA,OAAO;AAAA,UACX,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE,WAAW,cAAc,CAAC,mBAAmB;AACzC,UAAAA,aAAY,MAAM,mDAAmD;AACrE,UAAAA,aAAY,MAAM,eAAe,OAAO,SAAS,eAAe,OAAO,OAAO,EAAE;AAEhF,gBAAM,OAAO;AAAA,YACT,OAAO;AAAA,YACP,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AAEA,UAAAA,aAAY,MAAM,yBAAyB;AAC3C,gBAAM,iBAAiB,SAAS,aAAa,MAAM;AAAA,YAC/C;AAAA,UACJ,CAAC;AAED,UAAAA,aAAY,MAAM,oCAAoC;AACtD,eAAK,SAAS,MAAM,iBAAiB,MAAM,aAAa,MAAM;AAAA,YAC1D;AAAA,YACA;AAAA,UACJ,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE,WAAW,CAAC,cAAc,mBAAmB;AACzC,UAAAA,aAAY,MAAM,kEAAkE;AACpF,UAAAA,aAAY,MAAM,sBAAsB,OAAO,SAAS,EAAE;AAE1D,gBAAM,OAAO,CAAC,OAAO,WAAY,GAAG,IAAI;AAExC,UAAAA,aAAY,MAAM,uCAAuC,MAAM,EAAE;AACjE,gBAAM,iBAAiB,SAAS,aAAa,MAAM;AAAA,YAC/C,OAAO;AAAA,UACX,CAAC;AAED,UAAAA,aAAY,MAAM,oCAAoC;AACtD,eAAK,SAAS,MAAM,iBAAiB,MAAM,aAAa,MAAM;AAAA,YAC1D;AAAA,YACA;AAAA,YACA,OAAO;AAAA,UACX,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE,OAAO;AACH,UAAAA,aAAY,MAAM,mEAAmE;AACrF,UAAAA,aAAY,MAAM,eAAe,OAAO,SAAS,eAAe,OAAO,OAAO,EAAE;AAChF,UAAAA,aAAY,MAAM,sBAAsB,OAAO,SAAS,EAAE;AAE1D,gBAAM,OAAO;AAAA,YACT,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AAEA,UAAAA,aAAY,MAAM,2BAA2B;AAC7C,gBAAM,iBAAiB,SAAS,eAAe,MAAM;AAAA,YACjD;AAAA,UACJ,CAAC;AAED,UAAAA,aAAY,MAAM,sCAAsC;AACxD,eAAK,SAAS,MAAM,iBAAiB,MAAM;AAAA,YACvC;AAAA,YACA;AAAA,cACI;AAAA,cACA;AAAA,YACJ;AAAA,UACJ;AACA,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE;AAAA,MACJ,WAES,OAAO,cAAc,WAAW,OAAO,YAAY,OAAO;AAC/D,QAAAA,aAAY,MAAM,sCAAsC;AACxD,QAAAA,aAAY,MAAM,6BAA6B,KAAK,iBAAiB,EAAE;AAGvE,cAAM,mBAAmB,YAAY;AAAA,UACjC,SAAS,KAAK;AAAA,UACd,KAAK;AAAA,UACL,QAAQ;AAAA,YACJ,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ,CAAC;AAGD,QAAAA,aAAY,MAAM,6CAA6C;AAC/D,cAAM,gBAAgB,MAAM,aAAa,aAAa;AAAA,UAClD,SAAS,KAAK;AAAA,UACd,KAAK;AAAA,UACL,cAAc;AAAA,QAClB,CAAC;AACD,QAAAA,aAAY,MAAM,mBAAmB,aAAa,EAAE;AAGpD,YAAI,CAAC,mBAAmB;AACpB,UAAAA,aAAY,MAAM,wCAAwC;AAC1D,gBAAM,YAAY,MAAM,KAAK,eAAe;AAAA,YACxC,OAAO;AAAA,YACP,OAAO;AAAA,YACP;AAAA,YACA,KAAK;AAAA,UACT;AACA,UAAAA,aAAY,MAAM,sBAAsB,SAAS,EAAE;AAEnD,cAAI,YAAY,QAAQ;AACpB,kBAAM,kBAAkB,SAAS;AACjC,YAAAA,aAAY,MAAM,iCAAiC,eAAe,EAAE;AAEpE,kBAAM,SAAS,MAAM,KAAK,eAAe;AAAA,cACrC,OAAO;AAAA,cACP,OAAO;AAAA,cACP,KAAK;AAAA,cACL;AAAA,YACJ;AACA,YAAAA,aAAY,MAAM,6CAA6C,MAAM,EAAE;AAEvE,kBAAM,aAAa,0BAA0B;AAAA,cACzC,MAAM;AAAA,YACV,CAAC;AACD,YAAAA,aAAY,MAAM,gCAAgC;AAAA,UACtD,OAAO;AACH,YAAAA,aAAY,MAAM,sCAAsC;AAAA,UAC5D;AAAA,QACJ;AAGA,YAAI,cAAc,mBAAmB;AACjC,UAAAA,aAAY,MAAM,sEAAsE;AAExF,gBAAM,OAAO,CAAC,KAAK,kBAAkB,QAAQ,GAAG,IAAI;AACpD,gBAAM,QAAQ,SAAS;AAEvB,UAAAA,aAAY,MAAM,mCAAmC,KAAK,2BAA2B;AACrF,gBAAM,iBAAiB,SAAS,SAAS,MAAM,EAAE,MAAM,CAAC;AAExD,UAAAA,aAAY,MAAM,gCAAgC;AAClD,eAAK,SAAS,MAAM,iBAAiB,MAAM,SAAS,MAAM;AAAA,YACtD;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE,WAAW,cAAc,CAAC,mBAAmB;AACzC,UAAAA,aAAY,MAAM,+CAA+C;AACjE,UAAAA,aAAY,MAAM,UAAU,OAAO,SAAS,EAAE;AAE9C,gBAAM,OAAO,CAAC,OAAO,WAAY,QAAQ,GAAG,IAAI;AAChD,gBAAM,QAAQ;AAEd,UAAAA,aAAY,MAAM,2CAA2C,KAAK,EAAE;AACpE,gBAAM,iBAAiB,SAAS,SAAS,MAAM;AAAA,YAC3C;AAAA,YACA;AAAA,UACJ,CAAC;AAED,UAAAA,aAAY,MAAM,gCAAgC;AAClD,eAAK,SAAS,MAAM,iBAAiB,MAAM,SAAS,MAAM;AAAA,YACtD;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE,WAAW,CAAC,cAAc,mBAAmB;AACzC,UAAAA,aAAY,MAAM,sFAAsF;AACxG,UAAAA,aAAY,MAAM,sBAAsB,OAAO,SAAS,EAAE;AAE1D,gBAAM,OAAO;AAAA,YACT,KAAK;AAAA,YACL,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AACA,gBAAM,QAAQ,SAAS;AAEvB,UAAAA,aAAY,MAAM,qCAAqC,KAAK,2BAA2B;AACvF,gBAAM,iBAAiB,SAAS,WAAW,MAAM,EAAE,MAAM,CAAC;AAE1D,UAAAA,aAAY,MAAM,kCAAkC;AACpD,eAAK,SAAS,MAAM,iBAAiB,MAAM,WAAW,MAAM;AAAA,YACxD;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE,OAAO;AACH,UAAAA,aAAY,MAAM,+DAA+D;AACjF,UAAAA,aAAY,MAAM,UAAU,OAAO,SAAS,EAAE;AAC9C,UAAAA,aAAY,MAAM,sBAAsB,OAAO,SAAS,EAAE;AAE1D,gBAAM,OAAO;AAAA,YACT,OAAO;AAAA,YACP,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AACA,gBAAM,QAAQ;AAEd,UAAAA,aAAY,MAAM,6CAA6C,KAAK,EAAE;AACtE,gBAAM,iBAAiB,SAAS,WAAW,MAAM;AAAA,YAC7C;AAAA,YACA;AAAA,UACJ,CAAC;AAED,UAAAA,aAAY,MAAM,kCAAkC;AACpD,eAAK,SAAS,MAAM,iBAAiB,MAAM,WAAW,MAAM;AAAA,YACxD;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AACD,UAAAA,aAAY,MAAM,oCAAoC,KAAK,MAAM,EAAE;AAAA,QACvE;AAAA,MACJ,OAAO;AACH,QAAAA,aAAY,MAAM,iCAAiC,OAAO,SAAS,OAAO,OAAO,OAAO,EAAE;AAC1F,cAAM,IAAI,MAAM,iCAAiC,OAAO,SAAS,OAAO,OAAO,OAAO,uCAAkC;AAAA,MAC5H;AAGA,UAAI,CAAC,KAAK,UAAU,KAAK,WAAW,MAAM;AACtC,QAAAA,aAAY,MAAM,gCAAgC;AAClD,cAAM,IAAI,MAAM,6BAA6B;AAAA,MACjD;AAGA,MAAAA,aAAY,MAAM,yCAAyC,KAAK,MAAM,EAAE;AACxE,YAAM,aAAa,0BAA0B;AAAA,QACzC,MAAM,KAAK;AAAA,MACf,CAAC;AACD,MAAAA,aAAY,MAAM,0BAA0B,KAAK,MAAM,EAAE;AAEzD,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,qCAAqC,KAAK;AAG5D,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,cAAM,IAAI,MAAM,gCAAgC,OAAO,MAAM,IAAI,KAAK,SAAS,8BAA8B;AAAA,MACjH,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD,WAAW,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AACrD,cAAM,IAAI,MAAM,kGAAkG;AAAA,MACtH;AAGA,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,2BAA2B,QAAsB;AACnD,IAAAA,aAAY,MAAM,6BAA6B,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAG9E,QAAI,CAAC,OAAO,WAAW;AACnB,MAAAA,aAAY,MAAM,wBAAwB;AAC1C,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACzD;AAEA,QAAI,CAAC,OAAO,SAAS;AACjB,MAAAA,aAAY,MAAM,sBAAsB;AACxC,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAGA,UAAM,mBAAmB;AAAA,MACrB,EAAE,MAAM,OAAO,IAAI,QAAQ;AAAA,MAC3B,EAAE,MAAM,SAAS,IAAI,MAAM;AAAA,IAC/B;AAEA,UAAM,cAAc,iBAAiB;AAAA,MACjC,YAAU,OAAO,SAAS,OAAO,aAAa,OAAO,OAAO,OAAO;AAAA,IACvE;AAEA,QAAI,CAAC,aAAa;AACd,MAAAA,aAAY,MAAM,iCAAiC,OAAO,SAAS,OAAO,OAAO,OAAO,EAAE;AAC1F,YAAM,IAAI,MAAM,2EAAsE;AAAA,IAC1F;AAGA,QAAI,CAAC,OAAO,QAAQ;AAChB,MAAAA,aAAY,MAAM,oBAAoB;AACtC,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACrD;AAEA,QAAI;AACA,YAAM,cAAc,WAAW,OAAO,MAAM;AAC5C,UAAI,MAAM,WAAW,KAAK,eAAe,GAAG;AACxC,QAAAA,aAAY,MAAM,mBAAmB,OAAO,MAAM,EAAE;AACpD,cAAM,IAAI,MAAM,mBAAmB,OAAO,MAAM,qCAAqC;AAAA,MACzF;AACA,MAAAA,aAAY,MAAM,6BAA6B,OAAO,MAAM,EAAE;AAAA,IAClE,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,2BAA2B,OAAO,MAAM,IAAI,KAAK;AACnE,YAAM,IAAI,MAAM,0BAA0B,OAAO,MAAM,kCAAkC;AAAA,IAC7F;AAGA,WAAO,YAAY,6BAA6B,OAAO,SAAS;AAChE,WAAO,UAAU,6BAA6B,OAAO,OAAO;AAG5D,WAAO,YAAY,6BAA6B,OAAO,SAAS;AAEhE,QAAI,CAAC,OAAO,WAAW;AACnB,aAAO,YAAY,KAAK,eAAe,WAAW;AAClD,MAAAA,aAAY,MAAM,sDAAsD,OAAO,SAAS,EAAE;AAAA,IAC9F,OAAO;AAEH,MAAAA,aAAY,MAAM,uBAAuB,OAAO,SAAS,EAAE;AAC3D,aAAO,YAAY,MAAM,KAAK,eAAe,cAAc,OAAO,SAAS;AAC3E,MAAAA,aAAY,MAAM,sBAAsB,OAAO,SAAS,EAAE;AAAA,IAC9D;AAGA,QAAI,OAAO,cAAc,SAAS,OAAO,YAAY,SAAS;AAC1D,UAAI,OAAO,aAAa,CAAC,OAAO,SAAS;AACrC,QAAAA,aAAY,MAAM,6CAA6C;AAC/D,cAAM,IAAI,MAAM,0EAA0E;AAAA,MAC9F;AAGA,UAAI,OAAO,aAAa,CAAC,OAAO,UAAU,WAAW,IAAI,GAAG;AACxD,QAAAA,aAAY,MAAM,qCAAqC,OAAO,SAAS,EAAE;AACzE,cAAM,IAAI,MAAM,iCAAiC,OAAO,SAAS,uBAAuB;AAAA,MAC5F;AAEA,UAAI,OAAO,WAAW,CAAC,OAAO,QAAQ,WAAW,IAAI,GAAG;AACpD,QAAAA,aAAY,MAAM,mCAAmC,OAAO,OAAO,EAAE;AACrE,cAAM,IAAI,MAAM,iCAAiC,OAAO,OAAO,uBAAuB;AAAA,MAC1F;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,qCAAqC;AAAA,EAC3D;AACJ;AAGO,IAAM,eAAe;AAAA,EACxB,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,2BAA2B;AAC3C,IAAAA,aAAY,MAAM,oBAAoB,KAAK,UAAU,QAAQ,SAAS,MAAM,CAAC,CAAC;AAG9E,UAAM,aAAa,OAAO,QAAQ,QAAQ,SAAS,WAAW,QAAQ,QAAQ,KAAK,KAAK,IAAI;AAC5F,IAAAA,aAAY,MAAM,qBAAqB,UAAU,GAAG;AAGpD,UAAM,cAAc,WAAW,YAAY;AAG3C,UAAM,eAAe;AACrB,UAAM,gBAAgB;AACtB,UAAM,iBAAiB;AAEvB,QAAI,kBAAiC;AACrC,QAAI,gBAA+B;AACnC,QAAI,eAA8B;AAClC,QAAI,cAA6B;AACjC,QAAI,kBAAiC;AAGrC,QAAI,QAAQ,WAAW,MAAM,YAAY;AACzC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,wBAAkB;AAClB,sBAAgB;AAChB,qBAAe,MAAM,CAAC;AACtB,oBAAc,MAAM,CAAC,EAAE,YAAY;AACnC,MAAAA,aAAY,MAAM,oDAAoD,YAAY,YAAY,WAAW,EAAE;AAAA,IAC/G,OAAO;AAEH,cAAQ,WAAW,MAAM,aAAa;AACtC,UAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,0BAAkB;AAClB,wBAAgB;AAChB,uBAAe,MAAM,CAAC;AACtB,sBAAc,MAAM,CAAC,EAAE,YAAY;AACnC,QAAAA,aAAY,MAAM,oDAAoD,YAAY,YAAY,WAAW,EAAE;AAAA,MAC/G;AAAA,IACJ;AAGA,YAAQ,WAAW,MAAM,cAAc;AACvC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,wBAAkB,MAAM,CAAC;AACzB,MAAAA,aAAY,MAAM,yCAAyC,eAAe,EAAE;AAAA,IAChF;AAGA,QAAI,CAAC,mBAAmB,CAAC,eAAe;AACpC,UAAI,YAAY,SAAS,cAAc,KACnC,YAAY,SAAS,kBAAkB,KACvC,YAAY,SAAS,WAAW,KAChC,YAAY,SAAS,kBAAkB,GAAG;AAC1C,0BAAkB;AAClB,wBAAgB;AAChB,QAAAA,aAAY,MAAM,+CAA+C;AAAA,MACrE,WAAW,YAAY,SAAS,cAAc,KACnC,YAAY,SAAS,kBAAkB,KACvC,YAAY,SAAS,WAAW,KAChC,YAAY,SAAS,iBAAiB,GAAG;AAChD,0BAAkB;AAClB,wBAAgB;AAChB,QAAAA,aAAY,MAAM,+CAA+C;AAAA,MACrE;AAAA,IACJ;AAGA,QAAI,CAAC,cAAc;AACf,YAAM,cAAc;AACpB,YAAM,cAAc,WAAW,MAAM,WAAW;AAChD,UAAI,eAAe,YAAY,UAAU,GAAG;AACxC,uBAAe,YAAY,CAAC;AAC5B,QAAAA,aAAY,MAAM,iCAAiC,YAAY,EAAE;AAAA,MACrE;AAAA,IACJ;AAGA,QAAI,CAAC,aAAa;AAEd,YAAM,aAAa;AACnB,YAAM,aAAa,YAAY,MAAM,UAAU;AAC/C,UAAI,cAAc,WAAW,UAAU,GAAG;AACtC,sBAAc,WAAW,CAAC,EAAE,YAAY;AACxC,QAAAA,aAAY,MAAM,gCAAgC,WAAW,EAAE;AAAA,MACnE;AAAA,IACJ;AAGA,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa,YAAY,SAAS,KAAK,KAAK,YAAY,SAAS,SAAS;AAAA,MAC1E,eAAe,YAAY,SAAS,OAAO,KAAK,YAAY,SAAS,QAAQ,KAAK,YAAY,SAAS,QAAQ;AAAA,MAC/G,WAAW,YAAY,SAAS,SAAS;AAAA,MACzC,YAAY,YAAY,SAAS,UAAU;AAAA,IAC/C;AAEA,IAAAA,aAAY,MAAM,2BAA2B,cAAc;AAG3D,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,QAAI;AACA,YAAM,aAAa,MAAM,kBAAkB,IAAI,SAAS,SAAS,YAAY;AAC7E,MAAAA,aAAY,MAAM,gBAAgB,MAAM,UAAU;AAAA,IACtD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,MAAM,OAAO;AAC7D,iBAAW;AAAA,QACP,MAAM,4BAA4B,MAAM,OAAO;AAAA,QAC/C,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,MACpC,CAAC;AACD,aAAO;AAAA,IACX;AAGA,UAAM,gBAAgBI,gBAAe;AAAA,MACjC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,IAAAN,aAAY,MAAM,6BAA6B,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC;AAO/E,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAGJ,QAAI,oBAAoB,SAAS,oBAAoB,SAAS;AAC1D,kBAAY;AACZ,MAAAA,aAAY,MAAM,oDAAoD,SAAS,EAAE;AAAA,IACrF,WAAW,QAAQ,WAAW;AAC1B,kBAAY,QAAQ;AACpB,MAAAA,aAAY,MAAM,4CAA4C,SAAS,EAAE;AAAA,IAC7E,OAAO;AACH,kBAAY;AACZ,MAAAA,aAAY,MAAM,yCAAyC,SAAS,EAAE;AAAA,IAC1E;AAGA,QAAI,kBAAkB,SAAS,kBAAkB,SAAS;AACtD,gBAAU;AACV,MAAAA,aAAY,MAAM,kDAAkD,OAAO,EAAE;AAAA,IACjF,WAAW,QAAQ,SAAS;AACxB,gBAAU,QAAQ;AAClB,MAAAA,aAAY,MAAM,0CAA0C,OAAO,EAAE;AAAA,IACzE,OAAO;AAEH,gBAAU,cAAc,QAAQ,UAAU;AAC1C,MAAAA,aAAY,MAAM,sDAAsD,OAAO,EAAE;AAAA,IACrF;AAGA,QAAI,cAAc;AACd,eAAS;AACT,MAAAA,aAAY,MAAM,gDAAgD,MAAM,EAAE;AAAA,IAC9E,WAAW,QAAQ,QAAQ;AACvB,eAAS,QAAQ;AACjB,MAAAA,aAAY,MAAM,wCAAwC,MAAM,EAAE;AAAA,IACtE,OAAO;AACH,eAAS;AACT,MAAAA,aAAY,MAAM,qCAAqC,MAAM,EAAE;AAAA,IACnE;AAGA,QAAI,eAAe,WAAW;AAE1B,UAAI,gBAAgB,SAAS,YAAY,WAAW,IAAI,GAAG;AACvD,oBAAY;AACZ,QAAAA,aAAY,MAAM,uDAAuD,SAAS,EAAE;AAAA,MACxF,OAAO;AACH,oBAAY;AACZ,QAAAA,aAAY,MAAM,uBAAuB,eAAe,KAAK,GAAG;AAAA,MACpE;AAAA,IACJ,WAAW,QAAQ,WAAW;AAC1B,kBAAY,QAAQ;AACpB,MAAAA,aAAY,MAAM,4CAA4C,SAAS,EAAE;AAAA,IAC7E;AAIA,QAAI,QAAQ,SAAS;AACjB,gBAAU,6BAA6B,QAAQ,OAAO;AACtD,UAAI,SAAS;AACT,QAAAA,aAAY,MAAM,0CAA0C,OAAO,EAAE;AAAA,MACzE,OAAO;AACH,QAAAA,aAAY,MAAM,iEAAiE;AAAA,MACvF;AAAA,IACJ;AAGA,QAAI,cAAc,SAAS,aAAa,CAAC,SAAS;AAC9C,MAAAA,aAAY,MAAM,oDAAoD;AACtE,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS,EAAE,OAAO,oCAAoC;AAAA,MAC1D,CAAC;AACD,aAAO;AAAA,IACX;AAGA,QAAI,mBAAmB,gBAAgB,WAAW,IAAI,GAAG;AACrD,kBAAY;AACZ,MAAAA,aAAY,MAAM,oDAAoD,SAAS,EAAE;AAAA,IACrF,WAAW,QAAQ,WAAW;AAC1B,kBAAY,6BAA6B,QAAQ,SAAS;AAC1D,UAAI,WAAW;AACX,QAAAA,aAAY,MAAM,4CAA4C,SAAS,EAAE;AAAA,MAC7E,OAAO;AACH,QAAAA,aAAY,MAAM,mEAAmE;AAAA,MACzF;AAAA,IACJ;AAGA,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,aAAa,cAAc;AAC9C,UAAM,eAA6B;AAAA,MAC/B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,yBAAyB,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAEhF,QAAI;AACA,MAAAA,aAAY,MAAM,+BAA+B,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AACtF,YAAM,aAAa,MAAM,OAAO,OAAO,YAAY;AAEnD,UAAI,cAAc,wBAAwB,WAAW,MAAM,IAAI,WAAW,SAAS,SAAS,WAAW,SAAS,OAAO,WAAW,OAAO;AACzI,UAAI,WAAW,aAAa,WAAW,cAAc,eAAe,WAAW,GAAG;AAC9E,uBAAe,gBAAgB,WAAW,SAAS;AAAA,MACvD;AACA,qBAAe;AAAA,oBAAuB,WAAW,MAAM;AAEvD,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS,EAAE,GAAG,WAAW;AAAA,MAC7B,CAAC;AAED,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,MAAM,OAAO;AAG7D,UAAI;AACA,QAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AAAA,MAC3E,SAAS,GAAG;AACR,QAAAA,aAAY,MAAM,iEAAiE;AACnF,mBAAW,OAAO,OAAO;AACrB,cAAI;AACA,YAAAA,aAAY,MAAM,GAAG,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,UAC3C,SAASO,IAAG;AACR,YAAAP,aAAY,MAAM,GAAG,GAAG,gCAAgC;AAAA,UAC5D;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,eAAe,MAAM;AAEzB,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,oCAAoC,GAAG;AACrE,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,8BAA8B,GAAG;AAC/D,uBAAe;AAAA,MACnB;AAEA,iBAAW;AAAA,QACP,MAAM,kBAAkB,YAAY;AAAA,QACpC,SAAS,EAAE,OAAO,aAAa;AAAA,MACnC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,YAA2B;AACxC,UAAM,aAAa,QAAQ,WAAW,iBAAiB;AACvD,WAAO,OAAO,eAAe,YAAY,WAAW,WAAW,IAAI;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,WAAW;AAAA,YACX,SAAS;AAAA,YACT,WAAW;AAAA,YACX,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,WAAW;AAAA,YACX,SAAS;AAAA,YACT,WAAW;AAAA,YACX,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,WAAW;AAAA,YACX,SAAS;AAAA,YACT,WAAW;AAAA,YACX,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,WAAW;AAAA,YACX,SAAS;AAAA,YACT,WAAW;AAAA,YACX,SAAS;AAAA,YACT,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,WAAW;AAAA,YACX,SAAS;AAAA,YACT,WAAW;AAAA,YACX,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,gBAAgB,WAAW,UAAU;AAC7D;;;AEp7BA;AAAA,EACI,kBAAAQ;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AACP,OAAOC,WAAU;AACjB,SAAiC,cAAAC,mBAAkB;;;ACXnD,SAAS,eAAAC,oBAAmB;AAC5B,OAAO,QAAQ;AACf,SAAS,qBAAqB;AAC9B,OAAO,UAAU;AACjB,SAAS,qBAAqB;AAC9B,OAAO,UAAU;AAEjB,IAAMC,WAAU,cAAc,YAAY,GAAG;AAC7C,IAAM,aAAa,cAAc,YAAY,GAAG;AAChD,IAAM,YAAY,KAAK,QAAQ,UAAU;AACzC,IAAM,UAAU,KAAK,QAAQ,WAAW,gCAAgC;AAExE,SAAS,kBAAkB,cAAsB;AAC7C,SAAO,GAAG,aAAa,cAAc,MAAM;AAC/C;AAEA,SAAS,YAAY,YAAoB;AACrC,MAAI;AACA,QAAI,WAAW,WAAW,gBAAgB,GAAG;AACzC,YAAM,UAAUA,SAAQ,QAAQ,UAAU;AAC1C,aAAO,EAAE,UAAU,GAAG,aAAa,SAAS,MAAM,EAAE;AAAA,IACxD;AAEA,UAAM,YAAY,KAAK,QAAQ,eAAe,UAAU;AACxD,QAAI,GAAG,WAAW,SAAS,GAAG;AAC1B,aAAO,EAAE,UAAU,GAAG,aAAa,WAAW,MAAM,EAAE;AAAA,IAC1D;AACA,WAAO,EAAE,OAAO,iBAAiB;AAAA,EACrC,QAAQ;AACJ,WAAO,EAAE,OAAO,mBAAmB,UAAU,GAAG;AAAA,EACpD;AACJ;AAEA,eAAsB,gBAAgB,kBAA0B;AAC5D,QAAM,eAAe,KAAK,KAAK,SAAS,GAAG,gBAAgB,MAAM;AACjE,QAAM,SAAS,kBAAkB,YAAY;AAE7C,QAAM,QAAQ;AAAA,IACV,UAAU;AAAA,IACV,SAAS;AAAA,MACL,CAAC,gBAAgB,GAAG;AAAA,QAChB,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,WAAW;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,iBAAiB;AAAA,QACb,KAAK;AAAA,UACD,KAAK,CAAC,GAAG;AAAA,QACb;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,EAAAD,aAAY,MAAM,uBAAuB;AAEzC,MAAI;AACA,UAAM,SAAS,KAAK;AAAA,MAChB,KAAK,QAAQ,KAAK,UAAU,KAAK,GAAG,EAAE,QAAQ,YAAY,CAAC;AAAA,IAC/D;AAEA,QAAI,OAAO,QAAQ;AACf,YAAM,WAAW,OAAO,OAAO;AAAA,QAC3B,CAAC,UAAU,MAAM,SAAS;AAAA,MAC9B;AACA,UAAI,UAAU;AACV,cAAM,IAAI;AAAA,UACN,uBAAuB,KAAK,UAAU,OAAO,QAAQ,MAAM,CAAC,CAAC;AAAA,QACjE;AAAA,MACJ;AACA,MAAAA,aAAY,KAAK,yBAAyB,OAAO,MAAM;AAAA,IAC3D;AAEA,UAAM,eAAe,KAAK,SAAS,kBAAkB,MAAM;AAC3D,UAAM,WAAW,OAAO,UAAU,gBAAgB,EAAE,YAAY;AAEhE,QAAI,CAAC,UAAU;AACX,YAAM,IAAI,MAAM,sCAAsC;AAAA,IAC1D;AAEA,IAAAA,aAAY,MAAM,gCAAgC;AAClD,WAAO;AAAA,MACH,KAAK,SAAS;AAAA,MACd,UAAU,SAAS,IAAI,SAAS;AAAA,IACpC;AAAA,EACJ,SAAS,OAAO;AACZ,IAAAA,aAAY,MAAM,uBAAuB,MAAM,OAAO;AACtD,UAAM;AAAA,EACV;AACJ;;;ADhEO,IAAM,eAAN,MAAmB;AAAA,EACtB,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EAErD,MAAM,gBAAgB,cAAsB,QAAgB;AACxD,IAAAE,aAAY,MAAM,gCAAgC,YAAY,EAAE;AAChE,UAAM,UAAU,GAAG,YAAY;AAC/B,UAAM,QAAQ;AAAA,MACV,UAAU;AAAA,MACV,SAAS;AAAA,QACL,CAAC,OAAO,GAAG;AAAA,UACP,SAAS;AAAA,QACb;AAAA,MACJ;AAAA,MACA,UAAU;AAAA,QACN,iBAAiB;AAAA,UACb,KAAK;AAAA,YACD,KAAK,CAAC,GAAG;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,IAAAA,aAAY,MAAM,kCAAkC;AAEpD,QAAI;AACA,YAAM,SAAS,KAAK,MAAMC,MAAK,QAAQ,KAAK,UAAU,KAAK,CAAC,CAAC;AAC7D,MAAAD,aAAY,MAAM,+CAA+C;AAGjE,UAAI,OAAO,QAAQ;AACf,cAAM,SAAS,OAAO;AACtB,cAAM,WAAW,OAAO,KAAK,CAAC,UAAU,MAAM,SAAS,OAAO;AAE9D,YAAI,UAAU;AACV,UAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AACxE,gBAAM,gBAAgB,OAAO,IAAI,OAAK,EAAE,oBAAoB,EAAE,OAAO,EAAE,KAAK,IAAI;AAChF,gBAAM,IAAI,MAAM,gCAAgC,aAAa,EAAE;AAAA,QACnE,OAAO;AAEH,UAAAA,aAAY,KAAK,yBAAyB,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAAA,QAC7E;AAAA,MACJ;AAEA,YAAM,WAAW,OAAO,UAAU,OAAO,EAAE,YAAY;AAEvD,UAAI,CAAC,UAAU;AACX,QAAAA,aAAY,MAAM,mCAAmC,YAAY,EAAE;AACnE,cAAM,IAAI,MAAM,mCAAmC,YAAY,EAAE;AAAA,MACrE;AAEA,MAAAA,aAAY,MAAM,YAAY,YAAY,wBAAwB;AAClE,aAAO;AAAA,QACH,KAAK,SAAS;AAAA,QACd,UAAU,SAAS,IAAI,SAAS;AAAA,MACpC;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,4BAA4B,YAAY,KAAK,KAAK;AACpE,YAAM,IAAI,MAAM,+BAA+B,MAAM,OAAO,EAAE;AAAA,IAClE;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,mBAAuC;AACrD,IAAAA,aAAY,MAAM,sCAAsC,KAAK,UAAU,mBAAmB,MAAM,CAAC,CAAC;AAGlG,UAAM,EAAE,MAAM,QAAQ,UAAU,aAAa,MAAM,IAAI;AAEvD,QAAI,CAAC,QAAQ,SAAS,IAAI;AACtB,MAAAA,aAAY,MAAM,wBAAwB;AAC1C,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AACA,QAAI,CAAC,UAAU,WAAW,IAAI;AAC1B,MAAAA,aAAY,MAAM,0BAA0B;AAC5C,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC9C;AACA,QAAI,CAAC,YAAY,aAAa,GAAG;AAC7B,MAAAA,aAAY,MAAM,4BAA4B;AAC9C,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAChD;AACA,QAAI,CAAC,eAAe,gBAAgB,IAAI;AACpC,MAAAA,aAAY,MAAM,gCAAgC;AAClD,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AAEA,IAAAA,aAAY,MAAM,0BAA0B,IAAI,KAAK,MAAM,UAAU,QAAQ,8BAA8B,WAAW,EAAE;AAExH,QAAI;AACA,MAAAA,aAAY,MAAM,2BAA2B,WAAW,gBAAgB,QAAQ,WAAW;AAC3F,YAAM,0BAA0BE,YAAW,aAAa,QAAQ;AAChE,MAAAF,aAAY,MAAM,wBAAwB,wBAAwB,SAAS,CAAC,EAAE;AAE9E,YAAM,OAAO,CAAC,MAAM,QAAQ,UAAU,uBAAuB;AAC7D,MAAAA,aAAY,MAAM,mCAAmC,IAAI;AAEzD,MAAAA,aAAY,MAAM,qCAAqC,KAAK,KAAK;AACjE,YAAM,kBAAkB,MAAM,KAAK;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,UAAI,CAAC,iBAAiB;AAClB,QAAAA,aAAY,MAAM,uDAAuD;AACzE,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACrD;AAEA,MAAAA,aAAY,MAAM,oDAAoD,eAAe,EAAE;AACvF,aAAO;AAAA,QACH,SAAS;AAAA,MACb;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,wBAAwB,MAAM,OAAO;AACvD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa,iBAAsC;AACrD,IAAAA,aAAY,MAAM,qCAAqC,KAAK,UAAU,iBAAiB,MAAM,CAAC,CAAC;AAG/F,UAAM,EAAE,SAAS,MAAM,QAAQ,MAAM,IAAI;AAEzC,QAAI,CAAC,QAAQ,SAAS,IAAI;AACtB,MAAAA,aAAY,MAAM,sBAAsB;AACxC,YAAM,IAAI,MAAM,sBAAsB;AAAA,IAC1C;AACA,QAAI,CAAC,UAAU,WAAW,IAAI;AAC1B,MAAAA,aAAY,MAAM,wBAAwB;AAC1C,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AACA,QAAI,CAAC,WAAW,YAAY,IAAI;AAC5B,MAAAA,aAAY,MAAM,yBAAyB;AAC3C,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC7C;AAEA,IAAAA,aAAY,MAAM,yBAAyB,IAAI,KAAK,MAAM,kBAAkB,OAAO,EAAE;AAErF,QAAI;AACA,YAAM,OAAO,CAAC,MAAM,QAAQ,OAAO;AACnC,MAAAA,aAAY,MAAM,mCAAmC,IAAI;AAEzD,MAAAA,aAAY,MAAM,sCAAsC,KAAK,KAAK;AAClE,YAAM,kBAAkB,MAAM,KAAK;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,UAAI,CAAC,iBAAiB;AAClB,QAAAA,aAAY,MAAM,wDAAwD;AAC1E,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACtD;AAEA,MAAAA,aAAY,MAAM,qDAAqD,eAAe,EAAE;AACxF,aAAO;AAAA,QACH,SAAS;AAAA,MACb;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,yBAAyB,MAAM,OAAO;AACxD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,cAAc,kBAAwC;AACxD,IAAAA,aAAY,MAAM,wCAAwC,KAAK,UAAU,kBAAkB,MAAM,CAAC,CAAC;AAGnG,UAAM,EAAE,SAAS,MAAM,MAAM,IAAI;AAEjC,QAAI,CAAC,QAAQ,SAAS,IAAI;AACtB,MAAAA,aAAY,MAAM,wBAAwB;AAC1C,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AACA,QAAI,CAAC,WAAW,YAAY,IAAI;AAC5B,MAAAA,aAAY,MAAM,2BAA2B;AAC7C,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC/C;AAEA,IAAAA,aAAY,MAAM,4BAA4B,IAAI,iBAAiB,OAAO,EAAE;AAE5E,QAAI;AACA,YAAM,OAAO,CAAC,MAAM,OAAO;AAC3B,MAAAA,aAAY,MAAM,mCAAmC,IAAI;AAEzD,MAAAA,aAAY,MAAM,uCAAuC,KAAK,KAAK;AACnE,YAAM,kBAAkB,MAAM,KAAK;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,UAAI,CAAC,iBAAiB;AAClB,QAAAA,aAAY,MAAM,yDAAyD;AAC3E,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACvD;AAEA,MAAAA,aAAY,MAAM,sDAAsD,eAAe,EAAE;AACzF,aAAO;AAAA,QACH,SAAS;AAAA,MACb;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,0BAA0B,MAAM,OAAO;AACzD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,eACF,OACA,cACA,MACmC;AACnC,IAAAA,aAAY,MAAM,4CAA4C,YAAY,aAAa,KAAK,EAAE;AAE9F,QAAI;AACA,MAAAA,aAAY,MAAM,aAAa,YAAY,KAAK;AAChD,YAAM,EAAE,KAAK,SAAS,IAAI,MAAM,gBAAgB,YAAY;AAE5D,UAAI,CAAC,KAAK;AACN,QAAAA,aAAY,MAAM,oBAAoB,YAAY,EAAE;AACpD,cAAM,IAAI,MAAM,wCAAwC,YAAY,EAAE;AAAA,MAC1E;AAEA,UAAI,CAAC,UAAU;AACX,QAAAA,aAAY,MAAM,yBAAyB,YAAY,EAAE;AACzD,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACzD;AAEA,MAAAA,aAAY,MAAM,4CAA4C,SAAS,MAAM,EAAE;AAC/E,MAAAA,aAAY,MAAM,sBAAsB,KAAK,iBAAiB;AAC9D,WAAK,eAAe,YAAY,KAAK;AAErC,YAAM,cAAc,KAAK,eAAe,gBAAgB,KAAK;AAC7D,MAAAA,aAAY,MAAM,uBAAuB,YAAY,IAAI,SAAS,YAAY,EAAE,GAAG;AAEnF,YAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,YAAM,UAAU,KAAK,eAAe,WAAW;AAC/C,MAAAA,aAAY,MAAM,2BAA2B,QAAQ,OAAO,EAAE;AAG9D,YAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAE9D,MAAAA,aAAY,MAAM,sCAAsC;AACxD,YAAM,OAAO,MAAM,aAAa,eAAe;AAAA,QAC3C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO;AAAA,MACX,CAAC;AAED,MAAAA,aAAY,MAAM,+CAA+C,IAAI,EAAE;AACvE,MAAAA,aAAY,MAAM,oDAAoD;AAEtE,YAAM,UAAU,MAAM,aAAa,0BAA0B;AAAA,QACzD;AAAA,MACJ,CAAC;AAED,UAAI,QAAQ,WAAW,WAAW;AAC9B,QAAAA,aAAY,MAAM,8CAA8C,QAAQ,eAAe,EAAE;AAAA,MAC7F,OAAO;AACH,QAAAA,aAAY,MAAM,8CAA8C,QAAQ,MAAM,EAAE;AAChF,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC5D;AAEA,aAAO,QAAQ;AAAA,IACnB,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,4BAA4B,YAAY,KAAK,KAAK;AAGpE,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,cAAM,IAAI,MAAM,uEAAuE;AAAA,MAC3F,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAEA,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAEO,IAAM,eAAe;AAAA,EACxB,MAAM;AAAA,EACN,aACI;AAAA,EACJ,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,2BAA2B;AAC3C,IAAAA,aAAY,MAAM,oBAAoB,KAAK,UAAU,QAAQ,SAAS,MAAM,CAAC,CAAC;AAG9E,UAAM,aAAa,OAAO,QAAQ,QAAQ,SAAS,WAAW,QAAQ,QAAQ,KAAK,KAAK,IAAI;AAC5F,IAAAA,aAAY,MAAM,qBAAqB,UAAU,GAAG;AAGpD,UAAM,cAAc,WAAW,YAAY;AAG3C,UAAM,aAAa;AACnB,UAAM,cAAc;AACpB,UAAM,eAAe;AAErB,UAAM,cAAc;AACpB,UAAM,gBAAgB;AACtB,UAAM,mBAAmB;AACzB,UAAM,eAAe;AAGrB,QAAI,qBAAoC;AACxC,QAAI,aAA4B;AAChC,QAAI,eAA8B;AAClC,QAAI,iBAAgC;AACpC,QAAI,oBAAmC;AACvC,QAAI,gBAA+B;AACnC,QAAI,cAAqC;AAGzC,QAAI,QAAQ,WAAW,MAAM,UAAU;AACvC,QAAI,OAAO;AACP,2BAAqB;AACrB,mBAAa,MAAM,CAAC,KAAK,MAAM,CAAC,KAAK;AACrC,MAAAA,aAAY,MAAM,8CAA8C,UAAU,EAAE;AAAA,IAChF;AAGA,QAAI,CAAC,oBAAoB;AACrB,cAAQ,WAAW,MAAM,WAAW;AACpC,UAAI,OAAO;AACP,6BAAqB;AACrB,qBAAa,MAAM,CAAC,KAAK,MAAM,CAAC,KAAK;AACrC,QAAAA,aAAY,MAAM,6CAA6C,UAAU,EAAE;AAAA,MAC/E;AAAA,IACJ;AAGA,QAAI,CAAC,oBAAoB;AACrB,cAAQ,WAAW,MAAM,YAAY;AACrC,UAAI,OAAO;AACP,6BAAqB;AACrB,qBAAa,MAAM,CAAC,KAAK,MAAM,CAAC,KAAK;AACrC,QAAAA,aAAY,MAAM,gDAAgD,UAAU,EAAE;AAAA,MAClF;AAAA,IACJ;AAGA,QAAI,CAAC,oBAAoB;AACrB,UAAI,YAAY,SAAS,OAAO,KAAK,YAAY,SAAS,gBAAgB,GAAG;AACzE,6BAAqB;AACrB,QAAAA,aAAY,MAAM,+CAA+C;AAAA,MACrE,WAAW,YAAY,SAAS,QAAQ,KAAK,YAAY,SAAS,KAAK,KAAK,YAAY,SAAS,cAAc,GAAG;AAC9G,6BAAqB;AACrB,QAAAA,aAAY,MAAM,gDAAgD;AAAA,MACtE,WAAW,YAAY,SAAS,SAAS,KAAK,YAAY,SAAS,OAAO,KAAK,YAAY,SAAS,MAAM,GAAG;AACzG,6BAAqB;AACrB,QAAAA,aAAY,MAAM,iDAAiD;AAAA,MACvE;AAAA,IACJ;AAGA,YAAQ,WAAW,MAAM,WAAW;AACpC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,qBAAe,MAAM,CAAC,EAAE,KAAK;AAC7B,MAAAA,aAAY,MAAM,2BAA2B,YAAY,EAAE;AAAA,IAC/D;AAGA,YAAQ,WAAW,MAAM,aAAa;AACtC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,uBAAiB,SAAS,MAAM,CAAC,GAAG,EAAE;AACtC,MAAAA,aAAY,MAAM,6BAA6B,cAAc,EAAE;AAAA,IACnE;AAGA,YAAQ,WAAW,MAAM,gBAAgB;AACzC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,0BAAoB,MAAM,CAAC,EAAE,KAAK;AAElC,UAAI,kBAAkB,SAAS,GAAG,KAAK,kBAAkB,SAAS,GAAG,GAAG;AACpE,6BAAqB,WAAW,iBAAiB,IAAI,KAAM,SAAS;AAAA,MACxE,WAAW,kBAAkB,SAAS,GAAG,KAAK,kBAAkB,SAAS,GAAG,GAAG;AAC3E,6BAAqB,WAAW,iBAAiB,IAAI,KAAS,SAAS;AAAA,MAC3E,WAAW,kBAAkB,SAAS,GAAG,KAAK,kBAAkB,SAAS,GAAG,GAAG;AAC3E,6BAAqB,WAAW,iBAAiB,IAAI,KAAY,SAAS;AAAA,MAC9E,WAAW,kBAAkB,SAAS,GAAG,KAAK,kBAAkB,SAAS,GAAG,GAAG;AAC3E,6BAAqB,WAAW,iBAAiB,IAAI,MAAe,SAAS;AAAA,MACjF;AACA,MAAAA,aAAY,MAAM,iCAAiC,iBAAiB,EAAE;AAAA,IAC1E;AAGA,YAAQ,WAAW,MAAM,YAAY;AACrC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,sBAAgB,MAAM,CAAC,EAAE,KAAK;AAC9B,MAAAA,aAAY,MAAM,4BAA4B,aAAa,EAAE;AAAA,IACjE;AAGA,QAAI,YAAY,SAAS,KAAK,KAAK,YAAY,SAAS,SAAS,GAAG;AAChE,oBAAc;AACd,MAAAA,aAAY,MAAM,gCAAgC;AAAA,IACtD,WAAW,YAAY,SAAS,OAAO,KAAK,YAAY,SAAS,QAAQ,GAAG;AACxE,oBAAc;AACd,MAAAA,aAAY,MAAM,kCAAkC;AAAA,IACxD;AAGA,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,2BAA2B,cAAc;AAG3D,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,QAAI;AACA,MAAAA,aAAY,MAAM,wBAAwB;AAC1C,YAAM,aAAa,MAAM,kBAAkB,IAAI,SAAS,SAAS,YAAY;AAC7E,MAAAA,aAAY,MAAM,0BAA0B,MAAM,UAAU;AAAA,IAChE,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,MAAM,OAAO;AAC7D,iBAAW;AAAA,QACP,MAAM,4BAA4B,MAAM,OAAO;AAAA,QAC/C,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,MACpC,CAAC;AACD,aAAO;AAAA,IACX;AAGA,IAAAA,aAAY,MAAM,wCAAwC;AAC1D,UAAM,UAAUG,gBAAe;AAAA,MAC3B,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AAED,IAAAH,aAAY,MAAM,6CAA6C;AAC/D,UAAM,UAAU,MAAMI,0BAAyB;AAAA,MAC3C;AAAA,MACA;AAAA,MACA,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,IAAAL,aAAY,MAAM,+BAA+B,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC;AAQjF,QAAI;AACJ,QAAI,oBAAoB;AACpB,qBAAe;AACf,MAAAA,aAAY,MAAM,uDAAuD,YAAY,EAAE;AAAA,IAC3F,WAAW,QAAQ,cAAc;AAC7B,qBAAe,QAAQ,aAAa,YAAY;AAChD,MAAAA,aAAY,MAAM,+CAA+C,YAAY,EAAE;AAAA,IACnF,OAAO;AACH,qBAAe;AACf,MAAAA,aAAY,MAAM,4CAA4C,YAAY,EAAE;AAAA,IAChF;AAGA,QAAI,QAAwB;AAC5B,QAAI,aAAa;AACb,cAAQ;AACR,MAAAA,aAAY,MAAM,+CAA+C,KAAK,EAAE;AAAA,IAC5E,WAAW,QAAQ,OAAO;AACtB,cAAQ,QAAQ;AAChB,MAAAA,aAAY,MAAM,uCAAuC,KAAK,EAAE;AAAA,IACpE,OAAO;AACH,MAAAA,aAAY,MAAM,oCAAoC,KAAK,EAAE;AAAA,IACjE;AAGA,IAAAA,aAAY,MAAM,iCAAiC;AACnD,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,aAAa,cAAc;AAE9C,QAAI;AACA,MAAAA,aAAY,MAAM,mCAAmC,aAAa,YAAY,CAAC,gBAAgB,KAAK,KAAK;AACzG,UAAI;AAEJ,cAAQ,aAAa,YAAY,GAAG;AAAA,QAChC,KAAK;AAED,gBAAM,OAAO,cAAc,QAAQ,QAAQ;AAC3C,gBAAM,SAAS,gBAAgB,QAAQ,UAAU;AACjD,gBAAM,WAAW,kBAAkB,QAAQ,YAAY;AACvD,gBAAM,cAAc,qBAAqB,QAAQ,eAAe;AAEhE,UAAAA,aAAY,MAAM,qCAAqC,IAAI,YAAY,MAAM,cAAc,QAAQ,iBAAiB,WAAW,EAAE;AAEjI,mBAAS,MAAM,OAAO,YAAY;AAAA,YAC9B;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AACD;AAAA,QAEJ,KAAK;AAED,gBAAM,UAAU,cAAc,QAAQ,QAAQ;AAC9C,gBAAM,YAAY,gBAAgB,QAAQ,UAAU;AACpD,gBAAM,aAAa,iBAAiB,QAAQ,WAAW;AAEvD,UAAAA,aAAY,MAAM,sCAAsC,OAAO,YAAY,SAAS,aAAa,UAAU,EAAE;AAE7G,mBAAS,MAAM,OAAO,aAAa;AAAA,YAC/B;AAAA,YACA,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,SAAS;AAAA,UACb,CAAC;AACD;AAAA,QAEJ,KAAK;AAED,gBAAM,YAAY,cAAc,QAAQ,QAAQ;AAChD,gBAAM,eAAe,iBAAiB,QAAQ,WAAW;AAEzD,UAAAA,aAAY,MAAM,uCAAuC,SAAS,aAAa,YAAY,EAAE;AAE7F,mBAAS,MAAM,OAAO,cAAc;AAAA,YAChC;AAAA,YACA,MAAM;AAAA,YACN,SAAS;AAAA,UACb,CAAC;AACD;AAAA,QAEJ;AACI,UAAAA,aAAY,MAAM,8BAA8B,YAAY,EAAE;AAC9D,gBAAM,IAAI,MAAM,8BAA8B,YAAY,+CAA+C;AAAA,MACjH;AAEA,UAAI,UAAU,OAAO,SAAS;AAC1B,QAAAA,aAAY,MAAM,8CAA8C,OAAO,OAAO,EAAE;AAGhF,cAAM,mBAAmB,aAAa,YAAY;AAClD,cAAM,YAAY,UAAU,QAAQ,wBAAwB;AAE5D,mBAAW;AAAA,UACP,MAAM,yBAAyB,gBAAgB,gBAAgB,SAAS,gBAAgB,OAAO,OAAO;AAAA,UACtG,SAAS;AAAA,YACL,GAAG;AAAA,YACH;AAAA,YACA;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,QAAAA,aAAY,MAAM,kDAAkD;AACpE,mBAAW;AAAA,UACP,MAAM;AAAA,UACN,SAAS,EAAE,OAAO,+BAA+B;AAAA,QACrD,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,qCAAqC,MAAM,OAAO;AAGpE,UAAI;AACA,QAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AAAA,MAC3E,SAAS,GAAG;AACR,QAAAA,aAAY,MAAM,iEAAiE;AACnF,mBAAW,OAAO,OAAO;AACrB,cAAI;AACA,YAAAA,aAAY,MAAM,GAAG,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,UAC3C,SAASM,IAAG;AACR,YAAAN,aAAY,MAAM,GAAG,GAAG,gCAAgC;AAAA,UAC5D;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,eAAe,MAAM;AAEzB,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AACrD,uBAAe;AAAA,MACnB;AAEA,iBAAW;AAAA,QACP,MAAM,sBAAsB,YAAY;AAAA,QACxC,SAAS;AAAA,UACL,OAAO;AAAA,UACP;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,aAA4B;AACzC,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;AE1qBA,IAAI;AAAA,CACH,SAAUO,OAAM;AACb,EAAAA,MAAK,cAAc,CAAC,QAAQ;AAC5B,WAAS,SAAS,MAAM;AAAA,EAAE;AAC1B,EAAAA,MAAK,WAAW;AAChB,WAAS,YAAY,IAAI;AACrB,UAAM,IAAI,MAAM;AAAA,EACpB;AACA,EAAAA,MAAK,cAAc;AACnB,EAAAA,MAAK,cAAc,CAAC,UAAU;AAC1B,UAAM,MAAM,CAAC;AACb,eAAW,QAAQ,OAAO;AACtB,UAAI,IAAI,IAAI;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AACA,EAAAA,MAAK,qBAAqB,CAAC,QAAQ;AAC/B,UAAM,YAAYA,MAAK,WAAW,GAAG,EAAE,OAAO,CAAC,MAAM,OAAO,IAAI,IAAI,CAAC,CAAC,MAAM,QAAQ;AACpF,UAAM,WAAW,CAAC;AAClB,eAAW,KAAK,WAAW;AACvB,eAAS,CAAC,IAAI,IAAI,CAAC;AAAA,IACvB;AACA,WAAOA,MAAK,aAAa,QAAQ;AAAA,EACrC;AACA,EAAAA,MAAK,eAAe,CAAC,QAAQ;AACzB,WAAOA,MAAK,WAAW,GAAG,EAAE,IAAI,SAAU,GAAG;AACzC,aAAO,IAAI,CAAC;AAAA,IAChB,CAAC;AAAA,EACL;AACA,EAAAA,MAAK,aAAa,OAAO,OAAO,SAAS,aACnC,CAAC,QAAQ,OAAO,KAAK,GAAG,IACxB,CAAC,WAAW;AACV,UAAM,OAAO,CAAC;AACd,eAAW,OAAO,QAAQ;AACtB,UAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,GAAG,GAAG;AACnD,aAAK,KAAK,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ,EAAAA,MAAK,OAAO,CAAC,KAAK,YAAY;AAC1B,eAAW,QAAQ,KAAK;AACpB,UAAI,QAAQ,IAAI;AACZ,eAAO;AAAA,IACf;AACA,WAAO;AAAA,EACX;AACA,EAAAA,MAAK,YAAY,OAAO,OAAO,cAAc,aACvC,CAAC,QAAQ,OAAO,UAAU,GAAG,IAC7B,CAAC,QAAQ,OAAO,QAAQ,YAAY,SAAS,GAAG,KAAK,KAAK,MAAM,GAAG,MAAM;AAC/E,WAAS,WAAW,OAAO,YAAY,OAAO;AAC1C,WAAO,MACF,IAAI,CAAC,QAAS,OAAO,QAAQ,WAAW,IAAI,GAAG,MAAM,GAAI,EACzD,KAAK,SAAS;AAAA,EACvB;AACA,EAAAA,MAAK,aAAa;AAClB,EAAAA,MAAK,wBAAwB,CAAC,GAAG,UAAU;AACvC,QAAI,OAAO,UAAU,UAAU;AAC3B,aAAO,MAAM,SAAS;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AACJ,GAAG,SAAS,OAAO,CAAC,EAAE;AACtB,IAAI;AAAA,CACH,SAAUC,aAAY;AACnB,EAAAA,YAAW,cAAc,CAAC,OAAO,WAAW;AACxC,WAAO;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA;AAAA,IACP;AAAA,EACJ;AACJ,GAAG,eAAe,aAAa,CAAC,EAAE;AAClC,IAAM,gBAAgB,KAAK,YAAY;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AACD,IAAM,gBAAgB,CAAC,SAAS;AAC5B,QAAM,IAAI,OAAO;AACjB,UAAQ,GAAG;AAAA,IACP,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,MAAM,IAAI,IAAI,cAAc,MAAM,cAAc;AAAA,IAC3D,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,UAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,eAAO,cAAc;AAAA,MACzB;AACA,UAAI,SAAS,MAAM;AACf,eAAO,cAAc;AAAA,MACzB;AACA,UAAI,KAAK,QACL,OAAO,KAAK,SAAS,cACrB,KAAK,SACL,OAAO,KAAK,UAAU,YAAY;AAClC,eAAO,cAAc;AAAA,MACzB;AACA,UAAI,OAAO,QAAQ,eAAe,gBAAgB,KAAK;AACnD,eAAO,cAAc;AAAA,MACzB;AACA,UAAI,OAAO,QAAQ,eAAe,gBAAgB,KAAK;AACnD,eAAO,cAAc;AAAA,MACzB;AACA,UAAI,OAAO,SAAS,eAAe,gBAAgB,MAAM;AACrD,eAAO,cAAc;AAAA,MACzB;AACA,aAAO,cAAc;AAAA,IACzB;AACI,aAAO,cAAc;AAAA,EAC7B;AACJ;AAEA,IAAM,eAAe,KAAK,YAAY;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AACD,IAAM,gBAAgB,CAAC,QAAQ;AAC3B,QAAM,OAAO,KAAK,UAAU,KAAK,MAAM,CAAC;AACxC,SAAO,KAAK,QAAQ,eAAe,KAAK;AAC5C;AACA,IAAM,WAAN,MAAM,kBAAiB,MAAM;AAAA,EACzB,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,YAAY,QAAQ;AAChB,UAAM;AACN,SAAK,SAAS,CAAC;AACf,SAAK,WAAW,CAAC,QAAQ;AACrB,WAAK,SAAS,CAAC,GAAG,KAAK,QAAQ,GAAG;AAAA,IACtC;AACA,SAAK,YAAY,CAAC,OAAO,CAAC,MAAM;AAC5B,WAAK,SAAS,CAAC,GAAG,KAAK,QAAQ,GAAG,IAAI;AAAA,IAC1C;AACA,UAAM,cAAc,WAAW;AAC/B,QAAI,OAAO,gBAAgB;AAEvB,aAAO,eAAe,MAAM,WAAW;AAAA,IAC3C,OACK;AACD,WAAK,YAAY;AAAA,IACrB;AACA,SAAK,OAAO;AACZ,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,OAAO,SAAS;AACZ,UAAM,SAAS,WACX,SAAU,OAAO;AACb,aAAO,MAAM;AAAA,IACjB;AACJ,UAAM,cAAc,EAAE,SAAS,CAAC,EAAE;AAClC,UAAM,eAAe,CAAC,UAAU;AAC5B,iBAAW,SAAS,MAAM,QAAQ;AAC9B,YAAI,MAAM,SAAS,iBAAiB;AAChC,gBAAM,YAAY,IAAI,YAAY;AAAA,QACtC,WACS,MAAM,SAAS,uBAAuB;AAC3C,uBAAa,MAAM,eAAe;AAAA,QACtC,WACS,MAAM,SAAS,qBAAqB;AACzC,uBAAa,MAAM,cAAc;AAAA,QACrC,WACS,MAAM,KAAK,WAAW,GAAG;AAC9B,sBAAY,QAAQ,KAAK,OAAO,KAAK,CAAC;AAAA,QAC1C,OACK;AACD,cAAI,OAAO;AACX,cAAI,IAAI;AACR,iBAAO,IAAI,MAAM,KAAK,QAAQ;AAC1B,kBAAM,KAAK,MAAM,KAAK,CAAC;AACvB,kBAAM,WAAW,MAAM,MAAM,KAAK,SAAS;AAC3C,gBAAI,CAAC,UAAU;AACX,mBAAK,EAAE,IAAI,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,EAAE;AAAA,YAQzC,OACK;AACD,mBAAK,EAAE,IAAI,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,EAAE;AACrC,mBAAK,EAAE,EAAE,QAAQ,KAAK,OAAO,KAAK,CAAC;AAAA,YACvC;AACA,mBAAO,KAAK,EAAE;AACd;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,iBAAa,IAAI;AACjB,WAAO;AAAA,EACX;AAAA,EACA,OAAO,OAAO,OAAO;AACjB,QAAI,EAAE,iBAAiB,YAAW;AAC9B,YAAM,IAAI,MAAM,mBAAmB,KAAK,EAAE;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,UAAU,KAAK,QAAQ,KAAK,uBAAuB,CAAC;AAAA,EACpE;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,OAAO,WAAW;AAAA,EAClC;AAAA,EACA,QAAQ,SAAS,CAAC,UAAU,MAAM,SAAS;AACvC,UAAM,cAAc,CAAC;AACrB,UAAM,aAAa,CAAC;AACpB,eAAW,OAAO,KAAK,QAAQ;AAC3B,UAAI,IAAI,KAAK,SAAS,GAAG;AACrB,oBAAY,IAAI,KAAK,CAAC,CAAC,IAAI,YAAY,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC;AACxD,oBAAY,IAAI,KAAK,CAAC,CAAC,EAAE,KAAK,OAAO,GAAG,CAAC;AAAA,MAC7C,OACK;AACD,mBAAW,KAAK,OAAO,GAAG,CAAC;AAAA,MAC/B;AAAA,IACJ;AACA,WAAO,EAAE,YAAY,YAAY;AAAA,EACrC;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,QAAQ;AAAA,EACxB;AACJ;AACA,SAAS,SAAS,CAAC,WAAW;AAC1B,QAAM,QAAQ,IAAI,SAAS,MAAM;AACjC,SAAO;AACX;AAEA,IAAM,WAAW,CAAC,OAAO,SAAS;AAC9B,MAAI;AACJ,UAAQ,MAAM,MAAM;AAAA,IAChB,KAAK,aAAa;AACd,UAAI,MAAM,aAAa,cAAc,WAAW;AAC5C,kBAAU;AAAA,MACd,OACK;AACD,kBAAU,YAAY,MAAM,QAAQ,cAAc,MAAM,QAAQ;AAAA,MACpE;AACA;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU,mCAAmC,KAAK,UAAU,MAAM,UAAU,KAAK,qBAAqB,CAAC;AACvG;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU,kCAAkC,KAAK,WAAW,MAAM,MAAM,IAAI,CAAC;AAC7E;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU,yCAAyC,KAAK,WAAW,MAAM,OAAO,CAAC;AACjF;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU,gCAAgC,KAAK,WAAW,MAAM,OAAO,CAAC,eAAe,MAAM,QAAQ;AACrG;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ,KAAK,aAAa;AACd,UAAI,OAAO,MAAM,eAAe,UAAU;AACtC,YAAI,cAAc,MAAM,YAAY;AAChC,oBAAU,gCAAgC,MAAM,WAAW,QAAQ;AACnE,cAAI,OAAO,MAAM,WAAW,aAAa,UAAU;AAC/C,sBAAU,GAAG,OAAO,sDAAsD,MAAM,WAAW,QAAQ;AAAA,UACvG;AAAA,QACJ,WACS,gBAAgB,MAAM,YAAY;AACvC,oBAAU,mCAAmC,MAAM,WAAW,UAAU;AAAA,QAC5E,WACS,cAAc,MAAM,YAAY;AACrC,oBAAU,iCAAiC,MAAM,WAAW,QAAQ;AAAA,QACxE,OACK;AACD,eAAK,YAAY,MAAM,UAAU;AAAA,QACrC;AAAA,MACJ,WACS,MAAM,eAAe,SAAS;AACnC,kBAAU,WAAW,MAAM,UAAU;AAAA,MACzC,OACK;AACD,kBAAU;AAAA,MACd;AACA;AAAA,IACJ,KAAK,aAAa;AACd,UAAI,MAAM,SAAS;AACf,kBAAU,sBAAsB,MAAM,QAAQ,YAAY,MAAM,YAAY,aAAa,WAAW,IAAI,MAAM,OAAO;AAAA,eAChH,MAAM,SAAS;AACpB,kBAAU,uBAAuB,MAAM,QAAQ,YAAY,MAAM,YAAY,aAAa,MAAM,IAAI,MAAM,OAAO;AAAA,eAC5G,MAAM,SAAS;AACpB,kBAAU,kBAAkB,MAAM,QAC5B,sBACA,MAAM,YACF,8BACA,eAAe,GAAG,MAAM,OAAO;AAAA,eACpC,MAAM,SAAS;AACpB,kBAAU,gBAAgB,MAAM,QAC1B,sBACA,MAAM,YACF,8BACA,eAAe,GAAG,IAAI,KAAK,OAAO,MAAM,OAAO,CAAC,CAAC;AAAA;AAE3D,kBAAU;AACd;AAAA,IACJ,KAAK,aAAa;AACd,UAAI,MAAM,SAAS;AACf,kBAAU,sBAAsB,MAAM,QAAQ,YAAY,MAAM,YAAY,YAAY,WAAW,IAAI,MAAM,OAAO;AAAA,eAC/G,MAAM,SAAS;AACpB,kBAAU,uBAAuB,MAAM,QAAQ,YAAY,MAAM,YAAY,YAAY,OAAO,IAAI,MAAM,OAAO;AAAA,eAC5G,MAAM,SAAS;AACpB,kBAAU,kBAAkB,MAAM,QAC5B,YACA,MAAM,YACF,0BACA,WAAW,IAAI,MAAM,OAAO;AAAA,eACjC,MAAM,SAAS;AACpB,kBAAU,kBAAkB,MAAM,QAC5B,YACA,MAAM,YACF,0BACA,WAAW,IAAI,MAAM,OAAO;AAAA,eACjC,MAAM,SAAS;AACpB,kBAAU,gBAAgB,MAAM,QAC1B,YACA,MAAM,YACF,6BACA,cAAc,IAAI,IAAI,KAAK,OAAO,MAAM,OAAO,CAAC,CAAC;AAAA;AAE3D,kBAAU;AACd;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU,gCAAgC,MAAM,UAAU;AAC1D;AAAA,IACJ,KAAK,aAAa;AACd,gBAAU;AACV;AAAA,IACJ;AACI,gBAAU,KAAK;AACf,WAAK,YAAY,KAAK;AAAA,EAC9B;AACA,SAAO,EAAE,QAAQ;AACrB;AAEA,IAAI,mBAAmB;AACvB,SAAS,YAAY,KAAK;AACtB,qBAAmB;AACvB;AACA,SAAS,cAAc;AACnB,SAAO;AACX;AAEA,IAAM,YAAY,CAAC,WAAW;AAC1B,QAAM,EAAE,MAAM,MAAAC,OAAM,WAAW,UAAU,IAAI;AAC7C,QAAM,WAAW,CAAC,GAAGA,OAAM,GAAI,UAAU,QAAQ,CAAC,CAAE;AACpD,QAAM,YAAY;AAAA,IACd,GAAG;AAAA,IACH,MAAM;AAAA,EACV;AACA,MAAI,UAAU,YAAY,QAAW;AACjC,WAAO;AAAA,MACH,GAAG;AAAA,MACH,MAAM;AAAA,MACN,SAAS,UAAU;AAAA,IACvB;AAAA,EACJ;AACA,MAAI,eAAe;AACnB,QAAM,OAAO,UACR,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EACjB,MAAM,EACN,QAAQ;AACb,aAAW,OAAO,MAAM;AACpB,mBAAe,IAAI,WAAW,EAAE,MAAM,cAAc,aAAa,CAAC,EAAE;AAAA,EACxE;AACA,SAAO;AAAA,IACH,GAAG;AAAA,IACH,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AACJ;AACA,IAAM,aAAa,CAAC;AACpB,SAAS,kBAAkB,KAAK,WAAW;AACvC,QAAM,cAAc,YAAY;AAChC,QAAM,QAAQ,UAAU;AAAA,IACpB;AAAA,IACA,MAAM,IAAI;AAAA,IACV,MAAM,IAAI;AAAA,IACV,WAAW;AAAA,MACP,IAAI,OAAO;AAAA;AAAA,MACX,IAAI;AAAA;AAAA,MACJ;AAAA;AAAA,MACA,gBAAgB,WAAW,SAAY;AAAA;AAAA,IAC3C,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAAA,EACvB,CAAC;AACD,MAAI,OAAO,OAAO,KAAK,KAAK;AAChC;AACA,IAAM,cAAN,MAAM,aAAY;AAAA,EACd,cAAc;AACV,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,QAAQ;AACJ,QAAI,KAAK,UAAU;AACf,WAAK,QAAQ;AAAA,EACrB;AAAA,EACA,QAAQ;AACJ,QAAI,KAAK,UAAU;AACf,WAAK,QAAQ;AAAA,EACrB;AAAA,EACA,OAAO,WAAW,QAAQ,SAAS;AAC/B,UAAM,aAAa,CAAC;AACpB,eAAW,KAAK,SAAS;AACrB,UAAI,EAAE,WAAW;AACb,eAAO;AACX,UAAI,EAAE,WAAW;AACb,eAAO,MAAM;AACjB,iBAAW,KAAK,EAAE,KAAK;AAAA,IAC3B;AACA,WAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,WAAW;AAAA,EACrD;AAAA,EACA,aAAa,iBAAiB,QAAQ,OAAO;AACzC,UAAM,YAAY,CAAC;AACnB,eAAW,QAAQ,OAAO;AACtB,YAAM,MAAM,MAAM,KAAK;AACvB,YAAM,QAAQ,MAAM,KAAK;AACzB,gBAAU,KAAK;AAAA,QACX;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,aAAY,gBAAgB,QAAQ,SAAS;AAAA,EACxD;AAAA,EACA,OAAO,gBAAgB,QAAQ,OAAO;AAClC,UAAM,cAAc,CAAC;AACrB,eAAW,QAAQ,OAAO;AACtB,YAAM,EAAE,KAAK,MAAM,IAAI;AACvB,UAAI,IAAI,WAAW;AACf,eAAO;AACX,UAAI,MAAM,WAAW;AACjB,eAAO;AACX,UAAI,IAAI,WAAW;AACf,eAAO,MAAM;AACjB,UAAI,MAAM,WAAW;AACjB,eAAO,MAAM;AACjB,UAAI,IAAI,UAAU,gBACb,OAAO,MAAM,UAAU,eAAe,KAAK,YAAY;AACxD,oBAAY,IAAI,KAAK,IAAI,MAAM;AAAA,MACnC;AAAA,IACJ;AACA,WAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,YAAY;AAAA,EACtD;AACJ;AACA,IAAM,UAAU,OAAO,OAAO;AAAA,EAC1B,QAAQ;AACZ,CAAC;AACD,IAAM,QAAQ,CAAC,WAAW,EAAE,QAAQ,SAAS,MAAM;AACnD,IAAM,KAAK,CAAC,WAAW,EAAE,QAAQ,SAAS,MAAM;AAChD,IAAM,YAAY,CAAC,MAAM,EAAE,WAAW;AACtC,IAAM,UAAU,CAAC,MAAM,EAAE,WAAW;AACpC,IAAM,UAAU,CAAC,MAAM,EAAE,WAAW;AACpC,IAAM,UAAU,CAAC,MAAM,OAAO,YAAY,eAAe,aAAa;AAiBtE,SAAS,uBAAuB,UAAU,OAAO,MAAM,GAAG;AACtD,MAAI,SAAS,OAAO,CAAC,EAAG,OAAM,IAAI,UAAU,+CAA+C;AAC3F,MAAI,OAAO,UAAU,aAAa,aAAa,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAG,OAAM,IAAI,UAAU,0EAA0E;AACjL,SAAO,SAAS,MAAM,IAAI,SAAS,MAAM,EAAE,KAAK,QAAQ,IAAI,IAAI,EAAE,QAAQ,MAAM,IAAI,QAAQ;AAChG;AAEA,SAAS,uBAAuB,UAAU,OAAO,OAAO,MAAM,GAAG;AAC7D,MAAI,SAAS,IAAK,OAAM,IAAI,UAAU,gCAAgC;AACtE,MAAI,SAAS,OAAO,CAAC,EAAG,OAAM,IAAI,UAAU,+CAA+C;AAC3F,MAAI,OAAO,UAAU,aAAa,aAAa,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAG,OAAM,IAAI,UAAU,yEAAyE;AAChL,SAAQ,SAAS,MAAM,EAAE,KAAK,UAAU,KAAK,IAAI,IAAI,EAAE,QAAQ,QAAQ,MAAM,IAAI,UAAU,KAAK,GAAI;AACxG;AAOA,IAAI;AAAA,CACH,SAAUC,YAAW;AAClB,EAAAA,WAAU,WAAW,CAAC,YAAY,OAAO,YAAY,WAAW,EAAE,QAAQ,IAAI,WAAW,CAAC;AAC1F,EAAAA,WAAU,WAAW,CAAC,YAAY,OAAO,YAAY,WAAW,UAAU,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ;AACxI,GAAG,cAAc,YAAY,CAAC,EAAE;AAEhC,IAAI;AAAJ,IAAoB;AACpB,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAY,QAAQ,OAAOC,OAAM,KAAK;AAClC,SAAK,cAAc,CAAC;AACpB,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,QAAQA;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,IAAI,OAAO;AACP,QAAI,CAAC,KAAK,YAAY,QAAQ;AAC1B,UAAI,KAAK,gBAAgB,OAAO;AAC5B,aAAK,YAAY,KAAK,GAAG,KAAK,OAAO,GAAG,KAAK,IAAI;AAAA,MACrD,OACK;AACD,aAAK,YAAY,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI;AAAA,MAClD;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,IAAM,eAAe,CAAC,KAAK,WAAW;AAClC,MAAI,QAAQ,MAAM,GAAG;AACjB,WAAO,EAAE,SAAS,MAAM,MAAM,OAAO,MAAM;AAAA,EAC/C,OACK;AACD,QAAI,CAAC,IAAI,OAAO,OAAO,QAAQ;AAC3B,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,WAAO;AAAA,MACH,SAAS;AAAA,MACT,IAAI,QAAQ;AACR,YAAI,KAAK;AACL,iBAAO,KAAK;AAChB,cAAM,QAAQ,IAAI,SAAS,IAAI,OAAO,MAAM;AAC5C,aAAK,SAAS;AACd,eAAO,KAAK;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAAS,oBAAoB,QAAQ;AACjC,MAAI,CAAC;AACD,WAAO,CAAC;AACZ,QAAM,EAAE,UAAAC,WAAU,oBAAoB,gBAAgB,YAAY,IAAI;AACtE,MAAIA,cAAa,sBAAsB,iBAAiB;AACpD,UAAM,IAAI,MAAM,0FAA0F;AAAA,EAC9G;AACA,MAAIA;AACA,WAAO,EAAE,UAAUA,WAAU,YAAY;AAC7C,QAAM,YAAY,CAAC,KAAK,QAAQ;AAC5B,QAAI,IAAI;AACR,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,IAAI,SAAS,sBAAsB;AACnC,aAAO,EAAE,SAAS,YAAY,QAAQ,YAAY,SAAS,UAAU,IAAI,aAAa;AAAA,IAC1F;AACA,QAAI,OAAO,IAAI,SAAS,aAAa;AACjC,aAAO,EAAE,UAAU,KAAK,YAAY,QAAQ,YAAY,SAAS,UAAU,oBAAoB,QAAQ,OAAO,SAAS,KAAK,IAAI,aAAa;AAAA,IACjJ;AACA,QAAI,IAAI,SAAS;AACb,aAAO,EAAE,SAAS,IAAI,aAAa;AACvC,WAAO,EAAE,UAAU,KAAK,YAAY,QAAQ,YAAY,SAAS,UAAU,wBAAwB,QAAQ,OAAO,SAAS,KAAK,IAAI,aAAa;AAAA,EACrJ;AACA,SAAO,EAAE,UAAU,WAAW,YAAY;AAC9C;AACA,IAAM,UAAN,MAAc;AAAA,EACV,IAAI,cAAc;AACd,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,SAAS,OAAO;AACZ,WAAO,cAAc,MAAM,IAAI;AAAA,EACnC;AAAA,EACA,gBAAgB,OAAO,KAAK;AACxB,WAAQ,OAAO;AAAA,MACX,QAAQ,MAAM,OAAO;AAAA,MACrB,MAAM,MAAM;AAAA,MACZ,YAAY,cAAc,MAAM,IAAI;AAAA,MACpC,gBAAgB,KAAK,KAAK;AAAA,MAC1B,MAAM,MAAM;AAAA,MACZ,QAAQ,MAAM;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,oBAAoB,OAAO;AACvB,WAAO;AAAA,MACH,QAAQ,IAAI,YAAY;AAAA,MACxB,KAAK;AAAA,QACD,QAAQ,MAAM,OAAO;AAAA,QACrB,MAAM,MAAM;AAAA,QACZ,YAAY,cAAc,MAAM,IAAI;AAAA,QACpC,gBAAgB,KAAK,KAAK;AAAA,QAC1B,MAAM,MAAM;AAAA,QACZ,QAAQ,MAAM;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,OAAO;AACd,UAAM,SAAS,KAAK,OAAO,KAAK;AAChC,QAAI,QAAQ,MAAM,GAAG;AACjB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,OAAO;AACf,UAAM,SAAS,KAAK,OAAO,KAAK;AAChC,WAAO,QAAQ,QAAQ,MAAM;AAAA,EACjC;AAAA,EACA,MAAM,MAAM,QAAQ;AAChB,UAAM,SAAS,KAAK,UAAU,MAAM,MAAM;AAC1C,QAAI,OAAO;AACP,aAAO,OAAO;AAClB,UAAM,OAAO;AAAA,EACjB;AAAA,EACA,UAAU,MAAM,QAAQ;AACpB,QAAI;AACJ,UAAM,MAAM;AAAA,MACR,QAAQ;AAAA,QACJ,QAAQ,CAAC;AAAA,QACT,QAAQ,KAAK,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,WAAW,QAAQ,OAAO,SAAS,KAAK;AAAA,QAC5G,oBAAoB,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO;AAAA,MAC/E;AAAA,MACA,OAAO,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,SAAS,CAAC;AAAA,MACxE,gBAAgB,KAAK,KAAK;AAAA,MAC1B,QAAQ;AAAA,MACR;AAAA,MACA,YAAY,cAAc,IAAI;AAAA,IAClC;AACA,UAAM,SAAS,KAAK,WAAW,EAAE,MAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,CAAC;AACpE,WAAO,aAAa,KAAK,MAAM;AAAA,EACnC;AAAA,EACA,YAAY,MAAM;AACd,QAAI,IAAI;AACR,UAAM,MAAM;AAAA,MACR,QAAQ;AAAA,QACJ,QAAQ,CAAC;AAAA,QACT,OAAO,CAAC,CAAC,KAAK,WAAW,EAAE;AAAA,MAC/B;AAAA,MACA,MAAM,CAAC;AAAA,MACP,gBAAgB,KAAK,KAAK;AAAA,MAC1B,QAAQ;AAAA,MACR;AAAA,MACA,YAAY,cAAc,IAAI;AAAA,IAClC;AACA,QAAI,CAAC,KAAK,WAAW,EAAE,OAAO;AAC1B,UAAI;AACA,cAAM,SAAS,KAAK,WAAW,EAAE,MAAM,MAAM,CAAC,GAAG,QAAQ,IAAI,CAAC;AAC9D,eAAO,QAAQ,MAAM,IACf;AAAA,UACE,OAAO,OAAO;AAAA,QAClB,IACE;AAAA,UACE,QAAQ,IAAI,OAAO;AAAA,QACvB;AAAA,MACR,SACO,KAAK;AACR,aAAK,MAAM,KAAK,QAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,SAAS,aAAa,GAAG;AAC3L,eAAK,WAAW,EAAE,QAAQ;AAAA,QAC9B;AACA,YAAI,SAAS;AAAA,UACT,QAAQ,CAAC;AAAA,UACT,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK,YAAY,EAAE,MAAM,MAAM,CAAC,GAAG,QAAQ,IAAI,CAAC,EAAE,KAAK,CAAC,WAAW,QAAQ,MAAM,IAClF;AAAA,MACE,OAAO,OAAO;AAAA,IAClB,IACE;AAAA,MACE,QAAQ,IAAI,OAAO;AAAA,IACvB,CAAC;AAAA,EACT;AAAA,EACA,MAAM,WAAW,MAAM,QAAQ;AAC3B,UAAM,SAAS,MAAM,KAAK,eAAe,MAAM,MAAM;AACrD,QAAI,OAAO;AACP,aAAO,OAAO;AAClB,UAAM,OAAO;AAAA,EACjB;AAAA,EACA,MAAM,eAAe,MAAM,QAAQ;AAC/B,UAAM,MAAM;AAAA,MACR,QAAQ;AAAA,QACJ,QAAQ,CAAC;AAAA,QACT,oBAAoB,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO;AAAA,QAC3E,OAAO;AAAA,MACX;AAAA,MACA,OAAO,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,SAAS,CAAC;AAAA,MACxE,gBAAgB,KAAK,KAAK;AAAA,MAC1B,QAAQ;AAAA,MACR;AAAA,MACA,YAAY,cAAc,IAAI;AAAA,IAClC;AACA,UAAM,mBAAmB,KAAK,OAAO,EAAE,MAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,CAAC;AAC1E,UAAM,SAAS,OAAO,QAAQ,gBAAgB,IACxC,mBACA,QAAQ,QAAQ,gBAAgB;AACtC,WAAO,aAAa,KAAK,MAAM;AAAA,EACnC;AAAA,EACA,OAAO,OAAO,SAAS;AACnB,UAAM,qBAAqB,CAAC,QAAQ;AAChC,UAAI,OAAO,YAAY,YAAY,OAAO,YAAY,aAAa;AAC/D,eAAO,EAAE,QAAQ;AAAA,MACrB,WACS,OAAO,YAAY,YAAY;AACpC,eAAO,QAAQ,GAAG;AAAA,MACtB,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,KAAK,YAAY,CAAC,KAAK,QAAQ;AAClC,YAAM,SAAS,MAAM,GAAG;AACxB,YAAM,WAAW,MAAM,IAAI,SAAS;AAAA,QAChC,MAAM,aAAa;AAAA,QACnB,GAAG,mBAAmB,GAAG;AAAA,MAC7B,CAAC;AACD,UAAI,OAAO,YAAY,eAAe,kBAAkB,SAAS;AAC7D,eAAO,OAAO,KAAK,CAAC,SAAS;AACzB,cAAI,CAAC,MAAM;AACP,qBAAS;AACT,mBAAO;AAAA,UACX,OACK;AACD,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AAAA,MACL;AACA,UAAI,CAAC,QAAQ;AACT,iBAAS;AACT,eAAO;AAAA,MACX,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,WAAW,OAAO,gBAAgB;AAC9B,WAAO,KAAK,YAAY,CAAC,KAAK,QAAQ;AAClC,UAAI,CAAC,MAAM,GAAG,GAAG;AACb,YAAI,SAAS,OAAO,mBAAmB,aACjC,eAAe,KAAK,GAAG,IACvB,cAAc;AACpB,eAAO;AAAA,MACX,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,YAAY,YAAY;AACpB,WAAO,IAAI,WAAW;AAAA,MAClB,QAAQ;AAAA,MACR,UAAU,sBAAsB;AAAA,MAChC,QAAQ,EAAE,MAAM,cAAc,WAAW;AAAA,IAC7C,CAAC;AAAA,EACL;AAAA,EACA,YAAY,YAAY;AACpB,WAAO,KAAK,YAAY,UAAU;AAAA,EACtC;AAAA,EACA,YAAY,KAAK;AAEb,SAAK,MAAM,KAAK;AAChB,SAAK,OAAO;AACZ,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AACjC,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;AACnD,SAAK,MAAM,KAAK,IAAI,KAAK,IAAI;AAC7B,SAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AACnC,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AACjC,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,KAAK,KAAK,GAAG,KAAK,IAAI;AAC3B,SAAK,MAAM,KAAK,IAAI,KAAK,IAAI;AAC7B,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AACjC,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AACjC,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,OAAO,KAAK,KAAK,KAAK,IAAI;AAC/B,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,WAAW,IAAI;AAAA,MAChB,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU,CAAC,SAAS,KAAK,WAAW,EAAE,IAAI;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,WAAW;AACP,WAAO,YAAY,OAAO,MAAM,KAAK,IAAI;AAAA,EAC7C;AAAA,EACA,WAAW;AACP,WAAO,YAAY,OAAO,MAAM,KAAK,IAAI;AAAA,EAC7C;AAAA,EACA,UAAU;AACN,WAAO,KAAK,SAAS,EAAE,SAAS;AAAA,EACpC;AAAA,EACA,QAAQ;AACJ,WAAO,SAAS,OAAO,IAAI;AAAA,EAC/B;AAAA,EACA,UAAU;AACN,WAAO,WAAW,OAAO,MAAM,KAAK,IAAI;AAAA,EAC5C;AAAA,EACA,GAAG,QAAQ;AACP,WAAO,SAAS,OAAO,CAAC,MAAM,MAAM,GAAG,KAAK,IAAI;AAAA,EACpD;AAAA,EACA,IAAI,UAAU;AACV,WAAO,gBAAgB,OAAO,MAAM,UAAU,KAAK,IAAI;AAAA,EAC3D;AAAA,EACA,UAAU,WAAW;AACjB,WAAO,IAAI,WAAW;AAAA,MAClB,GAAG,oBAAoB,KAAK,IAAI;AAAA,MAChC,QAAQ;AAAA,MACR,UAAU,sBAAsB;AAAA,MAChC,QAAQ,EAAE,MAAM,aAAa,UAAU;AAAA,IAC3C,CAAC;AAAA,EACL;AAAA,EACA,QAAQ,KAAK;AACT,UAAM,mBAAmB,OAAO,QAAQ,aAAa,MAAM,MAAM;AACjE,WAAO,IAAI,WAAW;AAAA,MAClB,GAAG,oBAAoB,KAAK,IAAI;AAAA,MAChC,WAAW;AAAA,MACX,cAAc;AAAA,MACd,UAAU,sBAAsB;AAAA,IACpC,CAAC;AAAA,EACL;AAAA,EACA,QAAQ;AACJ,WAAO,IAAI,WAAW;AAAA,MAClB,UAAU,sBAAsB;AAAA,MAChC,MAAM;AAAA,MACN,GAAG,oBAAoB,KAAK,IAAI;AAAA,IACpC,CAAC;AAAA,EACL;AAAA,EACA,MAAM,KAAK;AACP,UAAM,iBAAiB,OAAO,QAAQ,aAAa,MAAM,MAAM;AAC/D,WAAO,IAAI,SAAS;AAAA,MAChB,GAAG,oBAAoB,KAAK,IAAI;AAAA,MAChC,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,UAAU,sBAAsB;AAAA,IACpC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,aAAa;AAClB,UAAM,OAAO,KAAK;AAClB,WAAO,IAAI,KAAK;AAAA,MACZ,GAAG,KAAK;AAAA,MACR;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,KAAK,QAAQ;AACT,WAAO,YAAY,OAAO,MAAM,MAAM;AAAA,EAC1C;AAAA,EACA,WAAW;AACP,WAAO,YAAY,OAAO,IAAI;AAAA,EAClC;AAAA,EACA,aAAa;AACT,WAAO,KAAK,UAAU,MAAS,EAAE;AAAA,EACrC;AAAA,EACA,aAAa;AACT,WAAO,KAAK,UAAU,IAAI,EAAE;AAAA,EAChC;AACJ;AACA,IAAM,YAAY;AAClB,IAAM,aAAa;AACnB,IAAM,YAAY;AAGlB,IAAM,YAAY;AAClB,IAAM,cAAc;AACpB,IAAM,WAAW;AACjB,IAAM,gBAAgB;AAatB,IAAM,aAAa;AAInB,IAAM,cAAc;AACpB,IAAI;AAEJ,IAAM,YAAY;AAClB,IAAM,gBAAgB;AAGtB,IAAM,YAAY;AAClB,IAAM,gBAAgB;AAEtB,IAAM,cAAc;AAEpB,IAAM,iBAAiB;AAMvB,IAAM,kBAAkB;AACxB,IAAM,YAAY,IAAI,OAAO,IAAI,eAAe,GAAG;AACnD,SAAS,gBAAgB,MAAM;AAE3B,MAAI,QAAQ;AACZ,MAAI,KAAK,WAAW;AAChB,YAAQ,GAAG,KAAK,UAAU,KAAK,SAAS;AAAA,EAC5C,WACS,KAAK,aAAa,MAAM;AAC7B,YAAQ,GAAG,KAAK;AAAA,EACpB;AACA,SAAO;AACX;AACA,SAAS,UAAU,MAAM;AACrB,SAAO,IAAI,OAAO,IAAI,gBAAgB,IAAI,CAAC,GAAG;AAClD;AAEA,SAAS,cAAc,MAAM;AACzB,MAAI,QAAQ,GAAG,eAAe,IAAI,gBAAgB,IAAI,CAAC;AACvD,QAAM,OAAO,CAAC;AACd,OAAK,KAAK,KAAK,QAAQ,OAAO,GAAG;AACjC,MAAI,KAAK;AACL,SAAK,KAAK,sBAAsB;AACpC,UAAQ,GAAG,KAAK,IAAI,KAAK,KAAK,GAAG,CAAC;AAClC,SAAO,IAAI,OAAO,IAAI,KAAK,GAAG;AAClC;AACA,SAAS,UAAU,IAAI,SAAS;AAC5B,OAAK,YAAY,QAAQ,CAAC,YAAY,UAAU,KAAK,EAAE,GAAG;AACtD,WAAO;AAAA,EACX;AACA,OAAK,YAAY,QAAQ,CAAC,YAAY,UAAU,KAAK,EAAE,GAAG;AACtD,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACA,SAAS,WAAW,KAAK,KAAK;AAC1B,MAAI,CAAC,SAAS,KAAK,GAAG;AAClB,WAAO;AACX,MAAI;AACA,UAAM,CAAC,MAAM,IAAI,IAAI,MAAM,GAAG;AAE9B,UAAM,SAAS,OACV,QAAQ,MAAM,GAAG,EACjB,QAAQ,MAAM,GAAG,EACjB,OAAO,OAAO,UAAW,IAAK,OAAO,SAAS,KAAM,GAAI,GAAG;AAChE,UAAM,UAAU,KAAK,MAAM,KAAK,MAAM,CAAC;AACvC,QAAI,OAAO,YAAY,YAAY,YAAY;AAC3C,aAAO;AACX,QAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ;AACzB,aAAO;AACX,QAAI,OAAO,QAAQ,QAAQ;AACvB,aAAO;AACX,WAAO;AAAA,EACX,SACO,IAAI;AACP,WAAO;AAAA,EACX;AACJ;AACA,SAAS,YAAY,IAAI,SAAS;AAC9B,OAAK,YAAY,QAAQ,CAAC,YAAY,cAAc,KAAK,EAAE,GAAG;AAC1D,WAAO;AAAA,EACX;AACA,OAAK,YAAY,QAAQ,CAAC,YAAY,cAAc,KAAK,EAAE,GAAG;AAC1D,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACA,IAAM,YAAN,MAAM,mBAAkB,QAAQ;AAAA,EAC5B,OAAO,OAAO;AACV,QAAI,KAAK,KAAK,QAAQ;AAClB,YAAM,OAAO,OAAO,MAAM,IAAI;AAAA,IAClC;AACA,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,QAAQ;AACrC,YAAMC,OAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkBA,MAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAUA,KAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,SAAS,IAAI,YAAY;AAC/B,QAAI,MAAM;AACV,eAAW,SAAS,KAAK,KAAK,QAAQ;AAClC,UAAI,MAAM,SAAS,OAAO;AACtB,YAAI,MAAM,KAAK,SAAS,MAAM,OAAO;AACjC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,YACN,WAAW;AAAA,YACX,OAAO;AAAA,YACP,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,YAAI,MAAM,KAAK,SAAS,MAAM,OAAO;AACjC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,YACN,WAAW;AAAA,YACX,OAAO;AAAA,YACP,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,UAAU;AAC9B,cAAM,SAAS,MAAM,KAAK,SAAS,MAAM;AACzC,cAAM,WAAW,MAAM,KAAK,SAAS,MAAM;AAC3C,YAAI,UAAU,UAAU;AACpB,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,cAAI,QAAQ;AACR,8BAAkB,KAAK;AAAA,cACnB,MAAM,aAAa;AAAA,cACnB,SAAS,MAAM;AAAA,cACf,MAAM;AAAA,cACN,WAAW;AAAA,cACX,OAAO;AAAA,cACP,SAAS,MAAM;AAAA,YACnB,CAAC;AAAA,UACL,WACS,UAAU;AACf,8BAAkB,KAAK;AAAA,cACnB,MAAM,aAAa;AAAA,cACnB,SAAS,MAAM;AAAA,cACf,MAAM;AAAA,cACN,WAAW;AAAA,cACX,OAAO;AAAA,cACP,SAAS,MAAM;AAAA,YACnB,CAAC;AAAA,UACL;AACA,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,SAAS;AAC7B,YAAI,CAAC,WAAW,KAAK,MAAM,IAAI,GAAG;AAC9B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,SAAS;AAC7B,YAAI,CAAC,YAAY;AACb,uBAAa,IAAI,OAAO,aAAa,GAAG;AAAA,QAC5C;AACA,YAAI,CAAC,WAAW,KAAK,MAAM,IAAI,GAAG;AAC9B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,YAAI,CAAC,UAAU,KAAK,MAAM,IAAI,GAAG;AAC7B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,UAAU;AAC9B,YAAI,CAAC,YAAY,KAAK,MAAM,IAAI,GAAG;AAC/B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,YAAI,CAAC,UAAU,KAAK,MAAM,IAAI,GAAG;AAC7B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,SAAS;AAC7B,YAAI,CAAC,WAAW,KAAK,MAAM,IAAI,GAAG;AAC9B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,YAAI,CAAC,UAAU,KAAK,MAAM,IAAI,GAAG;AAC7B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,YAAI;AACA,cAAI,IAAI,MAAM,IAAI;AAAA,QACtB,SACO,IAAI;AACP,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,SAAS;AAC7B,cAAM,MAAM,YAAY;AACxB,cAAM,aAAa,MAAM,MAAM,KAAK,MAAM,IAAI;AAC9C,YAAI,CAAC,YAAY;AACb,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,cAAM,OAAO,MAAM,KAAK,KAAK;AAAA,MACjC,WACS,MAAM,SAAS,YAAY;AAChC,YAAI,CAAC,MAAM,KAAK,SAAS,MAAM,OAAO,MAAM,QAAQ,GAAG;AACnD,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY,EAAE,UAAU,MAAM,OAAO,UAAU,MAAM,SAAS;AAAA,YAC9D,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,eAAe;AACnC,cAAM,OAAO,MAAM,KAAK,YAAY;AAAA,MACxC,WACS,MAAM,SAAS,eAAe;AACnC,cAAM,OAAO,MAAM,KAAK,YAAY;AAAA,MACxC,WACS,MAAM,SAAS,cAAc;AAClC,YAAI,CAAC,MAAM,KAAK,WAAW,MAAM,KAAK,GAAG;AACrC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY,EAAE,YAAY,MAAM,MAAM;AAAA,YACtC,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,YAAY;AAChC,YAAI,CAAC,MAAM,KAAK,SAAS,MAAM,KAAK,GAAG;AACnC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY,EAAE,UAAU,MAAM,MAAM;AAAA,YACpC,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,YAAY;AAChC,cAAM,QAAQ,cAAc,KAAK;AACjC,YAAI,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG;AACzB,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY;AAAA,YACZ,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,cAAM,QAAQ;AACd,YAAI,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG;AACzB,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY;AAAA,YACZ,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,cAAM,QAAQ,UAAU,KAAK;AAC7B,YAAI,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG;AACzB,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY;AAAA,YACZ,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,YAAY;AAChC,YAAI,CAAC,cAAc,KAAK,MAAM,IAAI,GAAG;AACjC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,MAAM;AAC1B,YAAI,CAAC,UAAU,MAAM,MAAM,MAAM,OAAO,GAAG;AACvC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,YAAI,CAAC,WAAW,MAAM,MAAM,MAAM,GAAG,GAAG;AACpC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,QAAQ;AAC5B,YAAI,CAAC,YAAY,MAAM,MAAM,MAAM,OAAO,GAAG;AACzC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,UAAU;AAC9B,YAAI,CAAC,YAAY,KAAK,MAAM,IAAI,GAAG;AAC/B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,aAAa;AACjC,YAAI,CAAC,eAAe,KAAK,MAAM,IAAI,GAAG;AAClC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,YAAY;AAAA,YACZ,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,OACK;AACD,aAAK,YAAY,KAAK;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,MAAM,KAAK;AAAA,EACrD;AAAA,EACA,OAAO,OAAO,YAAY,SAAS;AAC/B,WAAO,KAAK,WAAW,CAAC,SAAS,MAAM,KAAK,IAAI,GAAG;AAAA,MAC/C;AAAA,MACA,MAAM,aAAa;AAAA,MACnB,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,UAAU,OAAO;AACb,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,KAAK;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,MAAM,SAAS;AACX,WAAO,KAAK,UAAU,EAAE,MAAM,SAAS,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC3E;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,UAAU,EAAE,MAAM,OAAO,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EACzE;AAAA,EACA,MAAM,SAAS;AACX,WAAO,KAAK,UAAU,EAAE,MAAM,SAAS,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC3E;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,UAAU,EAAE,MAAM,QAAQ,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC1E;AAAA,EACA,OAAO,SAAS;AACZ,WAAO,KAAK,UAAU,EAAE,MAAM,UAAU,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC5E;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,UAAU,EAAE,MAAM,QAAQ,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC1E;AAAA,EACA,MAAM,SAAS;AACX,WAAO,KAAK,UAAU,EAAE,MAAM,SAAS,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC3E;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,UAAU,EAAE,MAAM,QAAQ,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC1E;AAAA,EACA,OAAO,SAAS;AACZ,WAAO,KAAK,UAAU,EAAE,MAAM,UAAU,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC5E;AAAA,EACA,UAAU,SAAS;AAEf,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,UAAU,EAAE,MAAM,OAAO,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EACzE;AAAA,EACA,GAAG,SAAS;AACR,WAAO,KAAK,UAAU,EAAE,MAAM,MAAM,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EACxE;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,UAAU,EAAE,MAAM,QAAQ,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC1E;AAAA,EACA,SAAS,SAAS;AACd,QAAI,IAAI;AACR,QAAI,OAAO,YAAY,UAAU;AAC7B,aAAO,KAAK,UAAU;AAAA,QAClB,MAAM;AAAA,QACN,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AACA,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,WAAW,QAAQ,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,eAAe,cAAc,OAAO,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ;AAAA,MAC3K,SAAS,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,YAAY,QAAQ,OAAO,SAAS,KAAK;AAAA,MACjH,QAAQ,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,WAAW,QAAQ,OAAO,SAAS,KAAK;AAAA,MAC/G,GAAG,UAAU,SAAS,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,OAAO;AAAA,IAC3F,CAAC;AAAA,EACL;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,UAAU,EAAE,MAAM,QAAQ,QAAQ,CAAC;AAAA,EACnD;AAAA,EACA,KAAK,SAAS;AACV,QAAI,OAAO,YAAY,UAAU;AAC7B,aAAO,KAAK,UAAU;AAAA,QAClB,MAAM;AAAA,QACN,WAAW;AAAA,QACX,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AACA,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,WAAW,QAAQ,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,eAAe,cAAc,OAAO,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ;AAAA,MAC3K,GAAG,UAAU,SAAS,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,OAAO;AAAA,IAC3F,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,UAAU,EAAE,MAAM,YAAY,GAAG,UAAU,SAAS,OAAO,EAAE,CAAC;AAAA,EAC9E;AAAA,EACA,MAAM,OAAO,SAAS;AAClB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN;AAAA,MACA,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,OAAO,SAAS;AACrB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN;AAAA,MACA,UAAU,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ;AAAA,MACpE,GAAG,UAAU,SAAS,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,OAAO;AAAA,IAC3F,CAAC;AAAA,EACL;AAAA,EACA,WAAW,OAAO,SAAS;AACvB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN;AAAA,MACA,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,OAAO,SAAS;AACrB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN;AAAA,MACA,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,OAAO,KAAK,SAAS;AACjB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,GAAG,UAAU,SAAS,OAAO;AAAA,IACjC,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,SAAS;AACd,WAAO,KAAK,IAAI,GAAG,UAAU,SAAS,OAAO,CAAC;AAAA,EAClD;AAAA,EACA,OAAO;AACH,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,EAAE,MAAM,OAAO,CAAC;AAAA,IAClD,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,EAAE,MAAM,cAAc,CAAC;AAAA,IACzD,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,EAAE,MAAM,cAAc,CAAC;AAAA,IACzD,CAAC;AAAA,EACL;AAAA,EACA,IAAI,aAAa;AACb,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,UAAU;AAAA,EACjE;AAAA,EACA,IAAI,SAAS;AACT,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,MAAM;AAAA,EAC7D;AAAA,EACA,IAAI,SAAS;AACT,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,MAAM;AAAA,EAC7D;AAAA,EACA,IAAI,aAAa;AACb,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,UAAU;AAAA,EACjE;AAAA,EACA,IAAI,UAAU;AACV,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,OAAO;AAAA,EAC9D;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,KAAK;AAAA,EAC5D;AAAA,EACA,IAAI,UAAU;AACV,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,OAAO;AAAA,EAC9D;AAAA,EACA,IAAI,SAAS;AACT,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,MAAM;AAAA,EAC7D;AAAA,EACA,IAAI,WAAW;AACX,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,QAAQ;AAAA,EAC/D;AAAA,EACA,IAAI,SAAS;AACT,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,MAAM;AAAA,EAC7D;AAAA,EACA,IAAI,UAAU;AACV,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,OAAO;AAAA,EAC9D;AAAA,EACA,IAAI,SAAS;AACT,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,MAAM;AAAA,EAC7D;AAAA,EACA,IAAI,OAAO;AACP,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,IAAI;AAAA,EAC3D;AAAA,EACA,IAAI,SAAS;AACT,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,MAAM;AAAA,EAC7D;AAAA,EACA,IAAI,WAAW;AACX,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,QAAQ;AAAA,EAC/D;AAAA,EACA,IAAI,cAAc;AAEd,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,WAAW;AAAA,EAClE;AAAA,EACA,IAAI,YAAY;AACZ,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,YAAY;AACZ,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,UAAU,SAAS,CAAC,WAAW;AAC3B,MAAI;AACJ,SAAO,IAAI,UAAU;AAAA,IACjB,QAAQ,CAAC;AAAA,IACT,UAAU,sBAAsB;AAAA,IAChC,SAAS,KAAK,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,YAAY,QAAQ,OAAO,SAAS,KAAK;AAAA,IAC9G,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AAEA,SAAS,mBAAmB,KAAK,MAAM;AACnC,QAAM,eAAe,IAAI,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,KAAK,IAAI;AACzD,QAAM,gBAAgB,KAAK,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,KAAK,IAAI;AAC3D,QAAM,WAAW,cAAc,eAAe,cAAc;AAC5D,QAAM,SAAS,SAAS,IAAI,QAAQ,QAAQ,EAAE,QAAQ,KAAK,EAAE,CAAC;AAC9D,QAAM,UAAU,SAAS,KAAK,QAAQ,QAAQ,EAAE,QAAQ,KAAK,EAAE,CAAC;AAChE,SAAQ,SAAS,UAAW,KAAK,IAAI,IAAI,QAAQ;AACrD;AACA,IAAM,YAAN,MAAM,mBAAkB,QAAQ;AAAA,EAC5B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,MAAM,KAAK;AAChB,SAAK,MAAM,KAAK;AAChB,SAAK,OAAO,KAAK;AAAA,EACrB;AAAA,EACA,OAAO,OAAO;AACV,QAAI,KAAK,KAAK,QAAQ;AAClB,YAAM,OAAO,OAAO,MAAM,IAAI;AAAA,IAClC;AACA,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,QAAQ;AACrC,YAAMA,OAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkBA,MAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAUA,KAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,MAAM;AACV,UAAM,SAAS,IAAI,YAAY;AAC/B,eAAW,SAAS,KAAK,KAAK,QAAQ;AAClC,UAAI,MAAM,SAAS,OAAO;AACtB,YAAI,CAAC,KAAK,UAAU,MAAM,IAAI,GAAG;AAC7B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,UAAU;AAAA,YACV,UAAU;AAAA,YACV,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,cAAM,WAAW,MAAM,YACjB,MAAM,OAAO,MAAM,QACnB,MAAM,QAAQ,MAAM;AAC1B,YAAI,UAAU;AACV,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,YACN,WAAW,MAAM;AAAA,YACjB,OAAO;AAAA,YACP,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,cAAM,SAAS,MAAM,YACf,MAAM,OAAO,MAAM,QACnB,MAAM,QAAQ,MAAM;AAC1B,YAAI,QAAQ;AACR,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,YACN,WAAW,MAAM;AAAA,YACjB,OAAO;AAAA,YACP,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,cAAc;AAClC,YAAI,mBAAmB,MAAM,MAAM,MAAM,KAAK,MAAM,GAAG;AACnD,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY,MAAM;AAAA,YAClB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,UAAU;AAC9B,YAAI,CAAC,OAAO,SAAS,MAAM,IAAI,GAAG;AAC9B,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,OACK;AACD,aAAK,YAAY,KAAK;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,MAAM,KAAK;AAAA,EACrD;AAAA,EACA,IAAI,OAAO,SAAS;AAChB,WAAO,KAAK,SAAS,OAAO,OAAO,MAAM,UAAU,SAAS,OAAO,CAAC;AAAA,EACxE;AAAA,EACA,GAAG,OAAO,SAAS;AACf,WAAO,KAAK,SAAS,OAAO,OAAO,OAAO,UAAU,SAAS,OAAO,CAAC;AAAA,EACzE;AAAA,EACA,IAAI,OAAO,SAAS;AAChB,WAAO,KAAK,SAAS,OAAO,OAAO,MAAM,UAAU,SAAS,OAAO,CAAC;AAAA,EACxE;AAAA,EACA,GAAG,OAAO,SAAS;AACf,WAAO,KAAK,SAAS,OAAO,OAAO,OAAO,UAAU,SAAS,OAAO,CAAC;AAAA,EACzE;AAAA,EACA,SAAS,MAAM,OAAO,WAAW,SAAS;AACtC,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ;AAAA,QACJ,GAAG,KAAK,KAAK;AAAA,QACb;AAAA,UACI;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,UAAU,SAAS,OAAO;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,OAAO;AACb,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,KAAK;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,YAAY,SAAS;AACjB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,YAAY,SAAS;AACjB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,WAAW,OAAO,SAAS;AACvB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN;AAAA,MACA,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,OAAO,SAAS;AACZ,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO,OAAO;AAAA,MACd,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC,EAAE,UAAU;AAAA,MACT,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO,OAAO;AAAA,MACd,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW;AACX,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,WAAW;AACX,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,CAAC,CAAC,KAAK,KAAK,OAAO,KAAK,CAAC,OAAO,GAAG,SAAS,SAC9C,GAAG,SAAS,gBAAgB,KAAK,UAAU,GAAG,KAAK,CAAE;AAAA,EAC9D;AAAA,EACA,IAAI,WAAW;AACX,QAAI,MAAM,MAAM,MAAM;AACtB,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,YACZ,GAAG,SAAS,SACZ,GAAG,SAAS,cAAc;AAC1B,eAAO;AAAA,MACX,WACS,GAAG,SAAS,OAAO;AACxB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB,WACS,GAAG,SAAS,OAAO;AACxB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO,OAAO,SAAS,GAAG,KAAK,OAAO,SAAS,GAAG;AAAA,EACtD;AACJ;AACA,UAAU,SAAS,CAAC,WAAW;AAC3B,SAAO,IAAI,UAAU;AAAA,IACjB,QAAQ,CAAC;AAAA,IACT,UAAU,sBAAsB;AAAA,IAChC,SAAS,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,WAAW;AAAA,IAC3E,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,YAAN,MAAM,mBAAkB,QAAQ;AAAA,EAC5B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,MAAM,KAAK;AAChB,SAAK,MAAM,KAAK;AAAA,EACpB;AAAA,EACA,OAAO,OAAO;AACV,QAAI,KAAK,KAAK,QAAQ;AAClB,UAAI;AACA,cAAM,OAAO,OAAO,MAAM,IAAI;AAAA,MAClC,SACO,IAAI;AACP,eAAO,KAAK,iBAAiB,KAAK;AAAA,MACtC;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,QAAQ;AACrC,aAAO,KAAK,iBAAiB,KAAK;AAAA,IACtC;AACA,QAAI,MAAM;AACV,UAAM,SAAS,IAAI,YAAY;AAC/B,eAAW,SAAS,KAAK,KAAK,QAAQ;AAClC,UAAI,MAAM,SAAS,OAAO;AACtB,cAAM,WAAW,MAAM,YACjB,MAAM,OAAO,MAAM,QACnB,MAAM,QAAQ,MAAM;AAC1B,YAAI,UAAU;AACV,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,MAAM;AAAA,YACN,SAAS,MAAM;AAAA,YACf,WAAW,MAAM;AAAA,YACjB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,cAAM,SAAS,MAAM,YACf,MAAM,OAAO,MAAM,QACnB,MAAM,QAAQ,MAAM;AAC1B,YAAI,QAAQ;AACR,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,MAAM;AAAA,YACN,SAAS,MAAM;AAAA,YACf,WAAW,MAAM;AAAA,YACjB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,cAAc;AAClC,YAAI,MAAM,OAAO,MAAM,UAAU,OAAO,CAAC,GAAG;AACxC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,YAAY,MAAM;AAAA,YAClB,SAAS,MAAM;AAAA,UACnB,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,OACK;AACD,aAAK,YAAY,KAAK;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,MAAM,KAAK;AAAA,EACrD;AAAA,EACA,iBAAiB,OAAO;AACpB,UAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,sBAAkB,KAAK;AAAA,MACnB,MAAM,aAAa;AAAA,MACnB,UAAU,cAAc;AAAA,MACxB,UAAU,IAAI;AAAA,IAClB,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,IAAI,OAAO,SAAS;AAChB,WAAO,KAAK,SAAS,OAAO,OAAO,MAAM,UAAU,SAAS,OAAO,CAAC;AAAA,EACxE;AAAA,EACA,GAAG,OAAO,SAAS;AACf,WAAO,KAAK,SAAS,OAAO,OAAO,OAAO,UAAU,SAAS,OAAO,CAAC;AAAA,EACzE;AAAA,EACA,IAAI,OAAO,SAAS;AAChB,WAAO,KAAK,SAAS,OAAO,OAAO,MAAM,UAAU,SAAS,OAAO,CAAC;AAAA,EACxE;AAAA,EACA,GAAG,OAAO,SAAS;AACf,WAAO,KAAK,SAAS,OAAO,OAAO,OAAO,UAAU,SAAS,OAAO,CAAC;AAAA,EACzE;AAAA,EACA,SAAS,MAAM,OAAO,WAAW,SAAS;AACtC,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ;AAAA,QACJ,GAAG,KAAK,KAAK;AAAA,QACb;AAAA,UACI;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,UAAU,SAAS,OAAO;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,OAAO;AACb,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,KAAK;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,OAAO,CAAC;AAAA,MACf,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,OAAO,CAAC;AAAA,MACf,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,YAAY,SAAS;AACjB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,OAAO,CAAC;AAAA,MACf,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,YAAY,SAAS;AACjB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,OAAO,CAAC;AAAA,MACf,WAAW;AAAA,MACX,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,WAAW,OAAO,SAAS;AACvB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN;AAAA,MACA,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW;AACX,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,WAAW;AACX,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,UAAU,SAAS,CAAC,WAAW;AAC3B,MAAI;AACJ,SAAO,IAAI,UAAU;AAAA,IACjB,QAAQ,CAAC;AAAA,IACT,UAAU,sBAAsB;AAAA,IAChC,SAAS,KAAK,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,YAAY,QAAQ,OAAO,SAAS,KAAK;AAAA,IAC9G,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,OAAO,OAAO;AACV,QAAI,KAAK,KAAK,QAAQ;AAClB,YAAM,OAAO,QAAQ,MAAM,IAAI;AAAA,IACnC;AACA,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,SAAS;AACtC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,WAAW,SAAS,CAAC,WAAW;AAC5B,SAAO,IAAI,WAAW;AAAA,IAClB,UAAU,sBAAsB;AAAA,IAChC,SAAS,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,WAAW;AAAA,IAC3E,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,UAAN,MAAM,iBAAgB,QAAQ;AAAA,EAC1B,OAAO,OAAO;AACV,QAAI,KAAK,KAAK,QAAQ;AAClB,YAAM,OAAO,IAAI,KAAK,MAAM,IAAI;AAAA,IACpC;AACA,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,MAAM;AACnC,YAAMA,OAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkBA,MAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAUA,KAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,MAAM,MAAM,KAAK,QAAQ,CAAC,GAAG;AAC7B,YAAMA,OAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkBA,MAAK;AAAA,QACnB,MAAM,aAAa;AAAA,MACvB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,SAAS,IAAI,YAAY;AAC/B,QAAI,MAAM;AACV,eAAW,SAAS,KAAK,KAAK,QAAQ;AAClC,UAAI,MAAM,SAAS,OAAO;AACtB,YAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,OAAO;AACpC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,YACf,WAAW;AAAA,YACX,OAAO;AAAA,YACP,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,UACV,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,MAAM,SAAS,OAAO;AAC3B,YAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,OAAO;AACpC,gBAAM,KAAK,gBAAgB,OAAO,GAAG;AACrC,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,SAAS,MAAM;AAAA,YACf,WAAW;AAAA,YACX,OAAO;AAAA,YACP,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,UACV,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,OACK;AACD,aAAK,YAAY,KAAK;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO;AAAA,MACH,QAAQ,OAAO;AAAA,MACf,OAAO,IAAI,KAAK,MAAM,KAAK,QAAQ,CAAC;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,UAAU,OAAO;AACb,WAAO,IAAI,SAAQ;AAAA,MACf,GAAG,KAAK;AAAA,MACR,QAAQ,CAAC,GAAG,KAAK,KAAK,QAAQ,KAAK;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,SAAS,SAAS;AAClB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,QAAQ,QAAQ;AAAA,MACvB,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,SAAS,SAAS;AAClB,WAAO,KAAK,UAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,QAAQ,QAAQ;AAAA,MACvB,SAAS,UAAU,SAAS,OAAO;AAAA,IACvC,CAAC;AAAA,EACL;AAAA,EACA,IAAI,UAAU;AACV,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO,OAAO,OAAO,IAAI,KAAK,GAAG,IAAI;AAAA,EACzC;AAAA,EACA,IAAI,UAAU;AACV,QAAI,MAAM;AACV,eAAW,MAAM,KAAK,KAAK,QAAQ;AAC/B,UAAI,GAAG,SAAS,OAAO;AACnB,YAAI,QAAQ,QAAQ,GAAG,QAAQ;AAC3B,gBAAM,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO,OAAO,OAAO,IAAI,KAAK,GAAG,IAAI;AAAA,EACzC;AACJ;AACA,QAAQ,SAAS,CAAC,WAAW;AACzB,SAAO,IAAI,QAAQ;AAAA,IACf,QAAQ,CAAC;AAAA,IACT,SAAS,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,WAAW;AAAA,IAC3E,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,YAAN,cAAwB,QAAQ;AAAA,EAC5B,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,QAAQ;AACrC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,UAAU,SAAS,CAAC,WAAW;AAC3B,SAAO,IAAI,UAAU;AAAA,IACjB,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,eAAN,cAA2B,QAAQ;AAAA,EAC/B,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,WAAW;AACxC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,aAAa,SAAS,CAAC,WAAW;AAC9B,SAAO,IAAI,aAAa;AAAA,IACpB,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,UAAN,cAAsB,QAAQ;AAAA,EAC1B,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,MAAM;AACnC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,QAAQ,SAAS,CAAC,WAAW;AACzB,SAAO,IAAI,QAAQ;AAAA,IACf,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,SAAN,cAAqB,QAAQ;AAAA,EACzB,cAAc;AACV,UAAM,GAAG,SAAS;AAElB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,OAAO,OAAO;AACV,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,OAAO,SAAS,CAAC,WAAW;AACxB,SAAO,IAAI,OAAO;AAAA,IACd,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,cAAc;AACV,UAAM,GAAG,SAAS;AAElB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,OAAO,OAAO;AACV,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,WAAW,SAAS,CAAC,WAAW;AAC5B,SAAO,IAAI,WAAW;AAAA,IAClB,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,WAAN,cAAuB,QAAQ;AAAA,EAC3B,OAAO,OAAO;AACV,UAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,sBAAkB,KAAK;AAAA,MACnB,MAAM,aAAa;AAAA,MACnB,UAAU,cAAc;AAAA,MACxB,UAAU,IAAI;AAAA,IAClB,CAAC;AACD,WAAO;AAAA,EACX;AACJ;AACA,SAAS,SAAS,CAAC,WAAW;AAC1B,SAAO,IAAI,SAAS;AAAA,IAChB,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,UAAN,cAAsB,QAAQ;AAAA,EAC1B,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,WAAW;AACxC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AACJ;AACA,QAAQ,SAAS,CAAC,WAAW;AACzB,SAAO,IAAI,QAAQ;AAAA,IACf,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,WAAN,MAAM,kBAAiB,QAAQ;AAAA,EAC3B,OAAO,OAAO;AACV,UAAM,EAAE,KAAK,OAAO,IAAI,KAAK,oBAAoB,KAAK;AACtD,UAAM,MAAM,KAAK;AACjB,QAAI,IAAI,eAAe,cAAc,OAAO;AACxC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,IAAI,gBAAgB,MAAM;AAC1B,YAAM,SAAS,IAAI,KAAK,SAAS,IAAI,YAAY;AACjD,YAAM,WAAW,IAAI,KAAK,SAAS,IAAI,YAAY;AACnD,UAAI,UAAU,UAAU;AACpB,0BAAkB,KAAK;AAAA,UACnB,MAAM,SAAS,aAAa,UAAU,aAAa;AAAA,UACnD,SAAU,WAAW,IAAI,YAAY,QAAQ;AAAA,UAC7C,SAAU,SAAS,IAAI,YAAY,QAAQ;AAAA,UAC3C,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,UACP,SAAS,IAAI,YAAY;AAAA,QAC7B,CAAC;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AACA,QAAI,IAAI,cAAc,MAAM;AACxB,UAAI,IAAI,KAAK,SAAS,IAAI,UAAU,OAAO;AACvC,0BAAkB,KAAK;AAAA,UACnB,MAAM,aAAa;AAAA,UACnB,SAAS,IAAI,UAAU;AAAA,UACvB,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,UACP,SAAS,IAAI,UAAU;AAAA,QAC3B,CAAC;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AACA,QAAI,IAAI,cAAc,MAAM;AACxB,UAAI,IAAI,KAAK,SAAS,IAAI,UAAU,OAAO;AACvC,0BAAkB,KAAK;AAAA,UACnB,MAAM,aAAa;AAAA,UACnB,SAAS,IAAI,UAAU;AAAA,UACvB,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,UACP,SAAS,IAAI,UAAU;AAAA,QAC3B,CAAC;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AACA,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,QAAQ,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,IAAI,CAAC,MAAM,MAAM;AAC9C,eAAO,IAAI,KAAK,YAAY,IAAI,mBAAmB,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC;AAAA,MAC9E,CAAC,CAAC,EAAE,KAAK,CAACC,YAAW;AACjB,eAAO,YAAY,WAAW,QAAQA,OAAM;AAAA,MAChD,CAAC;AAAA,IACL;AACA,UAAM,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,IAAI,CAAC,MAAM,MAAM;AAC1C,aAAO,IAAI,KAAK,WAAW,IAAI,mBAAmB,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC;AAAA,IAC7E,CAAC;AACD,WAAO,YAAY,WAAW,QAAQ,MAAM;AAAA,EAChD;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,WAAO,IAAI,UAAS;AAAA,MAChB,GAAG,KAAK;AAAA,MACR,WAAW,EAAE,OAAO,WAAW,SAAS,UAAU,SAAS,OAAO,EAAE;AAAA,IACxE,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,WAAO,IAAI,UAAS;AAAA,MAChB,GAAG,KAAK;AAAA,MACR,WAAW,EAAE,OAAO,WAAW,SAAS,UAAU,SAAS,OAAO,EAAE;AAAA,IACxE,CAAC;AAAA,EACL;AAAA,EACA,OAAO,KAAK,SAAS;AACjB,WAAO,IAAI,UAAS;AAAA,MAChB,GAAG,KAAK;AAAA,MACR,aAAa,EAAE,OAAO,KAAK,SAAS,UAAU,SAAS,OAAO,EAAE;AAAA,IACpE,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,IAAI,GAAG,OAAO;AAAA,EAC9B;AACJ;AACA,SAAS,SAAS,CAAC,QAAQ,WAAW;AAClC,SAAO,IAAI,SAAS;AAAA,IAChB,MAAM;AAAA,IACN,WAAW;AAAA,IACX,WAAW;AAAA,IACX,aAAa;AAAA,IACb,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,SAAS,eAAe,QAAQ;AAC5B,MAAI,kBAAkB,WAAW;AAC7B,UAAM,WAAW,CAAC;AAClB,eAAW,OAAO,OAAO,OAAO;AAC5B,YAAM,cAAc,OAAO,MAAM,GAAG;AACpC,eAAS,GAAG,IAAI,YAAY,OAAO,eAAe,WAAW,CAAC;AAAA,IAClE;AACA,WAAO,IAAI,UAAU;AAAA,MACjB,GAAG,OAAO;AAAA,MACV,OAAO,MAAM;AAAA,IACjB,CAAC;AAAA,EACL,WACS,kBAAkB,UAAU;AACjC,WAAO,IAAI,SAAS;AAAA,MAChB,GAAG,OAAO;AAAA,MACV,MAAM,eAAe,OAAO,OAAO;AAAA,IACvC,CAAC;AAAA,EACL,WACS,kBAAkB,aAAa;AACpC,WAAO,YAAY,OAAO,eAAe,OAAO,OAAO,CAAC,CAAC;AAAA,EAC7D,WACS,kBAAkB,aAAa;AACpC,WAAO,YAAY,OAAO,eAAe,OAAO,OAAO,CAAC,CAAC;AAAA,EAC7D,WACS,kBAAkB,UAAU;AACjC,WAAO,SAAS,OAAO,OAAO,MAAM,IAAI,CAAC,SAAS,eAAe,IAAI,CAAC,CAAC;AAAA,EAC3E,OACK;AACD,WAAO;AAAA,EACX;AACJ;AACA,IAAM,YAAN,MAAM,mBAAkB,QAAQ;AAAA,EAC5B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAKf,SAAK,YAAY,KAAK;AAqCtB,SAAK,UAAU,KAAK;AAAA,EACxB;AAAA,EACA,aAAa;AACT,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK;AAChB,UAAM,QAAQ,KAAK,KAAK,MAAM;AAC9B,UAAM,OAAO,KAAK,WAAW,KAAK;AAClC,WAAQ,KAAK,UAAU,EAAE,OAAO,KAAK;AAAA,EACzC;AAAA,EACA,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,QAAQ;AACrC,YAAMD,OAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkBA,MAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAUA,KAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,UAAM,EAAE,OAAO,MAAM,UAAU,IAAI,KAAK,WAAW;AACnD,UAAM,YAAY,CAAC;AACnB,QAAI,EAAE,KAAK,KAAK,oBAAoB,YAChC,KAAK,KAAK,gBAAgB,UAAU;AACpC,iBAAW,OAAO,IAAI,MAAM;AACxB,YAAI,CAAC,UAAU,SAAS,GAAG,GAAG;AAC1B,oBAAU,KAAK,GAAG;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,QAAQ,CAAC;AACf,eAAW,OAAO,WAAW;AACzB,YAAM,eAAe,MAAM,GAAG;AAC9B,YAAM,QAAQ,IAAI,KAAK,GAAG;AAC1B,YAAM,KAAK;AAAA,QACP,KAAK,EAAE,QAAQ,SAAS,OAAO,IAAI;AAAA,QACnC,OAAO,aAAa,OAAO,IAAI,mBAAmB,KAAK,OAAO,IAAI,MAAM,GAAG,CAAC;AAAA,QAC5E,WAAW,OAAO,IAAI;AAAA,MAC1B,CAAC;AAAA,IACL;AACA,QAAI,KAAK,KAAK,oBAAoB,UAAU;AACxC,YAAM,cAAc,KAAK,KAAK;AAC9B,UAAI,gBAAgB,eAAe;AAC/B,mBAAW,OAAO,WAAW;AACzB,gBAAM,KAAK;AAAA,YACP,KAAK,EAAE,QAAQ,SAAS,OAAO,IAAI;AAAA,YACnC,OAAO,EAAE,QAAQ,SAAS,OAAO,IAAI,KAAK,GAAG,EAAE;AAAA,UACnD,CAAC;AAAA,QACL;AAAA,MACJ,WACS,gBAAgB,UAAU;AAC/B,YAAI,UAAU,SAAS,GAAG;AACtB,4BAAkB,KAAK;AAAA,YACnB,MAAM,aAAa;AAAA,YACnB,MAAM;AAAA,UACV,CAAC;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ,WACS,gBAAgB,QAAS;AAAA,WAC7B;AACD,cAAM,IAAI,MAAM,sDAAsD;AAAA,MAC1E;AAAA,IACJ,OACK;AAED,YAAM,WAAW,KAAK,KAAK;AAC3B,iBAAW,OAAO,WAAW;AACzB,cAAM,QAAQ,IAAI,KAAK,GAAG;AAC1B,cAAM,KAAK;AAAA,UACP,KAAK,EAAE,QAAQ,SAAS,OAAO,IAAI;AAAA,UACnC,OAAO,SAAS;AAAA,YAAO,IAAI,mBAAmB,KAAK,OAAO,IAAI,MAAM,GAAG;AAAA;AAAA,UACvE;AAAA,UACA,WAAW,OAAO,IAAI;AAAA,QAC1B,CAAC;AAAA,MACL;AAAA,IACJ;AACA,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,QAAQ,QAAQ,EAClB,KAAK,YAAY;AAClB,cAAM,YAAY,CAAC;AACnB,mBAAW,QAAQ,OAAO;AACtB,gBAAM,MAAM,MAAM,KAAK;AACvB,gBAAM,QAAQ,MAAM,KAAK;AACzB,oBAAU,KAAK;AAAA,YACX;AAAA,YACA;AAAA,YACA,WAAW,KAAK;AAAA,UACpB,CAAC;AAAA,QACL;AACA,eAAO;AAAA,MACX,CAAC,EACI,KAAK,CAAC,cAAc;AACrB,eAAO,YAAY,gBAAgB,QAAQ,SAAS;AAAA,MACxD,CAAC;AAAA,IACL,OACK;AACD,aAAO,YAAY,gBAAgB,QAAQ,KAAK;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,KAAK,MAAM;AAAA,EAC3B;AAAA,EACA,OAAO,SAAS;AACZ,cAAU;AACV,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,aAAa;AAAA,MACb,GAAI,YAAY,SACV;AAAA,QACE,UAAU,CAAC,OAAO,QAAQ;AACtB,cAAI,IAAI,IAAI,IAAI;AAChB,gBAAM,gBAAgB,MAAM,MAAM,KAAK,KAAK,MAAM,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,OAAO,GAAG,EAAE,aAAa,QAAQ,OAAO,SAAS,KAAK,IAAI;AACvK,cAAI,MAAM,SAAS;AACf,mBAAO;AAAA,cACH,UAAU,KAAK,UAAU,SAAS,OAAO,EAAE,aAAa,QAAQ,OAAO,SAAS,KAAK;AAAA,YACzF;AACJ,iBAAO;AAAA,YACH,SAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ,IACE,CAAC;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,QAAQ;AACJ,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,aAAa;AAAA,IACjB,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,aAAa;AAAA,IACjB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,OAAO,cAAc;AACjB,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,OAAO,OAAO;AAAA,QACV,GAAG,KAAK,KAAK,MAAM;AAAA,QACnB,GAAG;AAAA,MACP;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,SAAS;AACX,UAAM,SAAS,IAAI,WAAU;AAAA,MACzB,aAAa,QAAQ,KAAK;AAAA,MAC1B,UAAU,QAAQ,KAAK;AAAA,MACvB,OAAO,OAAO;AAAA,QACV,GAAG,KAAK,KAAK,MAAM;AAAA,QACnB,GAAG,QAAQ,KAAK,MAAM;AAAA,MAC1B;AAAA,MACA,UAAU,sBAAsB;AAAA,IACpC,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCA,OAAO,KAAK,QAAQ;AAChB,WAAO,KAAK,QAAQ,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,SAAS,OAAO;AACZ,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,UAAU;AAAA,IACd,CAAC;AAAA,EACL;AAAA,EACA,KAAK,MAAM;AACP,UAAM,QAAQ,CAAC;AACf,SAAK,WAAW,IAAI,EAAE,QAAQ,CAAC,QAAQ;AACnC,UAAI,KAAK,GAAG,KAAK,KAAK,MAAM,GAAG,GAAG;AAC9B,cAAM,GAAG,IAAI,KAAK,MAAM,GAAG;AAAA,MAC/B;AAAA,IACJ,CAAC;AACD,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,OAAO,MAAM;AAAA,IACjB,CAAC;AAAA,EACL;AAAA,EACA,KAAK,MAAM;AACP,UAAM,QAAQ,CAAC;AACf,SAAK,WAAW,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAQ;AACzC,UAAI,CAAC,KAAK,GAAG,GAAG;AACZ,cAAM,GAAG,IAAI,KAAK,MAAM,GAAG;AAAA,MAC/B;AAAA,IACJ,CAAC;AACD,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,OAAO,MAAM;AAAA,IACjB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc;AACV,WAAO,eAAe,IAAI;AAAA,EAC9B;AAAA,EACA,QAAQ,MAAM;AACV,UAAM,WAAW,CAAC;AAClB,SAAK,WAAW,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAQ;AACzC,YAAM,cAAc,KAAK,MAAM,GAAG;AAClC,UAAI,QAAQ,CAAC,KAAK,GAAG,GAAG;AACpB,iBAAS,GAAG,IAAI;AAAA,MACpB,OACK;AACD,iBAAS,GAAG,IAAI,YAAY,SAAS;AAAA,MACzC;AAAA,IACJ,CAAC;AACD,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,OAAO,MAAM;AAAA,IACjB,CAAC;AAAA,EACL;AAAA,EACA,SAAS,MAAM;AACX,UAAM,WAAW,CAAC;AAClB,SAAK,WAAW,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAQ;AACzC,UAAI,QAAQ,CAAC,KAAK,GAAG,GAAG;AACpB,iBAAS,GAAG,IAAI,KAAK,MAAM,GAAG;AAAA,MAClC,OACK;AACD,cAAM,cAAc,KAAK,MAAM,GAAG;AAClC,YAAI,WAAW;AACf,eAAO,oBAAoB,aAAa;AACpC,qBAAW,SAAS,KAAK;AAAA,QAC7B;AACA,iBAAS,GAAG,IAAI;AAAA,MACpB;AAAA,IACJ,CAAC;AACD,WAAO,IAAI,WAAU;AAAA,MACjB,GAAG,KAAK;AAAA,MACR,OAAO,MAAM;AAAA,IACjB,CAAC;AAAA,EACL;AAAA,EACA,QAAQ;AACJ,WAAO,cAAc,KAAK,WAAW,KAAK,KAAK,CAAC;AAAA,EACpD;AACJ;AACA,UAAU,SAAS,CAAC,OAAO,WAAW;AAClC,SAAO,IAAI,UAAU;AAAA,IACjB,OAAO,MAAM;AAAA,IACb,aAAa;AAAA,IACb,UAAU,SAAS,OAAO;AAAA,IAC1B,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,UAAU,eAAe,CAAC,OAAO,WAAW;AACxC,SAAO,IAAI,UAAU;AAAA,IACjB,OAAO,MAAM;AAAA,IACb,aAAa;AAAA,IACb,UAAU,SAAS,OAAO;AAAA,IAC1B,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,UAAU,aAAa,CAAC,OAAO,WAAW;AACtC,SAAO,IAAI,UAAU;AAAA,IACjB;AAAA,IACA,aAAa;AAAA,IACb,UAAU,SAAS,OAAO;AAAA,IAC1B,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,WAAN,cAAuB,QAAQ;AAAA,EAC3B,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,UAAM,UAAU,KAAK,KAAK;AAC1B,aAAS,cAAc,SAAS;AAE5B,iBAAW,UAAU,SAAS;AAC1B,YAAI,OAAO,OAAO,WAAW,SAAS;AAClC,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ;AACA,iBAAW,UAAU,SAAS;AAC1B,YAAI,OAAO,OAAO,WAAW,SAAS;AAElC,cAAI,OAAO,OAAO,KAAK,GAAG,OAAO,IAAI,OAAO,MAAM;AAClD,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ;AAEA,YAAM,cAAc,QAAQ,IAAI,CAAC,WAAW,IAAI,SAAS,OAAO,IAAI,OAAO,MAAM,CAAC;AAClF,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,QAAQ,IAAI,QAAQ,IAAI,OAAO,WAAW;AAC7C,cAAM,WAAW;AAAA,UACb,GAAG;AAAA,UACH,QAAQ;AAAA,YACJ,GAAG,IAAI;AAAA,YACP,QAAQ,CAAC;AAAA,UACb;AAAA,UACA,QAAQ;AAAA,QACZ;AACA,eAAO;AAAA,UACH,QAAQ,MAAM,OAAO,YAAY;AAAA,YAC7B,MAAM,IAAI;AAAA,YACV,MAAM,IAAI;AAAA,YACV,QAAQ;AAAA,UACZ,CAAC;AAAA,UACD,KAAK;AAAA,QACT;AAAA,MACJ,CAAC,CAAC,EAAE,KAAK,aAAa;AAAA,IAC1B,OACK;AACD,UAAI,QAAQ;AACZ,YAAM,SAAS,CAAC;AAChB,iBAAW,UAAU,SAAS;AAC1B,cAAM,WAAW;AAAA,UACb,GAAG;AAAA,UACH,QAAQ;AAAA,YACJ,GAAG,IAAI;AAAA,YACP,QAAQ,CAAC;AAAA,UACb;AAAA,UACA,QAAQ;AAAA,QACZ;AACA,cAAM,SAAS,OAAO,WAAW;AAAA,UAC7B,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AACD,YAAI,OAAO,WAAW,SAAS;AAC3B,iBAAO;AAAA,QACX,WACS,OAAO,WAAW,WAAW,CAAC,OAAO;AAC1C,kBAAQ,EAAE,QAAQ,KAAK,SAAS;AAAA,QACpC;AACA,YAAI,SAAS,OAAO,OAAO,QAAQ;AAC/B,iBAAO,KAAK,SAAS,OAAO,MAAM;AAAA,QACtC;AAAA,MACJ;AACA,UAAI,OAAO;AACP,YAAI,OAAO,OAAO,KAAK,GAAG,MAAM,IAAI,OAAO,MAAM;AACjD,eAAO,MAAM;AAAA,MACjB;AACA,YAAM,cAAc,OAAO,IAAI,CAACE,YAAW,IAAI,SAASA,OAAM,CAAC;AAC/D,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,SAAS,SAAS,CAAC,OAAO,WAAW;AACjC,SAAO,IAAI,SAAS;AAAA,IAChB,SAAS;AAAA,IACT,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AAQA,IAAM,mBAAmB,CAAC,SAAS;AAC/B,MAAI,gBAAgB,SAAS;AACzB,WAAO,iBAAiB,KAAK,MAAM;AAAA,EACvC,WACS,gBAAgB,YAAY;AACjC,WAAO,iBAAiB,KAAK,UAAU,CAAC;AAAA,EAC5C,WACS,gBAAgB,YAAY;AACjC,WAAO,CAAC,KAAK,KAAK;AAAA,EACtB,WACS,gBAAgB,SAAS;AAC9B,WAAO,KAAK;AAAA,EAChB,WACS,gBAAgB,eAAe;AAEpC,WAAO,KAAK,aAAa,KAAK,IAAI;AAAA,EACtC,WACS,gBAAgB,YAAY;AACjC,WAAO,iBAAiB,KAAK,KAAK,SAAS;AAAA,EAC/C,WACS,gBAAgB,cAAc;AACnC,WAAO,CAAC,MAAS;AAAA,EACrB,WACS,gBAAgB,SAAS;AAC9B,WAAO,CAAC,IAAI;AAAA,EAChB,WACS,gBAAgB,aAAa;AAClC,WAAO,CAAC,QAAW,GAAG,iBAAiB,KAAK,OAAO,CAAC,CAAC;AAAA,EACzD,WACS,gBAAgB,aAAa;AAClC,WAAO,CAAC,MAAM,GAAG,iBAAiB,KAAK,OAAO,CAAC,CAAC;AAAA,EACpD,WACS,gBAAgB,YAAY;AACjC,WAAO,iBAAiB,KAAK,OAAO,CAAC;AAAA,EACzC,WACS,gBAAgB,aAAa;AAClC,WAAO,iBAAiB,KAAK,OAAO,CAAC;AAAA,EACzC,WACS,gBAAgB,UAAU;AAC/B,WAAO,iBAAiB,KAAK,KAAK,SAAS;AAAA,EAC/C,OACK;AACD,WAAO,CAAC;AAAA,EACZ;AACJ;AACA,IAAM,wBAAN,MAAM,+BAA8B,QAAQ;AAAA,EACxC,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,QAAI,IAAI,eAAe,cAAc,QAAQ;AACzC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,gBAAgB,KAAK;AAC3B,UAAM,qBAAqB,IAAI,KAAK,aAAa;AACjD,UAAM,SAAS,KAAK,WAAW,IAAI,kBAAkB;AACrD,QAAI,CAAC,QAAQ;AACT,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,SAAS,MAAM,KAAK,KAAK,WAAW,KAAK,CAAC;AAAA,QAC1C,MAAM,CAAC,aAAa;AAAA,MACxB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,OAAO,YAAY;AAAA,QACtB,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,QAAQ;AAAA,MACZ,CAAC;AAAA,IACL,OACK;AACD,aAAO,OAAO,WAAW;AAAA,QACrB,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,QAAQ;AAAA,MACZ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,OAAO,eAAe,SAAS,QAAQ;AAE1C,UAAM,aAAa,oBAAI,IAAI;AAE3B,eAAW,QAAQ,SAAS;AACxB,YAAM,sBAAsB,iBAAiB,KAAK,MAAM,aAAa,CAAC;AACtE,UAAI,CAAC,oBAAoB,QAAQ;AAC7B,cAAM,IAAI,MAAM,mCAAmC,aAAa,mDAAmD;AAAA,MACvH;AACA,iBAAW,SAAS,qBAAqB;AACrC,YAAI,WAAW,IAAI,KAAK,GAAG;AACvB,gBAAM,IAAI,MAAM,0BAA0B,OAAO,aAAa,CAAC,wBAAwB,OAAO,KAAK,CAAC,EAAE;AAAA,QAC1G;AACA,mBAAW,IAAI,OAAO,IAAI;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO,IAAI,uBAAsB;AAAA,MAC7B,UAAU,sBAAsB;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG,oBAAoB,MAAM;AAAA,IACjC,CAAC;AAAA,EACL;AACJ;AACA,SAAS,YAAY,GAAG,GAAG;AACvB,QAAM,QAAQ,cAAc,CAAC;AAC7B,QAAM,QAAQ,cAAc,CAAC;AAC7B,MAAI,MAAM,GAAG;AACT,WAAO,EAAE,OAAO,MAAM,MAAM,EAAE;AAAA,EAClC,WACS,UAAU,cAAc,UAAU,UAAU,cAAc,QAAQ;AACvE,UAAM,QAAQ,KAAK,WAAW,CAAC;AAC/B,UAAM,aAAa,KACd,WAAW,CAAC,EACZ,OAAO,CAAC,QAAQ,MAAM,QAAQ,GAAG,MAAM,EAAE;AAC9C,UAAM,SAAS,EAAE,GAAG,GAAG,GAAG,EAAE;AAC5B,eAAW,OAAO,YAAY;AAC1B,YAAM,cAAc,YAAY,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC;AAC9C,UAAI,CAAC,YAAY,OAAO;AACpB,eAAO,EAAE,OAAO,MAAM;AAAA,MAC1B;AACA,aAAO,GAAG,IAAI,YAAY;AAAA,IAC9B;AACA,WAAO,EAAE,OAAO,MAAM,MAAM,OAAO;AAAA,EACvC,WACS,UAAU,cAAc,SAAS,UAAU,cAAc,OAAO;AACrE,QAAI,EAAE,WAAW,EAAE,QAAQ;AACvB,aAAO,EAAE,OAAO,MAAM;AAAA,IAC1B;AACA,UAAM,WAAW,CAAC;AAClB,aAAS,QAAQ,GAAG,QAAQ,EAAE,QAAQ,SAAS;AAC3C,YAAM,QAAQ,EAAE,KAAK;AACrB,YAAM,QAAQ,EAAE,KAAK;AACrB,YAAM,cAAc,YAAY,OAAO,KAAK;AAC5C,UAAI,CAAC,YAAY,OAAO;AACpB,eAAO,EAAE,OAAO,MAAM;AAAA,MAC1B;AACA,eAAS,KAAK,YAAY,IAAI;AAAA,IAClC;AACA,WAAO,EAAE,OAAO,MAAM,MAAM,SAAS;AAAA,EACzC,WACS,UAAU,cAAc,QAC7B,UAAU,cAAc,QACxB,CAAC,MAAM,CAAC,GAAG;AACX,WAAO,EAAE,OAAO,MAAM,MAAM,EAAE;AAAA,EAClC,OACK;AACD,WAAO,EAAE,OAAO,MAAM;AAAA,EAC1B;AACJ;AACA,IAAM,kBAAN,cAA8B,QAAQ;AAAA,EAClC,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,UAAM,eAAe,CAAC,YAAY,gBAAgB;AAC9C,UAAI,UAAU,UAAU,KAAK,UAAU,WAAW,GAAG;AACjD,eAAO;AAAA,MACX;AACA,YAAM,SAAS,YAAY,WAAW,OAAO,YAAY,KAAK;AAC9D,UAAI,CAAC,OAAO,OAAO;AACf,0BAAkB,KAAK;AAAA,UACnB,MAAM,aAAa;AAAA,QACvB,CAAC;AACD,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,UAAU,KAAK,QAAQ,WAAW,GAAG;AAC7C,eAAO,MAAM;AAAA,MACjB;AACA,aAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,OAAO,KAAK;AAAA,IACtD;AACA,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,QAAQ,IAAI;AAAA,QACf,KAAK,KAAK,KAAK,YAAY;AAAA,UACvB,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AAAA,QACD,KAAK,KAAK,MAAM,YAAY;AAAA,UACxB,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AAAA,MACL,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,KAAK,MAAM,aAAa,MAAM,KAAK,CAAC;AAAA,IACxD,OACK;AACD,aAAO,aAAa,KAAK,KAAK,KAAK,WAAW;AAAA,QAC1C,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,QAAQ;AAAA,MACZ,CAAC,GAAG,KAAK,KAAK,MAAM,WAAW;AAAA,QAC3B,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,QAAQ;AAAA,MACZ,CAAC,CAAC;AAAA,IACN;AAAA,EACJ;AACJ;AACA,gBAAgB,SAAS,CAAC,MAAM,OAAO,WAAW;AAC9C,SAAO,IAAI,gBAAgB;AAAA,IACvB;AAAA,IACA;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,WAAN,MAAM,kBAAiB,QAAQ;AAAA,EAC3B,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,QAAI,IAAI,eAAe,cAAc,OAAO;AACxC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,IAAI,KAAK,SAAS,KAAK,KAAK,MAAM,QAAQ;AAC1C,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,SAAS,KAAK,KAAK,MAAM;AAAA,QACzB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,MAAM;AAAA,MACV,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,OAAO,KAAK,KAAK;AACvB,QAAI,CAAC,QAAQ,IAAI,KAAK,SAAS,KAAK,KAAK,MAAM,QAAQ;AACnD,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,SAAS,KAAK,KAAK,MAAM;AAAA,QACzB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,MAAM;AAAA,MACV,CAAC;AACD,aAAO,MAAM;AAAA,IACjB;AACA,UAAM,QAAQ,CAAC,GAAG,IAAI,IAAI,EACrB,IAAI,CAAC,MAAM,cAAc;AAC1B,YAAM,SAAS,KAAK,KAAK,MAAM,SAAS,KAAK,KAAK,KAAK;AACvD,UAAI,CAAC;AACD,eAAO;AACX,aAAO,OAAO,OAAO,IAAI,mBAAmB,KAAK,MAAM,IAAI,MAAM,SAAS,CAAC;AAAA,IAC/E,CAAC,EACI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACtB,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,QAAQ,IAAI,KAAK,EAAE,KAAK,CAAC,YAAY;AACxC,eAAO,YAAY,WAAW,QAAQ,OAAO;AAAA,MACjD,CAAC;AAAA,IACL,OACK;AACD,aAAO,YAAY,WAAW,QAAQ,KAAK;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,KAAK,MAAM;AACP,WAAO,IAAI,UAAS;AAAA,MAChB,GAAG,KAAK;AAAA,MACR;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACA,SAAS,SAAS,CAAC,SAAS,WAAW;AACnC,MAAI,CAAC,MAAM,QAAQ,OAAO,GAAG;AACzB,UAAM,IAAI,MAAM,uDAAuD;AAAA,EAC3E;AACA,SAAO,IAAI,SAAS;AAAA,IAChB,OAAO;AAAA,IACP,UAAU,sBAAsB;AAAA,IAChC,MAAM;AAAA,IACN,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,YAAN,MAAM,mBAAkB,QAAQ;AAAA,EAC5B,IAAI,YAAY;AACZ,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,QAAI,IAAI,eAAe,cAAc,QAAQ;AACzC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,QAAQ,CAAC;AACf,UAAM,UAAU,KAAK,KAAK;AAC1B,UAAM,YAAY,KAAK,KAAK;AAC5B,eAAW,OAAO,IAAI,MAAM;AACxB,YAAM,KAAK;AAAA,QACP,KAAK,QAAQ,OAAO,IAAI,mBAAmB,KAAK,KAAK,IAAI,MAAM,GAAG,CAAC;AAAA,QACnE,OAAO,UAAU,OAAO,IAAI,mBAAmB,KAAK,IAAI,KAAK,GAAG,GAAG,IAAI,MAAM,GAAG,CAAC;AAAA,QACjF,WAAW,OAAO,IAAI;AAAA,MAC1B,CAAC;AAAA,IACL;AACA,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,YAAY,iBAAiB,QAAQ,KAAK;AAAA,IACrD,OACK;AACD,aAAO,YAAY,gBAAgB,QAAQ,KAAK;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,OAAO,OAAO,OAAO,QAAQ,OAAO;AAChC,QAAI,kBAAkB,SAAS;AAC3B,aAAO,IAAI,WAAU;AAAA,QACjB,SAAS;AAAA,QACT,WAAW;AAAA,QACX,UAAU,sBAAsB;AAAA,QAChC,GAAG,oBAAoB,KAAK;AAAA,MAChC,CAAC;AAAA,IACL;AACA,WAAO,IAAI,WAAU;AAAA,MACjB,SAAS,UAAU,OAAO;AAAA,MAC1B,WAAW;AAAA,MACX,UAAU,sBAAsB;AAAA,MAChC,GAAG,oBAAoB,MAAM;AAAA,IACjC,CAAC;AAAA,EACL;AACJ;AACA,IAAM,SAAN,cAAqB,QAAQ;AAAA,EACzB,IAAI,YAAY;AACZ,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,QAAI,IAAI,eAAe,cAAc,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,UAAU,KAAK,KAAK;AAC1B,UAAM,YAAY,KAAK,KAAK;AAC5B,UAAM,QAAQ,CAAC,GAAG,IAAI,KAAK,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,GAAG,UAAU;AAC/D,aAAO;AAAA,QACH,KAAK,QAAQ,OAAO,IAAI,mBAAmB,KAAK,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,CAAC;AAAA,QAC9E,OAAO,UAAU,OAAO,IAAI,mBAAmB,KAAK,OAAO,IAAI,MAAM,CAAC,OAAO,OAAO,CAAC,CAAC;AAAA,MAC1F;AAAA,IACJ,CAAC;AACD,QAAI,IAAI,OAAO,OAAO;AAClB,YAAM,WAAW,oBAAI,IAAI;AACzB,aAAO,QAAQ,QAAQ,EAAE,KAAK,YAAY;AACtC,mBAAW,QAAQ,OAAO;AACtB,gBAAM,MAAM,MAAM,KAAK;AACvB,gBAAM,QAAQ,MAAM,KAAK;AACzB,cAAI,IAAI,WAAW,aAAa,MAAM,WAAW,WAAW;AACxD,mBAAO;AAAA,UACX;AACA,cAAI,IAAI,WAAW,WAAW,MAAM,WAAW,SAAS;AACpD,mBAAO,MAAM;AAAA,UACjB;AACA,mBAAS,IAAI,IAAI,OAAO,MAAM,KAAK;AAAA,QACvC;AACA,eAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,SAAS;AAAA,MACnD,CAAC;AAAA,IACL,OACK;AACD,YAAM,WAAW,oBAAI,IAAI;AACzB,iBAAW,QAAQ,OAAO;AACtB,cAAM,MAAM,KAAK;AACjB,cAAM,QAAQ,KAAK;AACnB,YAAI,IAAI,WAAW,aAAa,MAAM,WAAW,WAAW;AACxD,iBAAO;AAAA,QACX;AACA,YAAI,IAAI,WAAW,WAAW,MAAM,WAAW,SAAS;AACpD,iBAAO,MAAM;AAAA,QACjB;AACA,iBAAS,IAAI,IAAI,OAAO,MAAM,KAAK;AAAA,MACvC;AACA,aAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,SAAS;AAAA,IACnD;AAAA,EACJ;AACJ;AACA,OAAO,SAAS,CAAC,SAAS,WAAW,WAAW;AAC5C,SAAO,IAAI,OAAO;AAAA,IACd;AAAA,IACA;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,SAAN,MAAM,gBAAe,QAAQ;AAAA,EACzB,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,QAAI,IAAI,eAAe,cAAc,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,MAAM,KAAK;AACjB,QAAI,IAAI,YAAY,MAAM;AACtB,UAAI,IAAI,KAAK,OAAO,IAAI,QAAQ,OAAO;AACnC,0BAAkB,KAAK;AAAA,UACnB,MAAM,aAAa;AAAA,UACnB,SAAS,IAAI,QAAQ;AAAA,UACrB,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,UACP,SAAS,IAAI,QAAQ;AAAA,QACzB,CAAC;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AACA,QAAI,IAAI,YAAY,MAAM;AACtB,UAAI,IAAI,KAAK,OAAO,IAAI,QAAQ,OAAO;AACnC,0BAAkB,KAAK;AAAA,UACnB,MAAM,aAAa;AAAA,UACnB,SAAS,IAAI,QAAQ;AAAA,UACrB,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,UACP,SAAS,IAAI,QAAQ;AAAA,QACzB,CAAC;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,KAAK;AAC5B,aAAS,YAAYC,WAAU;AAC3B,YAAM,YAAY,oBAAI,IAAI;AAC1B,iBAAW,WAAWA,WAAU;AAC5B,YAAI,QAAQ,WAAW;AACnB,iBAAO;AACX,YAAI,QAAQ,WAAW;AACnB,iBAAO,MAAM;AACjB,kBAAU,IAAI,QAAQ,KAAK;AAAA,MAC/B;AACA,aAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,UAAU;AAAA,IACpD;AACA,UAAM,WAAW,CAAC,GAAG,IAAI,KAAK,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,MAAM,UAAU,OAAO,IAAI,mBAAmB,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;AACzH,QAAI,IAAI,OAAO,OAAO;AAClB,aAAO,QAAQ,IAAI,QAAQ,EAAE,KAAK,CAACA,cAAa,YAAYA,SAAQ,CAAC;AAAA,IACzE,OACK;AACD,aAAO,YAAY,QAAQ;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,IAAI,SAAS,SAAS;AAClB,WAAO,IAAI,QAAO;AAAA,MACd,GAAG,KAAK;AAAA,MACR,SAAS,EAAE,OAAO,SAAS,SAAS,UAAU,SAAS,OAAO,EAAE;AAAA,IACpE,CAAC;AAAA,EACL;AAAA,EACA,IAAI,SAAS,SAAS;AAClB,WAAO,IAAI,QAAO;AAAA,MACd,GAAG,KAAK;AAAA,MACR,SAAS,EAAE,OAAO,SAAS,SAAS,UAAU,SAAS,OAAO,EAAE;AAAA,IACpE,CAAC;AAAA,EACL;AAAA,EACA,KAAK,MAAM,SAAS;AAChB,WAAO,KAAK,IAAI,MAAM,OAAO,EAAE,IAAI,MAAM,OAAO;AAAA,EACpD;AAAA,EACA,SAAS,SAAS;AACd,WAAO,KAAK,IAAI,GAAG,OAAO;AAAA,EAC9B;AACJ;AACA,OAAO,SAAS,CAAC,WAAW,WAAW;AACnC,SAAO,IAAI,OAAO;AAAA,IACd;AAAA,IACA,SAAS;AAAA,IACT,SAAS;AAAA,IACT,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,cAAN,MAAM,qBAAoB,QAAQ;AAAA,EAC9B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW,KAAK;AAAA,EACzB;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,QAAI,IAAI,eAAe,cAAc,UAAU;AAC3C,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,aAAS,cAAc,MAAM,OAAO;AAChC,aAAO,UAAU;AAAA,QACb,MAAM;AAAA,QACN,MAAM,IAAI;AAAA,QACV,WAAW;AAAA,UACP,IAAI,OAAO;AAAA,UACX,IAAI;AAAA,UACJ,YAAY;AAAA,UACZ;AAAA,QACJ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAAA,QACnB,WAAW;AAAA,UACP,MAAM,aAAa;AAAA,UACnB,gBAAgB;AAAA,QACpB;AAAA,MACJ,CAAC;AAAA,IACL;AACA,aAAS,iBAAiB,SAAS,OAAO;AACtC,aAAO,UAAU;AAAA,QACb,MAAM;AAAA,QACN,MAAM,IAAI;AAAA,QACV,WAAW;AAAA,UACP,IAAI,OAAO;AAAA,UACX,IAAI;AAAA,UACJ,YAAY;AAAA,UACZ;AAAA,QACJ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAAA,QACnB,WAAW;AAAA,UACP,MAAM,aAAa;AAAA,UACnB,iBAAiB;AAAA,QACrB;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,SAAS,EAAE,UAAU,IAAI,OAAO,mBAAmB;AACzD,UAAM,KAAK,IAAI;AACf,QAAI,KAAK,KAAK,mBAAmB,YAAY;AAIzC,YAAM,KAAK;AACX,aAAO,GAAG,kBAAmB,MAAM;AAC/B,cAAM,QAAQ,IAAI,SAAS,CAAC,CAAC;AAC7B,cAAM,aAAa,MAAM,GAAG,KAAK,KAC5B,WAAW,MAAM,MAAM,EACvB,MAAM,CAAC,MAAM;AACd,gBAAM,SAAS,cAAc,MAAM,CAAC,CAAC;AACrC,gBAAM;AAAA,QACV,CAAC;AACD,cAAM,SAAS,MAAM,QAAQ,MAAM,IAAI,MAAM,UAAU;AACvD,cAAM,gBAAgB,MAAM,GAAG,KAAK,QAAQ,KAAK,KAC5C,WAAW,QAAQ,MAAM,EACzB,MAAM,CAAC,MAAM;AACd,gBAAM,SAAS,iBAAiB,QAAQ,CAAC,CAAC;AAC1C,gBAAM;AAAA,QACV,CAAC;AACD,eAAO;AAAA,MACX,CAAC;AAAA,IACL,OACK;AAID,YAAM,KAAK;AACX,aAAO,GAAG,YAAa,MAAM;AACzB,cAAM,aAAa,GAAG,KAAK,KAAK,UAAU,MAAM,MAAM;AACtD,YAAI,CAAC,WAAW,SAAS;AACrB,gBAAM,IAAI,SAAS,CAAC,cAAc,MAAM,WAAW,KAAK,CAAC,CAAC;AAAA,QAC9D;AACA,cAAM,SAAS,QAAQ,MAAM,IAAI,MAAM,WAAW,IAAI;AACtD,cAAM,gBAAgB,GAAG,KAAK,QAAQ,UAAU,QAAQ,MAAM;AAC9D,YAAI,CAAC,cAAc,SAAS;AACxB,gBAAM,IAAI,SAAS,CAAC,iBAAiB,QAAQ,cAAc,KAAK,CAAC,CAAC;AAAA,QACtE;AACA,eAAO,cAAc;AAAA,MACzB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,aAAa;AACT,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,aAAa;AACT,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,QAAQ,OAAO;AACX,WAAO,IAAI,aAAY;AAAA,MACnB,GAAG,KAAK;AAAA,MACR,MAAM,SAAS,OAAO,KAAK,EAAE,KAAK,WAAW,OAAO,CAAC;AAAA,IACzD,CAAC;AAAA,EACL;AAAA,EACA,QAAQ,YAAY;AAChB,WAAO,IAAI,aAAY;AAAA,MACnB,GAAG,KAAK;AAAA,MACR,SAAS;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EACA,UAAU,MAAM;AACZ,UAAM,gBAAgB,KAAK,MAAM,IAAI;AACrC,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,MAAM;AAClB,UAAM,gBAAgB,KAAK,MAAM,IAAI;AACrC,WAAO;AAAA,EACX;AAAA,EACA,OAAO,OAAO,MAAM,SAAS,QAAQ;AACjC,WAAO,IAAI,aAAY;AAAA,MACnB,MAAO,OACD,OACA,SAAS,OAAO,CAAC,CAAC,EAAE,KAAK,WAAW,OAAO,CAAC;AAAA,MAClD,SAAS,WAAW,WAAW,OAAO;AAAA,MACtC,UAAU,sBAAsB;AAAA,MAChC,GAAG,oBAAoB,MAAM;AAAA,IACjC,CAAC;AAAA,EACL;AACJ;AACA,IAAM,UAAN,cAAsB,QAAQ;AAAA,EAC1B,IAAI,SAAS;AACT,WAAO,KAAK,KAAK,OAAO;AAAA,EAC5B;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,UAAM,aAAa,KAAK,KAAK,OAAO;AACpC,WAAO,WAAW,OAAO,EAAE,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,CAAC;AAAA,EAC5E;AACJ;AACA,QAAQ,SAAS,CAAC,QAAQ,WAAW;AACjC,SAAO,IAAI,QAAQ;AAAA,IACf;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,OAAO,OAAO;AACV,QAAI,MAAM,SAAS,KAAK,KAAK,OAAO;AAChC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,UAAU,IAAI;AAAA,QACd,MAAM,aAAa;AAAA,QACnB,UAAU,KAAK,KAAK;AAAA,MACxB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,EAAE,QAAQ,SAAS,OAAO,MAAM,KAAK;AAAA,EAChD;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,WAAW,SAAS,CAAC,OAAO,WAAW;AACnC,SAAO,IAAI,WAAW;AAAA,IAClB;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,SAAS,cAAc,QAAQ,QAAQ;AACnC,SAAO,IAAI,QAAQ;AAAA,IACf;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,UAAN,MAAM,iBAAgB,QAAQ;AAAA,EAC1B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,mBAAe,IAAI,MAAM,MAAM;AAAA,EACnC;AAAA,EACA,OAAO,OAAO;AACV,QAAI,OAAO,MAAM,SAAS,UAAU;AAChC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,YAAM,iBAAiB,KAAK,KAAK;AACjC,wBAAkB,KAAK;AAAA,QACnB,UAAU,KAAK,WAAW,cAAc;AAAA,QACxC,UAAU,IAAI;AAAA,QACd,MAAM,aAAa;AAAA,MACvB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,CAAC,uBAAuB,MAAM,gBAAgB,GAAG,GAAG;AACpD,6BAAuB,MAAM,gBAAgB,IAAI,IAAI,KAAK,KAAK,MAAM,GAAG,GAAG;AAAA,IAC/E;AACA,QAAI,CAAC,uBAAuB,MAAM,gBAAgB,GAAG,EAAE,IAAI,MAAM,IAAI,GAAG;AACpE,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,YAAM,iBAAiB,KAAK,KAAK;AACjC,wBAAkB,KAAK;AAAA,QACnB,UAAU,IAAI;AAAA,QACd,MAAM,aAAa;AAAA,QACnB,SAAS;AAAA,MACb,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,OAAO;AACP,UAAM,aAAa,CAAC;AACpB,eAAW,OAAO,KAAK,KAAK,QAAQ;AAChC,iBAAW,GAAG,IAAI;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,SAAS;AACT,UAAM,aAAa,CAAC;AACpB,eAAW,OAAO,KAAK,KAAK,QAAQ;AAChC,iBAAW,GAAG,IAAI;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,OAAO;AACP,UAAM,aAAa,CAAC;AACpB,eAAW,OAAO,KAAK,KAAK,QAAQ;AAChC,iBAAW,GAAG,IAAI;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,QAAQ,QAAQ,SAAS,KAAK,MAAM;AAChC,WAAO,SAAQ,OAAO,QAAQ;AAAA,MAC1B,GAAG,KAAK;AAAA,MACR,GAAG;AAAA,IACP,CAAC;AAAA,EACL;AAAA,EACA,QAAQ,QAAQ,SAAS,KAAK,MAAM;AAChC,WAAO,SAAQ,OAAO,KAAK,QAAQ,OAAO,CAAC,QAAQ,CAAC,OAAO,SAAS,GAAG,CAAC,GAAG;AAAA,MACvE,GAAG,KAAK;AAAA,MACR,GAAG;AAAA,IACP,CAAC;AAAA,EACL;AACJ;AACA,iBAAiB,oBAAI,QAAQ;AAC7B,QAAQ,SAAS;AACjB,IAAM,gBAAN,cAA4B,QAAQ;AAAA,EAChC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,yBAAqB,IAAI,MAAM,MAAM;AAAA,EACzC;AAAA,EACA,OAAO,OAAO;AACV,UAAM,mBAAmB,KAAK,mBAAmB,KAAK,KAAK,MAAM;AACjE,UAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,QAAI,IAAI,eAAe,cAAc,UACjC,IAAI,eAAe,cAAc,QAAQ;AACzC,YAAM,iBAAiB,KAAK,aAAa,gBAAgB;AACzD,wBAAkB,KAAK;AAAA,QACnB,UAAU,KAAK,WAAW,cAAc;AAAA,QACxC,UAAU,IAAI;AAAA,QACd,MAAM,aAAa;AAAA,MACvB,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,CAAC,uBAAuB,MAAM,sBAAsB,GAAG,GAAG;AAC1D,6BAAuB,MAAM,sBAAsB,IAAI,IAAI,KAAK,mBAAmB,KAAK,KAAK,MAAM,CAAC,GAAG,GAAG;AAAA,IAC9G;AACA,QAAI,CAAC,uBAAuB,MAAM,sBAAsB,GAAG,EAAE,IAAI,MAAM,IAAI,GAAG;AAC1E,YAAM,iBAAiB,KAAK,aAAa,gBAAgB;AACzD,wBAAkB,KAAK;AAAA,QACnB,UAAU,IAAI;AAAA,QACd,MAAM,aAAa;AAAA,QACnB,SAAS;AAAA,MACb,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,GAAG,MAAM,IAAI;AAAA,EACxB;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,uBAAuB,oBAAI,QAAQ;AACnC,cAAc,SAAS,CAAC,QAAQ,WAAW;AACvC,SAAO,IAAI,cAAc;AAAA,IACrB;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,SAAS;AACL,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,QAAI,IAAI,eAAe,cAAc,WACjC,IAAI,OAAO,UAAU,OAAO;AAC5B,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,UAAM,cAAc,IAAI,eAAe,cAAc,UAC/C,IAAI,OACJ,QAAQ,QAAQ,IAAI,IAAI;AAC9B,WAAO,GAAG,YAAY,KAAK,CAAC,SAAS;AACjC,aAAO,KAAK,KAAK,KAAK,WAAW,MAAM;AAAA,QACnC,MAAM,IAAI;AAAA,QACV,UAAU,IAAI,OAAO;AAAA,MACzB,CAAC;AAAA,IACL,CAAC,CAAC;AAAA,EACN;AACJ;AACA,WAAW,SAAS,CAAC,QAAQ,WAAW;AACpC,SAAO,IAAI,WAAW;AAAA,IAClB,MAAM;AAAA,IACN,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,YAAY;AACR,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,aAAa;AACT,WAAO,KAAK,KAAK,OAAO,KAAK,aAAa,sBAAsB,aAC1D,KAAK,KAAK,OAAO,WAAW,IAC5B,KAAK,KAAK;AAAA,EACpB;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,UAAM,SAAS,KAAK,KAAK,UAAU;AACnC,UAAM,WAAW;AAAA,MACb,UAAU,CAAC,QAAQ;AACf,0BAAkB,KAAK,GAAG;AAC1B,YAAI,IAAI,OAAO;AACX,iBAAO,MAAM;AAAA,QACjB,OACK;AACD,iBAAO,MAAM;AAAA,QACjB;AAAA,MACJ;AAAA,MACA,IAAI,OAAO;AACP,eAAO,IAAI;AAAA,MACf;AAAA,IACJ;AACA,aAAS,WAAW,SAAS,SAAS,KAAK,QAAQ;AACnD,QAAI,OAAO,SAAS,cAAc;AAC9B,YAAM,YAAY,OAAO,UAAU,IAAI,MAAM,QAAQ;AACrD,UAAI,IAAI,OAAO,OAAO;AAClB,eAAO,QAAQ,QAAQ,SAAS,EAAE,KAAK,OAAOC,eAAc;AACxD,cAAI,OAAO,UAAU;AACjB,mBAAO;AACX,gBAAM,SAAS,MAAM,KAAK,KAAK,OAAO,YAAY;AAAA,YAC9C,MAAMA;AAAA,YACN,MAAM,IAAI;AAAA,YACV,QAAQ;AAAA,UACZ,CAAC;AACD,cAAI,OAAO,WAAW;AAClB,mBAAO;AACX,cAAI,OAAO,WAAW;AAClB,mBAAO,MAAM,OAAO,KAAK;AAC7B,cAAI,OAAO,UAAU;AACjB,mBAAO,MAAM,OAAO,KAAK;AAC7B,iBAAO;AAAA,QACX,CAAC;AAAA,MACL,OACK;AACD,YAAI,OAAO,UAAU;AACjB,iBAAO;AACX,cAAM,SAAS,KAAK,KAAK,OAAO,WAAW;AAAA,UACvC,MAAM;AAAA,UACN,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AACD,YAAI,OAAO,WAAW;AAClB,iBAAO;AACX,YAAI,OAAO,WAAW;AAClB,iBAAO,MAAM,OAAO,KAAK;AAC7B,YAAI,OAAO,UAAU;AACjB,iBAAO,MAAM,OAAO,KAAK;AAC7B,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,OAAO,SAAS,cAAc;AAC9B,YAAM,oBAAoB,CAAC,QAAQ;AAC/B,cAAM,SAAS,OAAO,WAAW,KAAK,QAAQ;AAC9C,YAAI,IAAI,OAAO,OAAO;AAClB,iBAAO,QAAQ,QAAQ,MAAM;AAAA,QACjC;AACA,YAAI,kBAAkB,SAAS;AAC3B,gBAAM,IAAI,MAAM,2FAA2F;AAAA,QAC/G;AACA,eAAO;AAAA,MACX;AACA,UAAI,IAAI,OAAO,UAAU,OAAO;AAC5B,cAAM,QAAQ,KAAK,KAAK,OAAO,WAAW;AAAA,UACtC,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AACD,YAAI,MAAM,WAAW;AACjB,iBAAO;AACX,YAAI,MAAM,WAAW;AACjB,iBAAO,MAAM;AAEjB,0BAAkB,MAAM,KAAK;AAC7B,eAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,MAAM,MAAM;AAAA,MACtD,OACK;AACD,eAAO,KAAK,KAAK,OACZ,YAAY,EAAE,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,CAAC,EAC3D,KAAK,CAAC,UAAU;AACjB,cAAI,MAAM,WAAW;AACjB,mBAAO;AACX,cAAI,MAAM,WAAW;AACjB,mBAAO,MAAM;AACjB,iBAAO,kBAAkB,MAAM,KAAK,EAAE,KAAK,MAAM;AAC7C,mBAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,MAAM,MAAM;AAAA,UACtD,CAAC;AAAA,QACL,CAAC;AAAA,MACL;AAAA,IACJ;AACA,QAAI,OAAO,SAAS,aAAa;AAC7B,UAAI,IAAI,OAAO,UAAU,OAAO;AAC5B,cAAM,OAAO,KAAK,KAAK,OAAO,WAAW;AAAA,UACrC,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AACD,YAAI,CAAC,QAAQ,IAAI;AACb,iBAAO;AACX,cAAM,SAAS,OAAO,UAAU,KAAK,OAAO,QAAQ;AACpD,YAAI,kBAAkB,SAAS;AAC3B,gBAAM,IAAI,MAAM,iGAAiG;AAAA,QACrH;AACA,eAAO,EAAE,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,MACjD,OACK;AACD,eAAO,KAAK,KAAK,OACZ,YAAY,EAAE,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,QAAQ,IAAI,CAAC,EAC3D,KAAK,CAAC,SAAS;AAChB,cAAI,CAAC,QAAQ,IAAI;AACb,mBAAO;AACX,iBAAO,QAAQ,QAAQ,OAAO,UAAU,KAAK,OAAO,QAAQ,CAAC,EAAE,KAAK,CAAC,YAAY,EAAE,QAAQ,OAAO,OAAO,OAAO,OAAO,EAAE;AAAA,QAC7H,CAAC;AAAA,MACL;AAAA,IACJ;AACA,SAAK,YAAY,MAAM;AAAA,EAC3B;AACJ;AACA,WAAW,SAAS,CAAC,QAAQ,QAAQ,WAAW;AAC5C,SAAO,IAAI,WAAW;AAAA,IAClB;AAAA,IACA,UAAU,sBAAsB;AAAA,IAChC;AAAA,IACA,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,WAAW,uBAAuB,CAAC,YAAY,QAAQ,WAAW;AAC9D,SAAO,IAAI,WAAW;AAAA,IAClB;AAAA,IACA,QAAQ,EAAE,MAAM,cAAc,WAAW,WAAW;AAAA,IACpD,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,cAAN,cAA0B,QAAQ;AAAA,EAC9B,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,WAAW;AACxC,aAAO,GAAG,MAAS;AAAA,IACvB;AACA,WAAO,KAAK,KAAK,UAAU,OAAO,KAAK;AAAA,EAC3C;AAAA,EACA,SAAS;AACL,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,YAAY,SAAS,CAAC,MAAM,WAAW;AACnC,SAAO,IAAI,YAAY;AAAA,IACnB,WAAW;AAAA,IACX,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,cAAN,cAA0B,QAAQ;AAAA,EAC9B,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,MAAM;AACnC,aAAO,GAAG,IAAI;AAAA,IAClB;AACA,WAAO,KAAK,KAAK,UAAU,OAAO,KAAK;AAAA,EAC3C;AAAA,EACA,SAAS;AACL,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,YAAY,SAAS,CAAC,MAAM,WAAW;AACnC,SAAO,IAAI,YAAY;AAAA,IACnB,WAAW;AAAA,IACX,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,QAAI,OAAO,IAAI;AACf,QAAI,IAAI,eAAe,cAAc,WAAW;AAC5C,aAAO,KAAK,KAAK,aAAa;AAAA,IAClC;AACA,WAAO,KAAK,KAAK,UAAU,OAAO;AAAA,MAC9B;AAAA,MACA,MAAM,IAAI;AAAA,MACV,QAAQ;AAAA,IACZ,CAAC;AAAA,EACL;AAAA,EACA,gBAAgB;AACZ,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,WAAW,SAAS,CAAC,MAAM,WAAW;AAClC,SAAO,IAAI,WAAW;AAAA,IAClB,WAAW;AAAA,IACX,UAAU,sBAAsB;AAAA,IAChC,cAAc,OAAO,OAAO,YAAY,aAClC,OAAO,UACP,MAAM,OAAO;AAAA,IACnB,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,WAAN,cAAuB,QAAQ;AAAA,EAC3B,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAE9C,UAAM,SAAS;AAAA,MACX,GAAG;AAAA,MACH,QAAQ;AAAA,QACJ,GAAG,IAAI;AAAA,QACP,QAAQ,CAAC;AAAA,MACb;AAAA,IACJ;AACA,UAAM,SAAS,KAAK,KAAK,UAAU,OAAO;AAAA,MACtC,MAAM,OAAO;AAAA,MACb,MAAM,OAAO;AAAA,MACb,QAAQ;AAAA,QACJ,GAAG;AAAA,MACP;AAAA,IACJ,CAAC;AACD,QAAI,QAAQ,MAAM,GAAG;AACjB,aAAO,OAAO,KAAK,CAACH,YAAW;AAC3B,eAAO;AAAA,UACH,QAAQ;AAAA,UACR,OAAOA,QAAO,WAAW,UACnBA,QAAO,QACP,KAAK,KAAK,WAAW;AAAA,YACnB,IAAI,QAAQ;AACR,qBAAO,IAAI,SAAS,OAAO,OAAO,MAAM;AAAA,YAC5C;AAAA,YACA,OAAO,OAAO;AAAA,UAClB,CAAC;AAAA,QACT;AAAA,MACJ,CAAC;AAAA,IACL,OACK;AACD,aAAO;AAAA,QACH,QAAQ;AAAA,QACR,OAAO,OAAO,WAAW,UACnB,OAAO,QACP,KAAK,KAAK,WAAW;AAAA,UACnB,IAAI,QAAQ;AACR,mBAAO,IAAI,SAAS,OAAO,OAAO,MAAM;AAAA,UAC5C;AAAA,UACA,OAAO,OAAO;AAAA,QAClB,CAAC;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,cAAc;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,SAAS,SAAS,CAAC,MAAM,WAAW;AAChC,SAAO,IAAI,SAAS;AAAA,IAChB,WAAW;AAAA,IACX,UAAU,sBAAsB;AAAA,IAChC,YAAY,OAAO,OAAO,UAAU,aAAa,OAAO,QAAQ,MAAM,OAAO;AAAA,IAC7E,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,SAAN,cAAqB,QAAQ;AAAA,EACzB,OAAO,OAAO;AACV,UAAM,aAAa,KAAK,SAAS,KAAK;AACtC,QAAI,eAAe,cAAc,KAAK;AAClC,YAAM,MAAM,KAAK,gBAAgB,KAAK;AACtC,wBAAkB,KAAK;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,UAAU,cAAc;AAAA,QACxB,UAAU,IAAI;AAAA,MAClB,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,EAAE,QAAQ,SAAS,OAAO,MAAM,KAAK;AAAA,EAChD;AACJ;AACA,OAAO,SAAS,CAAC,WAAW;AACxB,SAAO,IAAI,OAAO;AAAA,IACd,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AACA,IAAM,QAAQ,OAAO,WAAW;AAChC,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,IAAI,KAAK,oBAAoB,KAAK;AAC9C,UAAM,OAAO,IAAI;AACjB,WAAO,KAAK,KAAK,KAAK,OAAO;AAAA,MACzB;AAAA,MACA,MAAM,IAAI;AAAA,MACV,QAAQ;AAAA,IACZ,CAAC;AAAA,EACL;AAAA,EACA,SAAS;AACL,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,IAAM,cAAN,MAAM,qBAAoB,QAAQ;AAAA,EAC9B,OAAO,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,oBAAoB,KAAK;AACtD,QAAI,IAAI,OAAO,OAAO;AAClB,YAAM,cAAc,YAAY;AAC5B,cAAM,WAAW,MAAM,KAAK,KAAK,GAAG,YAAY;AAAA,UAC5C,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AACD,YAAI,SAAS,WAAW;AACpB,iBAAO;AACX,YAAI,SAAS,WAAW,SAAS;AAC7B,iBAAO,MAAM;AACb,iBAAO,MAAM,SAAS,KAAK;AAAA,QAC/B,OACK;AACD,iBAAO,KAAK,KAAK,IAAI,YAAY;AAAA,YAC7B,MAAM,SAAS;AAAA,YACf,MAAM,IAAI;AAAA,YACV,QAAQ;AAAA,UACZ,CAAC;AAAA,QACL;AAAA,MACJ;AACA,aAAO,YAAY;AAAA,IACvB,OACK;AACD,YAAM,WAAW,KAAK,KAAK,GAAG,WAAW;AAAA,QACrC,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,QAAQ;AAAA,MACZ,CAAC;AACD,UAAI,SAAS,WAAW;AACpB,eAAO;AACX,UAAI,SAAS,WAAW,SAAS;AAC7B,eAAO,MAAM;AACb,eAAO;AAAA,UACH,QAAQ;AAAA,UACR,OAAO,SAAS;AAAA,QACpB;AAAA,MACJ,OACK;AACD,eAAO,KAAK,KAAK,IAAI,WAAW;AAAA,UAC5B,MAAM,SAAS;AAAA,UACf,MAAM,IAAI;AAAA,UACV,QAAQ;AAAA,QACZ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,OAAO,GAAG,GAAG;AAChB,WAAO,IAAI,aAAY;AAAA,MACnB,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,UAAU,sBAAsB;AAAA,IACpC,CAAC;AAAA,EACL;AACJ;AACA,IAAM,cAAN,cAA0B,QAAQ;AAAA,EAC9B,OAAO,OAAO;AACV,UAAM,SAAS,KAAK,KAAK,UAAU,OAAO,KAAK;AAC/C,UAAM,SAAS,CAAC,SAAS;AACrB,UAAI,QAAQ,IAAI,GAAG;AACf,aAAK,QAAQ,OAAO,OAAO,KAAK,KAAK;AAAA,MACzC;AACA,aAAO;AAAA,IACX;AACA,WAAO,QAAQ,MAAM,IACf,OAAO,KAAK,CAAC,SAAS,OAAO,IAAI,CAAC,IAClC,OAAO,MAAM;AAAA,EACvB;AAAA,EACA,SAAS;AACL,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;AACA,YAAY,SAAS,CAAC,MAAM,WAAW;AACnC,SAAO,IAAI,YAAY;AAAA,IACnB,WAAW;AAAA,IACX,UAAU,sBAAsB;AAAA,IAChC,GAAG,oBAAoB,MAAM;AAAA,EACjC,CAAC;AACL;AAQA,SAAS,YAAY,QAAQ,MAAM;AAC/B,QAAM,IAAI,OAAO,WAAW,aACtB,OAAO,IAAI,IACX,OAAO,WAAW,WACd,EAAE,SAAS,OAAO,IAClB;AACV,QAAM,KAAK,OAAO,MAAM,WAAW,EAAE,SAAS,EAAE,IAAI;AACpD,SAAO;AACX;AACA,SAAS,OAAO,OAAO,UAAU,CAAC,GAWlC,OAAO;AACH,MAAI;AACA,WAAO,OAAO,OAAO,EAAE,YAAY,CAAC,MAAM,QAAQ;AAC9C,UAAI,IAAI;AACR,YAAM,IAAI,MAAM,IAAI;AACpB,UAAI,aAAa,SAAS;AACtB,eAAO,EAAE,KAAK,CAACI,OAAM;AACjB,cAAIC,KAAIC;AACR,cAAI,CAACF,IAAG;AACJ,kBAAM,SAAS,YAAY,SAAS,IAAI;AACxC,kBAAM,UAAUE,OAAMD,MAAK,OAAO,WAAW,QAAQA,QAAO,SAASA,MAAK,WAAW,QAAQC,QAAO,SAASA,MAAK;AAClH,gBAAI,SAAS,EAAE,MAAM,UAAU,GAAG,QAAQ,OAAO,OAAO,CAAC;AAAA,UAC7D;AAAA,QACJ,CAAC;AAAA,MACL;AACA,UAAI,CAAC,GAAG;AACJ,cAAM,SAAS,YAAY,SAAS,IAAI;AACxC,cAAM,UAAU,MAAM,KAAK,OAAO,WAAW,QAAQ,OAAO,SAAS,KAAK,WAAW,QAAQ,OAAO,SAAS,KAAK;AAClH,YAAI,SAAS,EAAE,MAAM,UAAU,GAAG,QAAQ,OAAO,OAAO,CAAC;AAAA,MAC7D;AACA;AAAA,IACJ,CAAC;AACL,SAAO,OAAO,OAAO;AACzB;AACA,IAAM,OAAO;AAAA,EACT,QAAQ,UAAU;AACtB;AACA,IAAI;AAAA,CACH,SAAUC,wBAAuB;AAC9B,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,cAAc,IAAI;AACxC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,uBAAuB,IAAI;AACjD,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,eAAe,IAAI;AACzC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,aAAa,IAAI;AAC3C,GAAG,0BAA0B,wBAAwB,CAAC,EAAE;AACxD,IAAM,iBAAiB,CAEvB,KAAK,SAAS;AAAA,EACV,SAAS,yBAAyB,IAAI,IAAI;AAC9C,MAAM,OAAO,CAAC,SAAS,gBAAgB,KAAK,MAAM;AAClD,IAAM,aAAa,UAAU;AAC7B,IAAM,aAAa,UAAU;AAC7B,IAAM,UAAU,OAAO;AACvB,IAAM,aAAa,UAAU;AAC7B,IAAM,cAAc,WAAW;AAC/B,IAAM,WAAW,QAAQ;AACzB,IAAM,aAAa,UAAU;AAC7B,IAAM,gBAAgB,aAAa;AACnC,IAAM,WAAW,QAAQ;AACzB,IAAM,UAAU,OAAO;AACvB,IAAM,cAAc,WAAW;AAC/B,IAAM,YAAY,SAAS;AAC3B,IAAM,WAAW,QAAQ;AACzB,IAAM,YAAY,SAAS;AAC3B,IAAM,aAAa,UAAU;AAC7B,IAAM,mBAAmB,UAAU;AACnC,IAAM,YAAY,SAAS;AAC3B,IAAM,yBAAyB,sBAAsB;AACrD,IAAM,mBAAmB,gBAAgB;AACzC,IAAM,YAAY,SAAS;AAC3B,IAAM,aAAa,UAAU;AAC7B,IAAM,UAAU,OAAO;AACvB,IAAM,UAAU,OAAO;AACvB,IAAM,eAAe,YAAY;AACjC,IAAM,WAAW,QAAQ;AACzB,IAAM,cAAc,WAAW;AAC/B,IAAM,WAAW,QAAQ;AACzB,IAAM,iBAAiB,cAAc;AACrC,IAAM,cAAc,WAAW;AAC/B,IAAM,cAAc,WAAW;AAC/B,IAAM,eAAe,YAAY;AACjC,IAAM,eAAe,YAAY;AACjC,IAAM,iBAAiB,WAAW;AAClC,IAAM,eAAe,YAAY;AACjC,IAAM,UAAU,MAAM,WAAW,EAAE,SAAS;AAC5C,IAAM,UAAU,MAAM,WAAW,EAAE,SAAS;AAC5C,IAAM,WAAW,MAAM,YAAY,EAAE,SAAS;AAC9C,IAAM,SAAS;AAAA,EACX,QAAS,CAAC,QAAQ,UAAU,OAAO,EAAE,GAAG,KAAK,QAAQ,KAAK,CAAC;AAAA,EAC3D,QAAS,CAAC,QAAQ,UAAU,OAAO,EAAE,GAAG,KAAK,QAAQ,KAAK,CAAC;AAAA,EAC3D,SAAU,CAAC,QAAQ,WAAW,OAAO;AAAA,IACjC,GAAG;AAAA,IACH,QAAQ;AAAA,EACZ,CAAC;AAAA,EACD,QAAS,CAAC,QAAQ,UAAU,OAAO,EAAE,GAAG,KAAK,QAAQ,KAAK,CAAC;AAAA,EAC3D,MAAO,CAAC,QAAQ,QAAQ,OAAO,EAAE,GAAG,KAAK,QAAQ,KAAK,CAAC;AAC3D;AACA,IAAM,QAAQ;AAEd,IAAI,IAAiB,uBAAO,OAAO;AAAA,EAC/B,WAAW;AAAA,EACX,iBAAiB;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,IAAI,OAAQ;AAAE,WAAO;AAAA,EAAM;AAAA,EAC3B,IAAI,aAAc;AAAE,WAAO;AAAA,EAAY;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR,WAAW;AAAA,EACX;AAAA,EACA,IAAI,wBAAyB;AAAE,WAAO;AAAA,EAAuB;AAAA,EAC7D;AAAA,EACA,KAAK;AAAA,EACL,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,MAAM;AAAA,EACN,oBAAoB;AAAA,EACpB,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,cAAc;AAAA,EACd,MAAM;AAAA,EACN,SAAS;AAAA,EACT,KAAK;AAAA,EACL,KAAK;AAAA,EACL,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV;AAAA,EACA,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,cAAc;AAAA,EACd,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,OAAO;AAAA,EACP,aAAa;AAAA,EACb,OAAO;AAAA,EACP,SAAS;AAAA,EACT,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;;;AC9yID,IAAM,2BAA2B;AACjC,IAAM,mCAAmC;AACzC,IAAM,6BAA6B;AAE5B,IAAM,eAAe,EAAE,OAAO;AAAA,EACjC,iBAAiB,EAAE,OAAO,EAAE,SAAS;AAAA,EACrC,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA,EACpC,kBAAkB,EAAE,OAAO,EAAE,QAAQ,wBAAwB;AAAA,EAC7D,0BAA0B,EAAE,OAAO,EAAE,QAAQ,gCAAgC;AAAA,EAC7E,oBAAoB,EAAE,OAAO,EAAE,QAAQ,0BAA0B;AACrE,CAAC;AAOM,SAAS,YAAuB;AACnC,SAAO;AAAA,IACH,iBAAiB,QAAQ,IAAI;AAAA,IAC7B,gBAAgB,QAAQ,IAAI;AAAA,IAC5B,kBAAkB,QAAQ,IAAI,oBAAoB;AAAA,IAClD,0BAA0B,QAAQ,IAAI,4BAA4B;AAAA,IAClE,oBAAoB,QAAQ,IAAI,sBAAsB;AAAA,EAC1D;AACJ;AAKA,eAAsB,kBAClB,SACkB;AAClB,MAAI;AACA,UAAM,SAAS;AAAA,MACX,iBAAiB,QAAQ,WAAW,iBAAiB,KAAK,QAAQ,IAAI;AAAA,MACtE,gBAAgB,QAAQ,WAAW,gBAAgB,KAAK,QAAQ,IAAI;AAAA,MACpE,kBAAkB,QAAQ,WAAW,kBAAkB,KAAK,QAAQ,IAAI,oBAAoB;AAAA,MAC5F,0BAA0B,QAAQ,WAAW,0BAA0B,KAAK,QAAQ,IAAI,4BAA4B;AAAA,MACpH,oBAAoB,QAAQ,WAAW,oBAAoB,KAAK,QAAQ,IAAI,sBAAsB;AAAA,IACtG;AAEA,WAAO,aAAa,MAAM,MAAM;AAAA,EACpC,SAAS,OAAO;AACZ,QAAI,iBAAiB,EAAE,UAAU;AAC7B,YAAM,gBAAgB,MAAM,OACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,IAAI,OAAO,EAAE,EACpD,KAAK,IAAI;AACd,YAAM,IAAI;AAAA,QACN;AAAA,EAAyC,aAAa;AAAA,MAC1D;AAAA,IACJ;AACA,UAAM;AAAA,EACV;AACJ;AAKO,SAAS,oBAAoB,QAA4B;AAC5D,SAAO,CAAC,EAAE,OAAO,mBAAmB,OAAO;AAC/C;;;ACjEA;AAAA,EACI,kBAAAC;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AAcP,SAAuB,YAAAC,WAAU,eAAAC,cAAa,eAAAC,cAAa,iBAAiB;AAK5E,IAAM,2BAA2B,CAAC,OAAO,QAAQ,OAAO,OAAO,MAAM;AAGrE,IAAM,0BAAkD;AAAA,EACpD,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,OAAO;AAAA,EACP,QAAQ;AACZ;AAGAC,aAAY,MAAM,4BAA4B,uBAAuB;AAE9D,IAAM,0BAAN,MAA8B;AAAA,EACjC,YAAoB,gBAAgC;AAAhC;AAEhB,IAAAA,aAAY;AAAA,MAAM;AAAA,MACd,EAAE,cAAc,eAAe,YAAY,KAAK;AAAA,IAAC;AAAA,EACzD;AAAA;AAAA,EAGO,sBAAsB,SAAgC;AAEzD,UAAM,iBAAiB,QAAQ,KAAK,EAAE,YAAY;AAGlD,UAAM,gBAAgB,oBAAoB,KAAK,cAAc;AAC7D,QAAI,CAAC,eAAe;AAChB,MAAAA,aAAY,MAAM,iCAAiC,OAAO,EAAE;AAC5D,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,MAAc,mBAAmB,OAAuB,OAAgB;AACpE,QAAI;AAEA,YAAM,cAAc,KAAK,eAAe,gBAAgB,KAAK;AAC7D,MAAAA,aAAY,MAAM,oBAAoB,KAAK,KAAK;AAAA,QAC5C,IAAI,YAAY;AAAA,QAChB,MAAM,YAAY;AAAA,QAClB,gBAAgB,YAAY;AAAA,QAC5B,SAAS,YAAY;AAAA,MACzB,CAAC;AAGD,UAAI,OAAO;AACP,YAAI,MAAM,WAAW,IAAI,KAAK,MAAM,WAAW,IAAI;AAE/C,cAAI;AACA,kBAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,YAAAA,aAAY;AAAA,cAAM,qBAAqB,KAAK;AAAA,cACxC,EAAE,YAAY,aAAa,YAAY,KAAK;AAAA,YAAC;AAEjD,YAAAA,aAAY,MAAM,wCAAwC,KAAK,EAAE;AACjE,kBAAM,WAAW,MAAM,aAAa,aAAa;AAAA,cAC7C,SAAS;AAAA,cACT,KAAKC;AAAA,cACL,cAAc;AAAA,YAClB,CAAC,EAAE,MAAM,OAAK;AACV,cAAAD,aAAY,MAAM,oCAAoC,KAAK,KAAK,EAAE,OAAO;AACzE,qBAAO;AAAA,YACX,CAAC;AAED,kBAAM,SAAS,MAAM,aAAa,aAAa;AAAA,cAC3C,SAAS;AAAA,cACT,KAAKC;AAAA,cACL,cAAc;AAAA,YAClB,CAAC,EAAE,MAAM,OAAK;AACV,cAAAD,aAAY,MAAM,kCAAkC,KAAK,KAAK,EAAE,OAAO;AACvE,qBAAO;AAAA,YACX,CAAC;AAED,YAAAA,aAAY,MAAM,yBAAyB,KAAK,KAAK;AAAA,cACjD;AAAA,cACA;AAAA,YACJ,CAAC;AAAA,UACL,SAAS,OAAO;AACZ,YAAAA,aAAY,MAAM,6BAA6B,MAAM,SAAS,MAAM,KAAK;AAAA,UAC7E;AAAA,QACJ,OAAO;AAEH,gBAAM,aAAa,MAAM,YAAY;AACrC,gBAAM,gBAAgB,wBAAwB,UAAU;AACxD,UAAAA,aAAY,MAAM,gBAAgB,KAAK,qBAAqB,iBAAiB,sBAAsB;AAEnG,cAAI,CAAC,eAAe;AAChB,YAAAA,aAAY;AAAA,cAAM,SAAS,KAAK;AAAA,cAC5B,OAAO,KAAK,uBAAuB;AAAA,YAAC;AAAA,UAC5C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,gCAAgC,MAAM,SAAS,MAAM,KAAK;AAAA,IAChF;AAAA,EACJ;AAAA;AAAA,EAGA,MAAc,uBAAuB,SAAyC;AAC1E,QAAI;AACA,MAAAA,aAAY,MAAM,iDAAiD,OAAO,EAAE;AAG5E,YAAM,MAAM,6EAA6E,OAAO;AAEhG,MAAAA,aAAY,MAAM,sBAAsB,GAAG,EAAE;AAG7C,YAAM,WAAW,MAAM,MAAM,GAAG;AAChC,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,MAAAA,aAAY,MAAM,yBAAyB,IAAI;AAE/C,UAAI,KAAK,WAAW,OAAO,KAAK,YAAY,MAAM;AAC9C,cAAM,aAAa,KAAK;AACxB,cAAM,aAAaE,aAAY,OAAO,UAAU,CAAC;AACjD,QAAAF,aAAY,MAAM,4BAA4B,UAAU,MAAM;AAC9D,eAAO;AAAA,MACX,OAAO;AACH,QAAAA,aAAY,MAAM,sBAAsB,KAAK,OAAO,EAAE;AACtD,eAAO;AAAA,MACX;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,mCAAmC,MAAM,OAAO,EAAE;AACpE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,WAAW,QAAuD;AACpE,IAAAA,aAAY,MAAM,+BAA+B,MAAM;AACvD,UAAM,KAAK,2BAA2B,MAAM;AAC5C,IAAAA,aAAY,MAAM,0CAA0C,MAAM;AAGlE,WAAO,QAAQ;AAGf,UAAM,KAAK,mBAAmB,cAAc,OAAO,KAAK;AAExD,UAAM,EAAE,OAAO,SAAS,MAAM,IAAI;AAClC,QAAI,CAAC,SAAS;AACV,MAAAA,aAAY,MAAM,0CAA0C;AAC5D,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC7D;AAEA,IAAAA,aAAY,MAAM,uBAAuB,KAAK,EAAE;AAChD,SAAK,eAAe,YAAY,KAAK;AACrC,UAAM,eACF,KAAK,eAAe,gBAAgB,KAAK,EAAE,eAAe;AAC9D,IAAAA,aAAY,MAAM,2BAA2B,KAAK,KAAK,YAAY,EAAE;AAErE,QAAI,mBAAmB;AACvB,QACI,CAAC,SACD,UAAU,MACV,MAAM,YAAY,MAAM,SACxB,MAAM,YAAY,MAAM,QAC1B;AACE,MAAAA,aAAY,MAAM,4BAA4B,YAAY,WAAW;AACrE,yBAAmB;AAAA,IACvB;AAEA,UAAM,OAA2B;AAAA,MAC7B;AAAA,MACA;AAAA,IACJ;AAGA,QAAI,CAAC,kBAAkB;AACnB,UAAI;AAGJ,UAAI,UAAU,KAAK,GAAG;AAClB,QAAAA,aAAY,MAAM,gCAAgC,KAAK,EAAE;AACzD,cAAM,oBAAoB,KAAK,sBAAsB,KAAK;AAC1D,YAAI,CAAC,mBAAmB;AACpB,gBAAM,IAAI,MAAM,iCAAiC,KAAK,mDAAmD;AAAA,QAC7G;AACA,uBAAe;AAAA,MACnB,OAAO;AAEH,cAAM,aAAa,MAAM,YAAY;AACrC,QAAAA,aAAY,MAAM,+CAA+C,UAAU,EAAE;AAG7E,cAAM,gBAAgB,KAAK,eAAe,uBAAuB,UAAU;AAE3E,YAAI,CAAC,eAAe;AAChB,UAAAA,aAAY,MAAM,SAAS,KAAK,+BAA+B;AAC/D,gBAAM,IAAI,MAAM,SAAS,KAAK,uDAAuD,yBAAyB,KAAK,IAAI,CAAC,EAAE;AAAA,QAC9H;AAEA,uBAAe;AACf,QAAAA,aAAY,MAAM,yBAAyB,KAAK,gBAAgB,YAAY,EAAE;AAAA,MAClF;AAEA,MAAAA,aAAY,MAAM,qCAAqC,OAAO,cAAc,YAAY,EAAE;AAC1F,UAAI;AACA,cAAM,SAAS,MAAM,KAAK;AAAA,UACtB;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,QAAAA,aAAY,MAAM,yBAAyB,MAAM,IAAI,KAAK,EAAE;AAC5D,aAAK,UAAU,EAAE,OAAO,OAAO;AAAA,MACnC,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,gCAAgC,MAAM,OAAO,IAAI,MAAM,KAAK;AAC9E,cAAM;AAAA,MACV;AAAA,IACJ,OAAO;AAEH,MAAAA,aAAY,MAAM,4CAA4C,OAAO,EAAE;AACvE,UAAI;AACA,cAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAG9D,cAAM,cAAc,KAAK,eAAe,gBAAgB,KAAK;AAC7D,QAAAA,aAAY,MAAM,2BAA2B,KAAK,KAAK;AAAA,UACnD,YAAY,YAAY,QAAQ,QAAQ,KAAK,CAAC;AAAA,UAC9C,WAAW,YAAY,QAAQ,QAAQ,KAAK,CAAC;AAAA,UAC7C,aAAa,CAAC,CAAC,YAAY,QAAQ;AAAA,QACvC,CAAC;AAGD,cAAM,UAAU,MAAM,aAAa,WAAW,EAAE,MAAM,OAAK;AACvD,UAAAA,aAAY,MAAM,2BAA2B,EAAE,OAAO,EAAE;AACxD,iBAAO;AAAA,QACX,CAAC;AACD,QAAAA,aAAY,MAAM,0BAA0B,OAAO,eAAe,YAAY,EAAE,EAAE;AAElF,QAAAA,aAAY,MAAM,mCAAmC,OAAO,EAAE;AAC9D,cAAM,mBAAmB,MAAM,aAAa,WAAW,EAAE,QAAQ,CAAC;AAClE,QAAAA,aAAY,MAAM,6BAA6B,iBAAiB,SAAS,CAAC,EAAE;AAE5E,cAAM,mBAAmBE,aAAY,gBAAgB;AACrD,QAAAF,aAAY,MAAM,sBAAsB,gBAAgB,IAAI,YAAY,EAAE;AAG1E,YAAI,qBAAqB,IAAI;AACzB,UAAAA,aAAY,MAAM,gDAAgD;AAClE,gBAAM,iBAAiB,MAAM,KAAK,uBAAuB,OAAO;AAEhE,cAAI,kBAAkB,WAAW,cAAc,IAAI,GAAG;AAClD,YAAAA,aAAY,MAAM,qCAAqC,cAAc,MAAM;AAC3E,iBAAK,UAAU;AAAA,cACX,OAAO;AAAA,cACP,QAAQ;AAAA,YACZ;AACA,mBAAO;AAAA,UACX;AAAA,QACJ;AAEA,aAAK,UAAU;AAAA,UACX,OAAO;AAAA,UACP,QAAQ;AAAA,QACZ;AAAA,MACJ,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,iCAAiC,MAAM,OAAO,IAAI,MAAM,KAAK;AAG/E,QAAAA,aAAY,MAAM,gCAAgC;AAClD,cAAM,iBAAiB,MAAM,KAAK,uBAAuB,OAAO;AAEhE,YAAI,gBAAgB;AAChB,UAAAA,aAAY,MAAM,4BAA4B,cAAc,MAAM;AAClE,eAAK,UAAU;AAAA,YACX,OAAO;AAAA,YACP,QAAQ;AAAA,UACZ;AACA,iBAAO;AAAA,QACX;AAEA,cAAM;AAAA,MACV;AAAA,IACJ;AAEA,IAAAA,aAAY,MAAM,yBAAyB,IAAI;AAC/C,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,qBACF,OACA,SACA,cACe;AACf,QAAI;AACA,MAAAA,aAAY,MAAM,2CAA2C,OAAO,cAAc,YAAY,aAAa,KAAK,EAAE;AAClH,YAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,MAAAA,aAAY,MAAM,2BAA2B,KAAK,KAAK;AAAA,QACnD,YAAY,aAAa,YAAY;AAAA,MACzC,CAAC;AAED,MAAAA,aAAY,MAAM,+BAA+B,YAAY,EAAE;AAG/D,UAAI;AACJ,UAAI;AACA,kBAAU,MAAM,aAAa,aAAa;AAAA,UACtC,SAAS;AAAA,UACT,KAAKC;AAAA,UACL,cAAc;AAAA,UACd,MAAM,CAAC,OAAO;AAAA,QAClB,CAAC;AAAA,MACL,SAAS,GAAG;AACR,QAAAD,aAAY,MAAM,sCAAsC,EAAE,OAAO,EAAE;AACnE,QAAAA,aAAY,MAAM,2BAA2B,CAAC;AAG9C,QAAAA,aAAY,KAAK,SAAS,YAAY,8DAA8D;AACpG,eAAO;AAAA,MACX;AAEA,MAAAA,aAAY,MAAM,uBAAuB,QAAQ,SAAS,CAAC,EAAE;AAG7D,UAAI;AACJ,UAAI;AACA,mBAAW,MAAM,aAAa,aAAa;AAAA,UACvC,SAAS;AAAA,UACT,KAAKC;AAAA,UACL,cAAc;AAAA,QAClB,CAAC;AAAA,MACL,SAAS,GAAG;AACR,QAAAD,aAAY,MAAM,qCAAqC,EAAE,OAAO,EAAE;AAElE,QAAAA,aAAY,KAAK,uCAAuC,YAAY,EAAE;AACtE,mBAAW;AAAA,MACf;AAEA,MAAAA,aAAY,MAAM,mBAAmB,QAAQ,EAAE;AAE/C,YAAM,mBAAmBG,aAAY,SAAS,QAAQ;AACtD,MAAAH,aAAY,MAAM,sBAAsB,gBAAgB,EAAE;AAC1D,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,gCAAgC,MAAM,OAAO,IAAI,MAAM,KAAK;AAE9E,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,2BAA2B,QAAyC;AACtE,QAAI;AAEA,aAAO,QAAQ;AAGf,UAAI,CAAC,OAAO,SAAS;AACjB,eAAO,UAAU,KAAK,eAAe,WAAW;AAChD,QAAAA,aAAY,MAAM,8CAA8C,OAAO,OAAO,EAAE;AAChF;AAAA,MACJ;AAGA,YAAM,aAAa,OAAO,OAAO,OAAO;AAGxC,UAAI,eAAe,UAAU,eAAe,aAAa;AACrD,eAAO,UAAU,KAAK,eAAe,WAAW;AAChD,QAAAA,aAAY,MAAM,0DAA0D,OAAO,OAAO,EAAE;AAC5F;AAAA,MACJ;AAGA,UAAI,WAAW,WAAW,IAAI,KAAK,WAAW,WAAW,IAAI;AACzD,QAAAA,aAAY,MAAM,4BAA4B,OAAO,OAAO,EAAE;AAC9D;AAAA,MACJ;AAIA,YAAM,eAAe,CAAC,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,MAAM;AAC1E,UAAI,aAAa,SAAS,WAAW,YAAY,CAAC,GAAG;AACjD,QAAAA,aAAY,MAAM,sCAAsC,OAAO,OAAO,gCAAgC;AACtG,eAAO,UAAU,KAAK,eAAe,WAAW;AAChD;AAAA,MACJ;AAGA,MAAAA,aAAY,MAAM,+CAA+C,OAAO,OAAO,EAAE;AAGjF,UAAI,WAAW,WAAW,IAAI,GAAG;AAC7B,QAAAA,aAAY,KAAK,YAAY,OAAO,OAAO,wEAAwE;AACnH;AAAA,MACJ;AAIA,MAAAA,aAAY,KAAK,8BAA8B,OAAO,OAAO,kCAAkC;AAC/F,aAAO,UAAU,KAAK,eAAe,WAAW;AAAA,IACpD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,6BAA6B,MAAM,OAAO,EAAE;AAE9D,aAAO,UAAU,KAAK,eAAe,WAAW;AAAA,IACpD;AAAA,EACJ;AACJ;AAGO,IAAM,0BAA0B;AAAA,EACnC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,sCAAsC;AAGtD,QAAI;AACA,YAAM,SAAS,MAAM,kBAAkB,OAAO;AAC9C,MAAAA,aAAY,MAAM,eAAe;AAAA,QAC7B,eAAe,CAAC,CAAC,OAAO;AAAA,QACxB,cAAc,CAAC,CAAC,OAAO;AAAA,QACvB,eAAe,OAAO;AAAA,MAC1B,CAAC;AAGD,MAAAA,aAAY,MAAM,8BAA8B,OAAO,wBAAwB,EAAE;AAGjF,UAAI,OAAO,6BAA6B,mDAAmD;AACvF,QAAAA,aAAY,MAAM,iHAAiH;AAAA,MACvI;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,kCAAkC,MAAM,OAAO;AAAA,IACrE;AAGA,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,QAAI;AACA,YAAM,aAAa,MAAM,kBAAkB;AAAA,QACvC;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AACA,MAAAA,aAAY,MAAM,gBAAgB,MAAM,UAAU;AAAA,IACtD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,MAAM,SAAS,MAAM,KAAK;AAAA,IAC9E;AAGA,UAAM,oBAAoBI,gBAAe;AAAA,MACrC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AAED,IAAAJ,aAAY,MAAM,qCAAqC;AACvD,UAAM,UAAU,MAAMK,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AACD,IAAAN,aAAY,MAAM,sBAAsB,OAAO;AAE/C,QAAI;AACA,MAAAA,aAAY,MAAM,iCAAiC;AACnD,YAAM,iBAAiB,mBAAmB,OAAO;AACjD,YAAM,SAAS,IAAI,wBAAwB,cAAc;AAGzD,UAAI,aAAa,QAAQ;AACzB,YAAM,gBAAgB;AAEtB,MAAAA,aAAY,MAAM,yBAAyB,aAAa,EAAE;AAG1D,UAAI,YAAY;AACZ,qBAAa,WAAW,KAAK;AAG7B,YAAI,WAAW,WAAW,IAAI,GAAG;AAE7B,gBAAM,oBAAoB,OAAO,sBAAsB,UAAU;AACjE,cAAI,mBAAmB;AACnB,YAAAA,aAAY,MAAM,mCAAmC,iBAAiB,EAAE;AACxE,yBAAa;AAAA,UACjB,OAAO;AAEH,kBAAM,aAAa,WAAW,QAAQ,QAAQ,EAAE,EAAE,YAAY;AAE9D,kBAAM,gBAAgB,eAAe,uBAAuB,UAAU;AACtE,gBAAI,eAAe;AACf,cAAAA,aAAY,MAAM,oDAAoD,UAAU,EAAE;AAClF,2BAAa;AAAA,YACjB,OAAO;AAEH,kBAAI,UAAU;AACV,yBAAS;AAAA,kBACL,MAAM,sBAAsB,UAAU,4GAA4G,yBAAyB,KAAK,IAAI,CAAC;AAAA,kBACrL,SAAS;AAAA,oBACL,OAAO,0BAA0B,UAAU;AAAA,oBAC3C,OAAO;AAAA,oBACP,iBAAiB;AAAA,kBACrB;AAAA,gBACJ,CAAC;AAAA,cACL;AACA,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ,OAAO;AAEH,gBAAM,aAAa,WAAW,YAAY;AAC1C,UAAAA,aAAY,MAAM,4BAA4B,UAAU,EAAE;AAG1D,gBAAM,gBAAgB,eAAe,uBAAuB,UAAU;AAEtE,cAAI,eAAe;AACf,YAAAA,aAAY,MAAM,uBAAuB,UAAU,gBAAgB,aAAa,EAAE;AAClF,yBAAa;AAAA,UACjB,OAAO;AAGH,YAAAA,aAAY,MAAM,SAAS,UAAU,uBAAuB;AAC5D,gBAAI,UAAU;AACV,uBAAS;AAAA,gBACL,MAAM,UAAU,UAAU,wDAAwD,yBAAyB,KAAK,IAAI,CAAC;AAAA,gBACrH,SAAS;AAAA,kBACL,OAAO,sBAAsB,UAAU;AAAA,kBACvC,OAAO;AAAA,kBACP,iBAAiB;AAAA,gBACrB;AAAA,cACJ,CAAC;AAAA,YACL;AACA,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,QAAAA,aAAY,MAAM,iDAAiD;AAAA,MACvE;AAEA,YAAM,oBAAsC;AAAA,QACxC,OAAO;AAAA;AAAA,QACP,SAAS,QAAQ;AAAA,QACjB,OAAO;AAAA,MACX;AACA,MAAAA,aAAY,MAAM,oBAAoB,iBAAiB;AAEvD,UAAI;AACA,QAAAA,aAAY,MAAM,wCAAwC,kBAAkB,KAAK,EAAE;AAKnF,YAAI,OAAO,kBAAkB,UAAU,YACnC,kBAAkB,MAAM,WAAW,IAAI,KACvC,kBAAkB,MAAM,WAAW,IAAI;AACvC,UAAAA,aAAY,MAAM,+BAA+B,kBAAkB,KAAK,EAAE;AAAA,QAE9E,OAAO;AAEH,UAAAA,aAAY,MAAM,0CAA0C,kBAAkB,KAAK,EAAE;AAAA,QACzF;AAEA,cAAM,iBAAiB,MAAM,OAAO,WAAW,iBAAiB;AAChE,QAAAA,aAAY,MAAM,qBAAqB,cAAc;AAErD,YAAI,UAAU;AACV,cAAI,OAAO,wBAAwB,kBAAkB,OAAO;AAC5D,cAAI,eAAe,SAAS;AAExB,kBAAM,eAAe,gBAAgB,cAAc,YAAY,IAAI;AACnE,mBAAO,cAAc,eAAe,OAAO;AAAA,EACvC,YACJ,KAAK,eAAe,QAAQ,MAAM;AAAA,UACtC;AACA,UAAAA,aAAY,MAAM,2BAA2B,IAAI;AACjD,mBAAS;AAAA,YACL;AAAA,YACA,SAAS,EAAE,GAAG,eAAe;AAAA,UACjC,CAAC;AAAA,QACL;AACA,eAAO;AAAA,MACX,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,qCAAqC,MAAM,SAAS,MAAM,KAAK;AAGjF,YAAI,cAAc,kDAAkD,MAAM,OAAO;AAGjF,YAAI,MAAM,QAAQ,SAAS,YAAY,KAAK,MAAM,QAAQ,SAAS,6CAA6C,GAAG;AAC/G,wBAAc,yBAAyB,iBAAiB,kBAAkB,KAAK,uCAAuC,yBAAyB,KAAK,IAAI,CAAC;AAAA,QAC7J,WAAW,MAAM,QAAQ,SAAS,qBAAqB,GAAG;AACtD,wBAAc;AAAA,QAClB,WAAW,MAAM,QAAQ,SAAS,iBAAiB,GAAG;AAClD,wBAAc;AAAA,QAClB,WAAW,MAAM,QAAQ,SAAS,8BAA8B,GAAG;AAC/D,wBAAc,MAAM;AAAA,QACxB,WAAW,MAAM,QAAQ,SAAS,aAAa,GAAG;AAC9C,wBAAc;AAAA,QAClB,WAAW,iBAAiB,cAAc,WAAW,IAAI,GAAG;AAExD,wBAAc,sBAAsB,aAAa;AAAA,QACrD;AAEA,QAAAA,aAAY,MAAM,uBAAuB,WAAW;AACpD,mBAAW;AAAA,UACP,MAAM;AAAA,UACN,SAAS;AAAA,YACL,OAAO,MAAM;AAAA,YACb,OAAO;AAAA,YACP,OAAO,iBAAiB,kBAAkB;AAAA,YAC1C,iBAAiB;AAAA,UACrB;AAAA,QACJ,CAAC;AACD,eAAO;AAAA,MACX;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,gDAAgD,MAAM,SAAS,MAAM,KAAK;AAC5F,iBAAW;AAAA,QACP,MAAM,6DAA6D,MAAM,OAAO;AAAA,QAChF,SAAS;AAAA,UACL,OAAO,MAAM;AAAA,UACb,OAAO;AAAA,QACX;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,aAA4B;AACzC,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,uBAAuB,uBAAuB;AAC5D;;;ACxrBA,OAAO,WAAW;AAClB,OAAO,WAAW;AAClB,OAAO,SAAS;;;ACdhB;AAAA,EACI,kBAAAO;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AACP,SAAS,YAAAC,iBAAgB;AAazB,SAAuB,YAAAC,WAAU,eAAAC,cAAa,eAAAC,oBAAmB;AAI1D,IAAM,mBAAN,MAAuB;AAAA,EAC1B,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EAErD,MAAM,WAAW,QAAuD;AACpE,IAAAC,aAAY,MAAM,uBAAuB,MAAM;AAC/C,UAAM,KAAK,2BAA2B,MAAM;AAC5C,IAAAA,aAAY,MAAM,kCAAkC,MAAM;AAE1D,UAAM,EAAE,OAAO,SAAS,MAAM,IAAI;AAClC,QAAI,CAAC,SAAS;AACV,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC7D;AAEA,SAAK,eAAe,YAAY,KAAK;AACrC,UAAM,eACF,KAAK,eAAe,gBAAgB,KAAK,EAAE,eAAe;AAC9D,UAAM,UAAU,KAAK,eAAe,gBAAgB,KAAK,EAAE;AAE3D,QAAI,mBAAmB;AACvB,QACI,CAAC,SACD,UAAU,MACV,MAAM,YAAY,MAAM,SACxB,MAAM,YAAY,MAAM,QAC1B;AACE,yBAAmB;AAAA,IACvB;AAEA,UAAM,OAA2B;AAAA,MAC7B;AAAA,MACA;AAAA,IACJ;AAGA,QAAI,CAAC,kBAAkB;AACnB,UAAI;AACJ,UAAI,MAAM,WAAW,IAAI,GAAG;AACxB,iBAAS,MAAM,KAAK;AAAA,UAChB;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,YAAI,YAAY,IAAI;AAChB,gBAAM,IAAI;AAAA,YACN;AAAA,UACJ;AAAA,QACJ;AAEA,aAAK,eAAe,iBAAiB,KAAK;AAC1C,cAAM,YAAY,MAAMC,UAAS,SAAS,KAAK;AAC/C,iBAAS,MAAM,KAAK;AAAA,UAChB;AAAA,UACA;AAAA,UACA,UAAU;AAAA,QACd;AAAA,MACJ;AAEA,WAAK,UAAU,EAAE,OAAO,OAAO;AAAA,IACnC,OAAO;AAEH,YAAM,mBAAmB,MAAM,KAAK,eAC/B,gBAAgB,KAAK,EACrB,WAAW,EAAE,QAAQ,CAAC;AAC3B,WAAK,UAAU;AAAA,QACX,OAAO;AAAA,QACP,QAAQC,aAAY,gBAAgB;AAAA,MACxC;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,qBACF,OACA,SACA,cACe;AACf,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAE9D,UAAM,UAAU,MAAM,aAAa,aAAa;AAAA,MAC5C,SAAS;AAAA,MACT,KAAKC;AAAA,MACL,cAAc;AAAA,MACd,MAAM,CAAC,OAAO;AAAA,IAClB,CAAC;AAED,UAAM,WAAW,MAAM,aAAa,aAAa;AAAA,MAC7C,SAAS;AAAA,MACT,KAAKA;AAAA,MACL,cAAc;AAAA,IAClB,CAAC;AAED,WAAOC,aAAY,SAAS,QAAQ;AAAA,EACxC;AAAA,EAEA,MAAM,2BAA2B,QAAyC;AACtE,QAAI;AAEA,UAAI,CAAC,OAAO,OAAO;AACf,eAAO,QAAQ;AAAA,MACnB;AAGA,UAAI,CAAC,OAAO,SAAS;AACjB,eAAO,UAAU,KAAK,eAAe,WAAW;AAChD,QAAAJ,aAAY,MAAM,8CAA8C,OAAO,OAAO,EAAE;AAChF;AAAA,MACJ;AAGA,YAAM,aAAa,OAAO,OAAO,OAAO;AAGxC,UAAI,eAAe,UAAU,eAAe,aAAa;AACrD,eAAO,UAAU,KAAK,eAAe,WAAW;AAChD,QAAAA,aAAY,MAAM,0DAA0D,OAAO,OAAO,EAAE;AAC5F;AAAA,MACJ;AAGA,UAAI,WAAW,WAAW,IAAI,KAAK,WAAW,WAAW,IAAI;AACzD,QAAAA,aAAY,MAAM,4BAA4B,OAAO,OAAO,EAAE;AAC9D;AAAA,MACJ;AAIA,YAAM,eAAe,CAAC,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,MAAM;AAC1E,UAAI,aAAa,SAAS,WAAW,YAAY,CAAC,GAAG;AACjD,QAAAA,aAAY,MAAM,sCAAsC,OAAO,OAAO,gCAAgC;AACtG,eAAO,UAAU,KAAK,eAAe,WAAW;AAChD;AAAA,MACJ;AAGA,MAAAA,aAAY,MAAM,8CAA8C,OAAO,OAAO,EAAE;AAChF,YAAM,kBAAkB,MAAM,KAAK,eAAe,gBAAgB,OAAO,OAAO;AAChF,UAAI,iBAAiB;AACjB,QAAAA,aAAY,MAAM,iCAAiC,eAAe,EAAE;AACpE,eAAO,UAAU;AACjB;AAAA,MACJ;AAGA,UAAI,WAAW,WAAW,IAAI,GAAG;AAC7B,QAAAA,aAAY,KAAK,YAAY,OAAO,OAAO,wEAAwE;AACnH;AAAA,MACJ;AAIA,MAAAA,aAAY,KAAK,8BAA8B,OAAO,OAAO,kCAAkC;AAC/F,aAAO,UAAU,KAAK,eAAe,WAAW;AAAA,IACpD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,6BAA6B,MAAM,OAAO,EAAE;AAE9D,aAAO,UAAU,KAAK,eAAe,WAAW;AAAA,IACpD;AAAA,EACJ;AACJ;AAGO,IAAM,mBAAmB;AAAA,EAC5B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,+BAA+B;AAG/C,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AACA,UAAM,aAAa,MAAM,kBAAkB;AAAA,MACvC;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAGA,UAAM,oBAAoBK,gBAAe;AAAA,MACrC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,iBAAiB,cAAc;AAClD,UAAM,oBAAsC;AAAA,MACxC,OAAO,QAAQ;AAAA,MACf,SAAS,QAAQ;AAAA,MACjB,OAAO,QAAQ;AAAA,IACnB;AACA,QAAI;AACA,YAAM,iBAAiB,MAAM,OAAO,WAAW,iBAAiB;AAChE,UAAI,UAAU;AACV,YAAI,OAAO,wBAAwB,kBAAkB,OAAO,OAAO,kBAAkB,KAAK;AAC1F,YAAI,eAAe,SAAS;AACxB,iBAAO,cAAc,eAAe,OAAO,OAAO,eAAe,KAAK;AAAA,EAClE,eAAe,QAAQ,KAC3B,KAAK,eAAe,QAAQ,MAAM;AAAA,QACtC;AACA,iBAAS;AAAA,UACL;AAAA,UACA,SAAS,EAAE,GAAG,eAAe;AAAA,QACjC,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAP,aAAY,MAAM,6BAA6B,KAAK;AAGpD,UAAI,cAAc,uBAAuB,MAAM,OAAO;AAGtD,UAAI,MAAM,QAAQ,SAAS,YAAY,GAAG;AACtC,sBAAc,yBAAyB,kBAAkB,KAAK,QAAQ,kBAAkB,KAAK;AAAA,MACjG,WAAW,MAAM,QAAQ,SAAS,qBAAqB,GAAG;AACtD,sBAAc;AAAA,MAClB,WAAW,MAAM,QAAQ,SAAS,+BAA+B,GAAG;AAChE,sBAAc;AAAA,MAClB,WAAW,MAAM,QAAQ,SAAS,iBAAiB,GAAG;AAClD,sBAAc;AAAA,MAClB,WAAW,MAAM,QAAQ,SAAS,wBAAwB,GAAG;AACzD,sBAAc;AAAA,MAClB;AAEA,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,UACL,OAAO,MAAM;AAAA,UACb,OAAO,kBAAkB;AAAA,UACzB,OAAO,kBAAkB;AAAA,QAC7B;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,aAA4B;AACzC,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,eAAe,eAAe;AAC5C;;;AC7WA;AAAA,EACI,kBAAAQ;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AACP,SAAuB,eAAAC,cAAa,cAAAC,aAAY,YAAAC,iBAAgB;AAazD,IAAM,cAAN,MAAkB;AAAA,EAMrB,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EALpC,YACb;AAAA,EACa,WACb;AAAA,EAIJ,MAAM,MAAM,QAA6C;AACrD,IAAAC,aAAY,MAAM,sCAAsC,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAGvF,SAAK,oBAAoB,MAAM;AAC/B,IAAAA,aAAY,MAAM,mCAAmC,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAGpF,IAAAA,aAAY,MAAM,oCAAoC;AACtD,SAAK,eAAe,YAAY,KAAK;AAGrC,IAAAA,aAAY,MAAM,6BAA6B,KAAK,SAAS,EAAE;AAC/D,IAAAA,aAAY,MAAM,iCAAiC,KAAK,QAAQ,EAAE;AAGlE,UAAM,gBAAgB,KAAK,eAAe,WAAW;AACrD,IAAAA,aAAY,MAAM,mBAAmB,aAAa,EAAE;AAGpD,IAAAA,aAAY,MAAM,2BAA2B,OAAO,MAAM,EAAE;AAC5D,UAAMC,WAAU;AAAA,MACZ,SAAS,YAAY;AACjB,YAAI,CAAC,OAAO,QAAQ;AAChB,gBAAM,IAAI,MAAM,gCAAgC;AAAA,QACpD;AACA,QAAAD,aAAY,MAAM,cAAc,OAAO,MAAM,mBAAmB;AAChE,eAAO,MAAM,KAAK,UAAU,OAAO,MAAM;AAAA,MAC7C;AAAA,MACA,UAAU,YAAY;AAClB,QAAAA,aAAY,MAAM,eAAe,OAAO,UAAU,KAAK,yBAAyB;AAChF,eAAO,MAAM,KAAK,WAAW,OAAO,MAAM;AAAA,MAC9C;AAAA,MACA,OAAO,YAAY;AACf,QAAAA,aAAY,MAAM,sCAAsC;AACxD,eAAO,MAAM,KAAK,QAAQ;AAAA,MAC9B;AAAA,IACJ;AAEA,QAAI;AACA,YAAM,OAAO,MAAMC,SAAQ,OAAO,MAAM,EAAE;AAC1C,MAAAD,aAAY,MAAM,wCAAwC,IAAI,EAAE;AAChE,aAAO,EAAE,UAAU,KAAK;AAAA,IAC5B,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,gCAAgC,OAAO,MAAM,KAAK,KAAK;AACzE,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,oBAAoB,QAAqB;AACrC,IAAAA,aAAY,MAAM,kCAAkC,OAAO,KAAK,YAAY,OAAO,MAAM,YAAY,OAAO,MAAM,EAAE;AAGpH,QAAI,CAAC,OAAO,OAAO;AACf,MAAAA,aAAY,MAAM,uCAAuC;AACzD,aAAO,QAAQ;AAAA,IACnB,WAAW,OAAO,UAAU,OAAO;AAC/B,MAAAA,aAAY,MAAM,kCAAkC,OAAO,KAAK,EAAE;AAClE,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AAGA,QAAI,CAAC,OAAO,QAAQ;AAChB,MAAAA,aAAY,MAAM,iCAAiC;AACnD,YAAM,IAAI,MAAM,uEAAuE;AAAA,IAC3F;AAEA,UAAM,eAAe,CAAC,WAAW,YAAY,OAAO;AACpD,QAAI,CAAC,aAAa,SAAS,OAAO,MAAM,GAAG;AACvC,MAAAA,aAAY,MAAM,2BAA2B,OAAO,MAAM,EAAE;AAC5D,YAAM,IAAI,MAAM,2BAA2B,OAAO,MAAM,wBAAwB,aAAa,KAAK,IAAI,CAAC,EAAE;AAAA,IAC7G;AAGA,QAAI,OAAO,WAAW,aAAa,CAAC,OAAO,QAAQ;AAC/C,MAAAA,aAAY,MAAM,gCAAgC;AAClD,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AAEA,QAAI,OAAO,WAAW,cAAc,CAAC,OAAO,QAAQ;AAChD,MAAAA,aAAY,MAAM,6DAA6D;AAAA,IACnF;AAGA,QAAI,OAAO,QAAQ;AACf,UAAI;AACA,cAAM,cAAc,WAAW,OAAO,MAAM;AAC5C,YAAI,MAAM,WAAW,KAAK,eAAe,GAAG;AACxC,UAAAA,aAAY,MAAM,mBAAmB,OAAO,MAAM,8BAA8B;AAChF,gBAAM,IAAI,MAAM,mBAAmB,OAAO,MAAM,qCAAqC;AAAA,QACzF;AACA,QAAAA,aAAY,MAAM,6BAA6B,OAAO,MAAM,EAAE;AAAA,MAClE,SAAS,OAAO;AACZ,QAAAA,aAAY,MAAM,2BAA2B,OAAO,MAAM,IAAI,KAAK;AACnE,cAAM,IAAI,MAAM,0BAA0B,OAAO,MAAM,kCAAkC;AAAA,MAC7F;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,UAAU,QAAiC;AAC7C,IAAAA,aAAY,MAAM,uBAAuB,MAAM,mBAAmB;AAElE,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,UAAU,aAAa;AAE7B,QAAI,CAAC,SAAS;AACV,MAAAA,aAAY,MAAM,0BAA0B;AAC5C,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC9C;AAEA,IAAAA,aAAY,MAAM,0BAA0B,QAAQ,OAAO,EAAE;AAC7D,IAAAA,aAAY,MAAM,wBAAwB,MAAM,+BAA+BE,YAAW,MAAM,CAAC,EAAE;AAEnG,QAAI;AAEA,MAAAF,aAAY,MAAM,gCAAgC;AAClD,YAAM,EAAE,QAAQ,IAAI,MAAM,aAAa,iBAAiB;AAAA,QACpD,SAAS,KAAK,eAAe,WAAW;AAAA,QACxC,SAAS,KAAK;AAAA,QACd,KAAK;AAAA,QACL,cAAc;AAAA,QACd,OAAOE,YAAW,MAAM;AAAA,MAC5B,CAAC;AAGD,MAAAF,aAAY,MAAM,+BAA+B;AACjD,YAAM,SAAS,MAAM,aAAa,cAAc,OAAO;AACvD,MAAAA,aAAY,MAAM,4CAA4C,MAAM,EAAE;AAGtE,MAAAA,aAAY,MAAM,sCAAsC;AACxD,YAAM,aAAa,0BAA0B;AAAA,QACzC,MAAM;AAAA,MACV,CAAC;AACD,MAAAA,aAAY,MAAM,0BAA0B,MAAM,EAAE;AAGpD,MAAAA,aAAY,MAAM,kCAAkC;AACpD,YAAM,iBAAiB,MAAM,aAAa,aAAa;AAAA,QACnD,SAAS,KAAK;AAAA,QACd,KAAKG;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,QAAQ,OAAO;AAAA,MAC1B,CAAC;AAED,YAAM,mBAAmBC,aAAY,cAAc;AACnD,MAAAJ,aAAY,MAAM,4BAA4B,gBAAgB,EAAE;AAEhE,aAAO,4BAA4B,gBAAgB;AAAA,oBAAsC,MAAM;AAAA,IACnG,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,mCAAmC,KAAK;AAG1D,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,cAAM,IAAI,MAAM,iCAAiC,MAAM,kCAAkC;AAAA,MAC7F,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAGA,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,WAAW,QAAkC;AAC/C,IAAAA,aAAY,MAAM,wBAAwB,UAAU,KAAK,yBAAyB;AAElF,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,UAAU,aAAa;AAE7B,QAAI,CAAC,SAAS;AACV,MAAAA,aAAY,MAAM,0BAA0B;AAC5C,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC9C;AAEA,IAAAA,aAAY,MAAM,0BAA0B,QAAQ,OAAO,EAAE;AAE7D,QAAI;AAEA,UAAI;AACJ,UAAI,CAAC,QAAQ;AACT,QAAAA,aAAY,MAAM,qDAAqD;AACvE,2BAAmB,MAAM,aAAa,aAAa;AAAA,UAC/C,SAAS,KAAK;AAAA,UACd,KAAKG;AAAA,UACL,cAAc;AAAA,UACd,MAAM,CAAC,QAAQ,OAAO;AAAA,QAC1B,CAAC;AACD,QAAAH,aAAY,MAAM,sCAAsCI,aAAY,gBAAgB,CAAC,EAAE;AAAA,MAC3F,OAAO;AACH,2BAAmBF,YAAW,MAAM;AACpC,QAAAF,aAAY,MAAM,gCAAgC,MAAM,aAAa,gBAAgB,OAAO;AAAA,MAChG;AAGA,UAAI,oBAAoB,IAAI;AACxB,QAAAA,aAAY,MAAM,mCAAmCI,aAAY,gBAAgB,CAAC,GAAG;AACrF,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC7D;AAGA,MAAAJ,aAAY,MAAM,mDAAmD;AACrE,YAAM,YAAY,MAAM,KAAK,eAAe;AAAA,QACxC;AAAA,QACA,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,KAAK;AAAA,MACT;AACA,MAAAA,aAAY,MAAM,sBAAsBI,aAAY,SAAS,CAAC,EAAE;AAEhE,UAAI,YAAY,kBAAkB;AAC9B,cAAM,kBAAkB,mBAAmB;AAC3C,QAAAJ,aAAY,MAAM,mCAAmCI,aAAY,eAAe,CAAC,EAAE;AAEnF,cAAMC,UAAS,MAAM,KAAK,eAAe;AAAA,UACrC;AAAA,UACA,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,QACJ;AACA,QAAAL,aAAY,MAAM,uDAAuDK,OAAM,EAAE;AAEjF,cAAM,aAAa,0BAA0B;AAAA,UACzC,MAAMA;AAAA,QACV,CAAC;AACD,QAAAL,aAAY,MAAM,0CAA0C;AAAA,MAChE,OAAO;AACH,QAAAA,aAAY,MAAM,sCAAsC;AAAA,MAC5D;AAGA,MAAAA,aAAY,MAAM,yCAAyC;AAC3D,YAAM,EAAE,QAAQ,IAAI,MAAM,aAAa,iBAAiB;AAAA,QACpD,SAAS,KAAK,eAAe,WAAW;AAAA,QACxC,SAAS,KAAK;AAAA,QACd,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,gBAAgB;AAAA,MAC3B,CAAC;AAGD,MAAAA,aAAY,MAAM,wCAAwC;AAC1D,YAAM,SAAS,MAAM,aAAa,cAAc,OAAO;AACvD,MAAAA,aAAY,MAAM,qDAAqD,MAAM,EAAE;AAG/E,MAAAA,aAAY,MAAM,sCAAsC;AACxD,YAAM,aAAa,0BAA0B;AAAA,QACzC,MAAM;AAAA,MACV,CAAC;AACD,MAAAA,aAAY,MAAM,0BAA0B,MAAM,EAAE;AAGpD,MAAAA,aAAY,MAAM,oCAAoC;AACtD,YAAM,iBAAiB,MAAM,aAAa,aAAa;AAAA,QACnD,SAAS,KAAK;AAAA,QACd,KAAKG;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,QAAQ,OAAO;AAAA,MAC1B,CAAC;AAED,YAAM,mBAAmBC,aAAY,cAAc;AACnD,MAAAJ,aAAY,MAAM,8BAA8B,gBAAgB,EAAE;AAElE,aAAO,6BAA6B,gBAAgB;AAAA,oBAAsC,MAAM;AAAA,IACpG,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,oCAAoC,KAAK;AAG3D,UAAI,MAAM,QAAQ,SAAS,oBAAoB,KAAK,MAAM,QAAQ,SAAS,sBAAsB,GAAG;AAChG,cAAM,IAAI,MAAM,sEAAsE;AAAA,MAC1F,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAGA,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,UAA2B;AAC7B,IAAAA,aAAY,MAAM,0DAA0D;AAE5E,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,UAAU,aAAa;AAE7B,QAAI,CAAC,SAAS;AACV,MAAAA,aAAY,MAAM,0BAA0B;AAC5C,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC9C;AAEA,IAAAA,aAAY,MAAM,0BAA0B,QAAQ,OAAO,EAAE;AAE7D,QAAI;AAEA,MAAAA,aAAY,MAAM,mCAAmC;AACrD,YAAM,WAAW,MAAM,aAAa,aAAa;AAAA,QAC7C,SAAS,KAAK;AAAA,QACd,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,QAAQ,OAAO;AAAA,MAC1B,CAAC;AAED,MAAAA,aAAY,MAAM,SAAS,SAAS,MAAM,sBAAsB;AAEhE,UAAI,SAAS,WAAW,GAAG;AACvB,QAAAA,aAAY,KAAK,2CAA2C;AAC5D,eAAO;AAAA,MACX;AAEA,UAAI,eAAe;AACnB,UAAI,eAAe;AAGnB,eAAS,MAAM,GAAG,MAAM,SAAS,QAAQ,OAAO;AAC5C,QAAAA,aAAY,MAAM,qBAAqB,GAAG,SAAS;AACnD,cAAM,CAAC,aAAa,MAAM,IAAI,MAAM,aAAa,aAAa;AAAA,UAC1D,SAAS,KAAK;AAAA,UACd,KAAK;AAAA,UACL,cAAc;AAAA,UACd,MAAM,CAAC,QAAQ,SAAS,OAAO,GAAG,CAAC;AAAA,QACvC,CAAC;AAED,YAAI,aAAa;AACb,UAAAA,aAAY,MAAM,YAAY,GAAG,0BAA0BI,aAAY,MAAM,CAAC,MAAM;AAGpF,UAAAJ,aAAY,MAAM,6CAA6C,GAAG,EAAE;AACpE,gBAAM,EAAE,QAAQ,IAAI,MAAM,aAAa,iBAAiB;AAAA,YACpD,SAAS,KAAK,eAAe,WAAW;AAAA,YACxC,SAAS,KAAK;AAAA,YACd,KAAK;AAAA,YACL,cAAc;AAAA,YACd,MAAM,CAAC,OAAO,GAAG,CAAC;AAAA,UACtB,CAAC;AAGD,UAAAA,aAAY,MAAM,4CAA4C,GAAG,EAAE;AACnE,gBAAM,SAAS,MAAM,aAAa,cAAc,OAAO;AACvD,UAAAA,aAAY,MAAM,0CAA0C,MAAM,EAAE;AAGpE,UAAAA,aAAY,MAAM,sCAAsC;AACxD,gBAAM,aAAa,0BAA0B;AAAA,YACzC,MAAM;AAAA,UACV,CAAC;AACD,UAAAA,aAAY,MAAM,0BAA0B,MAAM,EAAE;AAEpD,0BAAgB;AAChB;AAAA,QACJ,OAAO;AACH,UAAAA,aAAY,MAAM,YAAY,GAAG,iCAAiC;AAClE;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,iBAAiBI,aAAY,YAAY;AAC/C,MAAAJ,aAAY,MAAM,kBAAkB,cAAc,aAAa,YAAY,WAAW;AAEtF,UAAI,iBAAiB,GAAG;AACpB,eAAO;AAAA,MACX;AAEA,aAAO,0BAA0B,cAAc;AAAA,IACnD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,iCAAiC,KAAK;AAGxD,UAAI,MAAM,QAAQ,SAAS,eAAe,GAAG;AACzC,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAGA,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAEO,IAAM,cAAc;AAAA,EACvB,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,aAAY,IAAI,0BAA0B;AAC1C,IAAAA,aAAY,MAAM,oBAAoB,KAAK,UAAU,QAAQ,SAAS,MAAM,CAAC,CAAC;AAG9E,UAAM,aAAa,OAAO,QAAQ,QAAQ,SAAS,WAAW,QAAQ,QAAQ,KAAK,KAAK,IAAI;AAC5F,IAAAA,aAAY,MAAM,qBAAqB,UAAU,GAAG;AAGpD,UAAM,cAAc,WAAW,YAAY;AAG3C,UAAM,aAAa;AACnB,UAAM,gBAAgB;AACtB,UAAM,aAAa;AAEnB,QAAI,eAA8B;AAClC,QAAI,eAA8B;AAGlC,QAAI,QAAQ,WAAW,MAAM,UAAU;AACvC,QAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,qBAAe;AACf,qBAAe,MAAM,CAAC;AACtB,MAAAA,aAAY,MAAM,+CAA+C,YAAY,EAAE;AAAA,IACnF,OAAO;AAEH,cAAQ,WAAW,MAAM,aAAa;AACtC,UAAI,SAAS,MAAM,UAAU,GAAG;AAC5B,uBAAe;AACf,uBAAe,MAAM,CAAC;AACtB,QAAAA,aAAY,MAAM,gDAAgD,YAAY,EAAE;AAAA,MACpF,OAAO;AAEH,gBAAQ,WAAW,MAAM,UAAU;AACnC,YAAI,OAAO;AACP,yBAAe;AACf,UAAAA,aAAY,MAAM,iCAAiC;AAAA,QACvD;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,CAAC,cAAc;AACf,UAAI,YAAY,SAAS,OAAO,KAAK,YAAY,SAAS,SAAS,GAAG;AAClE,uBAAe;AACf,QAAAA,aAAY,MAAM,6CAA6C;AAAA,MACnE,WAAW,YAAY,SAAS,UAAU,KAAK,YAAY,SAAS,SAAS,KAAK,YAAY,SAAS,YAAY,GAAG;AAClH,uBAAe;AACf,QAAAA,aAAY,MAAM,gDAAgD;AAAA,MACtE,WAAW,YAAY,SAAS,OAAO,GAAG;AACtC,uBAAe;AACf,QAAAA,aAAY,MAAM,qCAAqC;AAAA,MAC3D;AAAA,IACJ;AAGA,QAAI,CAAC,gBAAgB,iBAAiB,SAAS;AAC3C,YAAM,cAAc;AACpB,YAAM,cAAc,WAAW,MAAM,WAAW;AAChD,UAAI,eAAe,YAAY,UAAU,GAAG;AACxC,uBAAe,YAAY,CAAC;AAC5B,QAAAA,aAAY,MAAM,iCAAiC,YAAY,EAAE;AAAA,MACrE;AAAA,IACJ;AAGA,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA;AAAA,MACA,aAAa,YAAY,SAAS,KAAK;AAAA,MACvC,kBAAkB,YAAY,SAAS,OAAO,KAAK,YAAY,SAAS,KAAK;AAAA,MAC7E,aAAa,YAAY,SAAS,KAAK,KAAK,YAAY,SAAS,SAAS;AAAA,IAC9E;AAEA,IAAAA,aAAY,MAAM,2BAA2B,cAAc;AAG3D,QAAI,EAAE,QAAQ,QAAQ,WAAW,WAAW;AACxC,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS,EAAE,OAAO,oBAAoB;AAAA,MAC1C,CAAC;AACD,aAAO;AAAA,IACX;AAGA,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,QAAI;AACA,YAAM,aAAa,MAAM,kBAAkB;AAAA,QACvC;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AACA,MAAAA,aAAY,MAAM,gBAAgB,MAAM,UAAU;AAAA,IACtD,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,8BAA8B,MAAM,OAAO;AAC7D,iBAAW;AAAA,QACP,MAAM,4BAA4B,MAAM,OAAO;AAAA,QAC/C,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,MACpC,CAAC;AACD,aAAO;AAAA,IACX;AAGA,UAAM,eAAeM,gBAAe;AAAA,MAChC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,IAAAR,aAAY,MAAM,4BAA4B,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC;AAO9E,QAAIS;AACJ,QAAI;AAGJ,QAAI,cAAc;AACd,MAAAA,eAAc;AACd,MAAAT,aAAY,MAAM,gDAAgDS,YAAW,EAAE;AAAA,IACnF,WAES,QAAQ,QAAQ;AACrB,MAAAA,eAAc,QAAQ;AACtB,MAAAT,aAAY,MAAM,wCAAwCS,YAAW,EAAE;AAAA,IAC3E,OAEK;AACD,MAAAA,eAAc;AACd,MAAAT,aAAY,MAAM,2CAA2C;AAAA,IACjE;AAGA,QAAIS,iBAAgB,SAAS;AAEzB,UAAI,cAAc;AACd,iBAAS;AACT,QAAAT,aAAY,MAAM,gDAAgD,MAAM,EAAE;AAAA,MAC9E,WAAW,QAAQ,QAAQ;AACvB,iBAAS,QAAQ;AACjB,QAAAA,aAAY,MAAM,wCAAwC,MAAM,EAAE;AAAA,MACtE,WAAWS,iBAAgB,WAAW;AAClC,iBAAS;AACT,QAAAT,aAAY,MAAM,iDAAiD,MAAM,EAAE;AAAA,MAC/E;AAAA,IAEJ;AAEA,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,YAAY,cAAc;AAC7C,UAAM,eAA4B;AAAA,MAC9B,OAAO;AAAA;AAAA,MACP,QAAQS;AAAA,MACR;AAAA,IACJ;AAEA,IAAAT,aAAY,MAAM,wBAAwB,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAE/E,QAAI;AACA,MAAAA,aAAY,MAAM,8BAA8B,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AACrF,YAAM,YAAY,MAAM,OAAO,MAAM,YAAY;AACjD,iBAAW;AAAA,QACP,MAAM,UAAU;AAAA,QAChB,SAAS,EAAE,GAAG,UAAU;AAAA,MAC5B,CAAC;AAED,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,uBAAuB,MAAM,OAAO;AAGtD,UAAI;AACA,QAAAA,aAAY,MAAM,uBAAuB,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AAAA,MAC3E,SAAS,GAAG;AACR,QAAAA,aAAY,MAAM,iEAAiE;AACnF,mBAAW,OAAO,OAAO;AACrB,cAAI;AACA,YAAAA,aAAY,MAAM,GAAG,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,UAC3C,SAASU,IAAG;AACR,YAAAV,aAAY,MAAM,GAAG,GAAG,gCAAgC;AAAA,UAC5D;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,eAAe,MAAM;AAEzB,UAAI,MAAM,QAAQ,SAAS,oBAAoB,GAAG;AAC9C,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,eAAe,GAAG;AAChD,uBAAe;AAAA,MACnB,WAAW,MAAM,QAAQ,SAAS,wBAAwB,GAAG;AACzD,uBAAe;AAAA,MACnB;AAEA,iBAAW;AAAA,QACP,MAAM,iBAAiB,YAAY;AAAA,QACnC,SAAS,EAAE,OAAO,aAAa;AAAA,MACnC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,YAA2B;AACxC,UAAM,aAAa,QAAQ,WAAW,iBAAiB;AACvD,WAAO,OAAO,eAAe,YAAY,WAAW,WAAW,IAAI;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;AC5uBA;AAAA,EACI,kBAAAW;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAEA,cAAAC;AAAA,OAIG;AAEP,OAAO,eAAuC;AAavC,IAAM,eAAN,MAAmB;AAAA,EAWtB,YAAoB,gBAAgC;AAAhC;AAAA,EAAiC;AAAA,EAVpC,mBAA6B;AAAA,IAC1C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACiB,aAAa;AAAA,EAI9B,MAAM,OAAO,QAA+C;AACxD,IAAAC,cAAY,MAAM,kBAAkB,MAAM;AAE1C,QAAI;AACA,YAAM,KAAK,2BAA2B,MAAM;AAC5C,MAAAA,cAAY,MAAM,6BAA6B,MAAM;AAGrD,UAAI,CAAC,OAAO,OAAO;AACf,eAAO,QAAQ;AACf,QAAAA,cAAY,MAAM,uCAAuC;AAAA,MAC7D;AAEA,UAAI,CAAC,OAAO,WAAW;AACnB,eAAO,YAAY,KAAK,eAAe,WAAW;AAClD,QAAAA,cAAY,MAAM,+CAA+C,OAAO,SAAS,EAAE;AAAA,MACvF;AAEA,YAAM,OAAuB;AAAA,QACzB,OAAO,OAAO;AAAA,QACd,WAAW,OAAO;AAAA,QAClB,QAAQ;AAAA,MACZ;AAEA,YAAM,UAAyB;AAAA,QAC3B,SAAS;AAAA,UACL,YAAY;AAAA,UACZ,SAAS;AAAA,QACb;AAAA,MACJ;AAEA,YAAM,KAAK,IAAI,UAAU,KAAK,YAAY,OAAO;AAEjD,UAAI;AAEA,cAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AACzC,aAAG,KAAK,QAAQ,MAAM,QAAQ,CAAC;AAC/B,aAAG,KAAK,SAAS,MAAM;AAAA,QAC3B,CAAC;AAGD,cAAM,UAAU;AAAA,UACZ,MAAM;AAAA,UACN,KAAK,OAAO;AAAA,UACZ,QAAQ,OAAO;AAAA,UACf,SAAS;AAAA,QACb;AACA,QAAAA,cAAY,MAAM,2BAA2B,KAAK,UAAU,OAAO,CAAC,EAAE;AACtE,WAAG,KAAK,KAAK,UAAU,OAAO,CAAC;AAG/B,cAAM,SAAS,MAAM,IAAI,QAAa,CAAC,SAAS,WAAW;AACvD,gBAAM,UAAU,WAAW,MAAM;AAC7B,eAAG,MAAM;AACT,mBAAO,IAAI,MAAM,wBAAwB,CAAC;AAAA,UAC9C,GAAG,IAAK;AAER,aAAG,GAAG,WAAW,CAAC,SAAS;AACvB,kBAAM,WAAW,KAAK,MAAM,KAAK,SAAS,CAAC;AAC3C,YAAAA,cAAY,MAAM,oBAAoB,KAAK,UAAU,QAAQ,CAAC,EAAE;AAGhE,gBAAI,SAAS,SAAS;AAClB,cAAAA,cAAY,MAAM,yBAAyB;AAC3C;AAAA,YACJ;AAGA,gBAAI,SAAS,UAAU,SAAS,GAAG;AAC/B,oBAAMC,UAAS,SAAS,SAAS,CAAC,EAAE,GAAG;AACvC,kBAAIA,SAAQ;AACR,6BAAa,OAAO;AACpB,gBAAAD,cAAY,MAAM,qCAAqCC,OAAM,EAAE;AAC/D,wBAAQA,OAAa;AAAA,cACzB;AAAA,YACJ;AAGA,gBAAI,SAAS,OAAO;AAChB,2BAAa,OAAO;AACpB,cAAAD,cAAY,MAAM,iBAAiB,SAAS,KAAK,EAAE;AACnD,qBAAO,IAAI,MAAM,SAAS,KAAK,CAAC;AAAA,YACpC;AAAA,UACJ,CAAC;AAED,aAAG,GAAG,SAAS,CAAC,UAAU;AACtB,yBAAa,OAAO;AACpB,YAAAA,cAAY,MAAM,oBAAoB,MAAM,OAAO,EAAE;AACrD;AAAA,cACI,IAAI,MAAM,6BAA6B,MAAM,OAAO,EAAE;AAAA,YAC1D;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAED,aAAK,SAAS;AACd,QAAAA,cAAY,MAAM,mBAAmB,OAAO,KAAK,OAAO,OAAO,SAAS,SAAS,MAAM,EAAE;AACzF,eAAO;AAAA,MACX,UAAE;AACE,WAAG,MAAM;AAAA,MACb;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,cAAY,MAAM,iBAAiB,MAAM,OAAO,IAAI,KAAK;AACzD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,2BAA2B,QAAqC;AAClE,IAAAA,cAAY,MAAM,2BAA2B,MAAM;AAEnD,QAAI;AAEA,UAAI,CAAC,OAAO,OAAO;AACf,eAAO,QAAQ;AACf,QAAAA,cAAY,MAAM,uCAAuC;AAAA,MAC7D;AAEA,UAAI,CAAC,KAAK,iBAAiB,SAAS,OAAO,KAAK,GAAG;AAC/C,cAAM,IAAI,MAAM,sBAAsB,OAAO,KAAK,2BAA2B,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAAE;AAAA,MACnH;AAGA,UAAI,CAAC,OAAO,WAAW;AAEnB,eAAO,YAAY,KAAK,eAAe,WAAW;AAClD,QAAAA,cAAY,MAAM,8CAA8C,OAAO,SAAS,EAAE;AAClF;AAAA,MACJ;AAGA,UAAI,OAAO,OAAO,cAAc,YAAY,OAAO,UAAU,WAAW,IAAI,KAAK,OAAO,UAAU,WAAW,IAAI;AAC7G,QAAAA,cAAY,MAAM,+BAA+B,OAAO,SAAS,EAAE;AACnE;AAAA,MACJ;AAGA,UAAI;AACA,eAAO,YAAY,MAAM,KAAK,eAAe,cAAc,OAAO,SAAS;AAC3E,QAAAA,cAAY,MAAM,sCAAsC,OAAO,SAAS,EAAE;AAAA,MAC9E,SAAS,OAAO;AACZ,QAAAA,cAAY,MAAM,6BAA6B,MAAM,OAAO,EAAE;AAE9D,eAAO,YAAY,KAAK,eAAe,WAAW;AAClD,QAAAA,cAAY,MAAM,mCAAmC,OAAO,SAAS,EAAE;AAAA,MAC3E;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,cAAY,MAAM,wCAAwC,MAAM,OAAO,EAAE;AACzE,YAAM;AAAA,IACV;AAEA,IAAAA,cAAY,MAAM,6BAA6B,MAAM;AAAA,EACzD;AACJ;AAEO,IAAM,eAAe;AAAA,EACxB,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,cAAY,IAAI,2BAA2B;AAG3C,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEA,UAAM,aAAa,MAAM,kBAAkB;AAAA,MACvC;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAGA,UAAM,gBAAgBE,gBAAe;AAAA,MACjC,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,aAAa,cAAc;AAC9C,UAAM,eAA6B;AAAA,MAC/B,OAAO,QAAQ;AAAA,MACf,WAAW,QAAQ;AAAA,IACvB;AACA,QAAI;AACA,YAAM,aAAa,MAAM,OAAO,OAAO,YAAY;AACnD,iBAAW;AAAA,QACP,MAAM,4BAA4B,WAAW,KAAK,OAAO,WAAW,SAAS;AAAA,oBAAuB,WAAW,MAAM;AAAA,QACrH,SAAS;AAAA,UACL,MAAM,WAAW;AAAA,UACjB,WAAW,WAAW;AAAA,UACtB,OAAO,QAAQ,SAAS;AAAA;AAAA,QAC5B;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAJ,cAAY,MAAM,wBAAwB,MAAM,OAAO;AAGvD,UAAI,cAAc,2BAA2B,MAAM,OAAO;AAE1D,UAAI,MAAM,QAAQ,SAAS,iBAAiB,GAAG;AAC3C,sBAAc;AAAA,MAClB,WAAW,MAAM,QAAQ,SAAS,mBAAmB,GAAG;AACpD,sBAAc,MAAM;AAAA,MACxB,WAAW,MAAM,QAAQ,SAAS,iBAAiB,GAAG;AAClD,sBAAc;AAAA,MAClB;AAEA,iBAAW;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,UACL,OAAO,MAAM;AAAA,UACb,gBAAgB,aAAa,SAAS;AAAA,UACtC,kBAAkB,aAAa;AAAA,QACnC;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,aAA4B;AACzC,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,OAAO;AAAA,YACP,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,iBAAiB;AACzC;;;ACvTA,SAAS,iBAAAK,sBAAqB;AAC9B;AAAA,EACI,kBAAAC;AAAA,EACA,eAAAC;AAAA,EACA,4BAAAC;AAAA,EAGA,cAAAC;AAAA,OAIG;AACP,SAAS,cAAc,gBAAgB;AACvC,SAAS,cAAc;AACvB,SAAS,eAAe;;;AClBxB,SAAS,iBAAAC,sBAAqB;AAG9B,IAAMC,WAAUD,eAAc,YAAY,GAAG;AAC7C,IAAM,EAAE,OAAO,IAAIC,SAAQ,8BAA8B;AAElD,IAAM,gBAAgB,OAAO,YAA2B;AAC3D,QAAM,UAAU,QAAQ,WAAW,oBAAoB;AACvD,QAAM,SACN,YAAY,YAAY,OAAO,SAAS,IAAI,OAAO,SAAS;AAE5D,SAAO;AACX;AAEO,IAAM,iBAAiB,OAAO,YAA2B;AAC5D,QAAM,SAAS,MAAM,cAAc,OAAO;AAC1C,MAAI,CAAC,OAAO,uBAAuB,CAAC,OAAO,oBAAoB;AAC3D,UAAM,IAAI,MAAM,4CAA4C;AAAA,EAChE;AAEA,QAAM,SAAS,OAAO;AAAA,IAClB,OAAO;AAAA,IACP,OAAO;AAAA,EACX;AAEA,SAAO;AACX;AAEO,IAAM,SAAS;AAAA,EAClB,SAAS;AAAA,IACL,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,oBAAoB;AAAA,IACpB,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,IACrB,iBAAiB;AAAA,EACrB;AAAA,EACA,SAAS;AAAA,IACL,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,oBAAoB;AAAA,IACpB,oBACI;AAAA,IACJ,qBAAqB;AAAA,IACrB,iBAAiB;AAAA,EACrB;AACJ;;;AC9CO,IAAM,kBAAkB;AAAA,EAC3B;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AACJ;;;ACr9BO,IAAM,eAAe;AAAA,EACxB;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,WAAW;AAAA,IACX,QAAQ;AAAA,MACJ;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,MACJ;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACL;AAAA,QACI,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AAAA,EACA;AAAA,IACI,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACV;AACJ;;;AH7gBA,SAAS,cAAAC,mBAA+B;AAIxC,IAAMC,WAAUC,eAAc,YAAY,GAAG;AAC7C,IAAM;AAAA,EACF,QAAAC;AAAA,EACA;AAAA,EACA;AACJ,IAAIF,SAAQ,8BAA8B;AAEnC,IAAM,mBAAN,MAAuB;AAAA,EAC1B,YACY,gBACA,YACV;AAFU;AACA;AAAA,EACR;AAAA,EAEJ,MAAM,SAAS;AACX,UAAM,MAAM,MAAM,KAAK,WAAW,GAAG,oBAAoB;AAEzD,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,WAAW;AACb,UAAM,WAAW,MAAM,KAAK,OAAO;AAEnC,UAAM,cAAc,KAAK,MAAM,KAAK,OAAO,IAAI,SAAS,MAAM;AAE9D,UAAM,uBAAuB;AAAA,MACzB,GAAG,SAAS,MAAM,GAAG,WAAW;AAAA,MAChC,GAAG,SAAS,MAAM,cAAc,CAAC;AAAA,IACrC,EAAE,IAAI,CAAC,SAAS,KAAK,eAAe;AACpC,UAAM,eAAe;AAAA,MACjB,IAAI,SAAS,WAAW,EAAE;AAAA,MAC1B,UAAU,SAAS,WAAW,EAAE;AAAA,MAChC,kBAAkB,SAAS,WAAW,GAAG;AAAA,MACzC,aAAa,SAAS,WAAW,EAAE;AAAA,MACnC;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,kBAAkB,QAAgB,SAAwB;AAC5D,UAAM,SAAS,MAAM,cAAc,OAAO;AAE1C,UAAM,QAAwB,OAAO,YAAY,YAAY,eAAe;AAC5E,SAAK,eAAe,YAAY,KAAK;AACrC,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,UAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAE9D,UAAM,CAAC,UAAU,WAAW,IAAI,MAAM,aAAa,aAAa;AAAA,MAC5D,SAAS,OAAO;AAAA,MAChB,KAAK;AAAA,MACL,cAAc;AAAA,IAClB,CAAC;AACD,UAAM,aAAa,WAAW;AAC9B,UAAM,cAAc,aAAa;AAEjC,UAAM,EAAE,QAAQ,IAAI,MAAM,aAAa,iBAAiB;AAAA,MACpD,SAAS,KAAK,eAAe,WAAW;AAAA,MACxC,SAAS,OAAO;AAAA,MAChB,KAAK;AAAA,MACL,cAAc;AAAA,MACd,MAAM,CAAC,KAAK,eAAe,WAAW,GAAG,MAAM;AAAA,MAC/C,OAAO;AAAA,IACX,CAAC;AAED,UAAM,OAAO,MAAM,aAAa,cAAc,OAAO;AACrD,UAAM,KAAK,MAAM,aAAa,0BAA0B;AAAA,MACpD;AAAA,IACJ,CAAC;AAED,WAAO,GAAG;AAAA,EACd;AAAA,EAEA,MAAM,aAAa,KAAsB;AACrC,IAAAG,cAAY,IAAI,kBAAkB;AAClC,UAAM,iBAAiB,MAAM,KAAK,WAAW,OAAO,aAAa,GAAG;AAEpE,UAAM,6BAA6B,MAAM,eAAe,SAAS;AAAA,MAC7D,OAAO;AAAA,IACX,CAAC;AAED,UAAM,oBAAoB,MAAM,eAAe,UAAU;AAAA,MACrD,OAAO;AAAA,MACP,UAAU,OAAO,4BAA4B,QAAQ;AAAA,MACrD,UAAU,4BAA4B,YAAY;AAAA,MAClD,OAAO,IAAI;AAAA,MACX,SAAS;AAAA,MACT,YAAY,KAAK,eAAe,MAAM;AAAA,IAC1C,CAAC;AAED,IAAAA,cAAY,IAAI,qBAAqB,iBAAiB;AAEtD,QAAI,kBAAkB,SAAS,GAAG;AAC9B,MAAAA,cAAY,IAAI,uBAAuB;AAAA,IAC3C;AACA,WAAO,kBAAkB;AAAA,EAC7B;AAAA,EAEA,MAAM,WAAW,YAAoB;AACjC,UAAM,EAAE,WAAW,IAAI,MAAM,KAAK,WAAW,OAAO,WAAW,UAAU;AACzE,WAAO,WAAW;AAAA,EACtB;AAAA,EAEA,MAAM,aAAa,KAAgC;AAC/C,IAAAA,cAAY,IAAI,2BAA2B;AAC3C,UAAM,YAAY,MAAM,KAAK,WAAW,OAAO;AAAA,MAC3C;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,YAAY,KAAK,eAAe,MAAM;AAAA,MAC1C;AAAA,IACJ;AACA,QAAI,UAAU,SAAS,GAAG;AACtB,MAAAA,cAAY,IAAI,uBAAuB;AAAA,IAC3C;AACA,WAAO,UAAU;AAAA,EACrB;AAAA,EAEA,MAAM,WAAW,YAAoB,YAAoB;AACrD,UAAM,EAAE,WAAW,IAAI,MAAM,KAAK,WAAW,OAAO,WAAW,YAAY,UAAU;AACrF,WAAO,WAAW;AAAA,EACtB;AAAA,EAEA,MAAM,aAAa,KAAsB;AACrC,UAAM,iBAAiB,MAAM,KAAK,WAAW,OAAO,aAAa,GAAG;AAEpE,UAAM,eAAe,MAAM,eAAe,SAAS;AAAA,MAC/C,OAAO;AAAA,IACX,CAAC;AAED,UAAM,MAAM,MAAM,eAAe,UAAU;AAAA,MACvC,OAAO;AAAA,MACP,UAAU,OAAO,cAAc,QAAQ;AAAA,MACvC,UAAU,cAAc,YAAY;AAAA,MACpC,OAAO,IAAI;AAAA,MACX,SAAS;AAAA,MACT,YAAY,KAAK,eAAe,MAAM;AAAA,IAC1C,CAAC;AAED,QAAI,IAAI,SAAS,GAAG;AAChB,MAAAA,cAAY,IAAI,gBAAgB;AAAA,IACpC;AAEA,WAAO,IAAI;AAAA,EACf;AACJ;AAEO,IAAM,mBAAmB;AAAA,EAC5B,MAAM;AAAA,EACN,aACI;AAAA,EACJ,SAAS,OACL,SACA,SACA,OACA,UACA,aACC;AACD,IAAAA,cAAY,IAAI,yBAAyB;AAGzC,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAGA,UAAM,UAAUC,gBAAe;AAAA,MAC3B;AAAA,MACA,UAAU;AAAA,IACd,CAAC;AACD,UAAM,UAAU,MAAMC,0BAAyB;AAAA,MAC3C;AAAA,MACA;AAAA,MACA,YAAYC,YAAW;AAAA,IAC3B,CAAC;AAED,IAAAH,cAAY,IAAI,WAAW,OAAO;AAElC,UAAM,SAAS,MAAM,cAAc,OAAO;AAC1C,UAAM,aAAa,MAAM,eAAe,OAAO;AAC/C,UAAM,iBAAiB,mBAAmB,OAAO;AACjD,UAAM,SAAS,IAAI,iBAAiB,gBAAgB,UAAU;AAE9D,UAAM,aAAa,QAAQ;AAC3B,UAAM,SAAS,MAAM,OAAO,SAAS;AACrC,IAAAA,cAAY,IAAI,qBAAqB,MAAM;AAE3C,IAAAA,cAAY,IAAI,6BAA6B,OAAO;AAEpD,UAAM,EAAE,YAAY,WAAW,IAAI;AACnC,UAAM,cAAc,QAAQ,QAAQ;AAEpC,QAAI;AACA,UAAI,SAAS;AACb,cAAQ,YAAY;AAAA,QAChB,KAAK,gBAAgB;AACjB,gBAAM,MAAM;AAAA,YACR;AAAA,YACA,SAAS,eAAe,QAAQ;AAAA,YAChC,YAAY,eAAe;AAAA,YAC3B,kBAAkB,KAAK,WAAW,GAAG;AAAA,YACrC,gBAAgB,eAAe,QAAQ;AAAA,YACvC,kBAAkB,OAAO;AAAA,UAC7B;AACA,gBAAM,OAAO,MAAM,OAAO,aAAa,GAAG;AAC1C,gBAAM,WAAW,MAAM,OAAO,WAAW,IAAI,UAAU;AACvD,mBAAS,wCAAwC,OAAO,eAAe,WAAW,MAAM,QAAQ,CAAC;AACjG;AAAA,QACJ;AAAA,QAEA,KAAK,gBAAgB;AACjB,cAAI,CAAC,aAAa;AACd,kBAAM,IAAI,MAAM,mBAAmB;AAAA,UACvC;AAEA,gBAAM,gBAAgB;AAEtB,cAAI,YAAY,MAAM,OAAO,aAAa;AAAA,YACtC;AAAA,YACA,YAAY;AAAA,YACZ,MAAM,aAAa,YAAY,CAAC,CAAC;AAAA,YACjC,eAAe;AAAA,cACX,YAAY,eAAe;AAAA,YAC/B;AAAA,UACJ,CAAC;AACD,UAAAA,cAAY,IAAI,uBAAuB,SAAS;AAChD,gBAAM,WAAW,MAAM,OAAO,WAAW,YAAY,UAAU;AAE/D,cAAI,YAAY,SAAS,GAAG;AACxB,sBAAU;AAAA;AAAA,UACd;AACA,oBAAU,kBAAkB,aAAa,4BAA4B,OAAO,eAAe,WAAW,MAAM,QAAQ,CAAC;AACrH;AAAA,QACJ;AAAA,QAEA,KAAK,gBAAgB;AACjB,gBAAM,OAAO,MAAM,OAAO,aAAa;AAAA,YACnC;AAAA,YACA;AAAA,YACA,UAAU,eAAe,QAAQ;AAAA,UACrC,CAAC;AACD,mBAAS,uCAAuC,IAAI;AACpD;AAAA,QACJ;AAAA,QAEA,KAAK,sBAAsB;AACvB,gBAAM,OAAO,MAAM,OAAO,kBAAkBI,YAAW,OAAO,QAAQ,MAAM,CAAC,GAAG,OAAO;AACvF,mBAAS,kDAAkD,IAAI;AAC/D;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,QAAQ;AACR,mBAAW;AAAA,UACP,MAAM;AAAA,QACV,CAAC;AAAA,MACL,OAAO;AACH,mBAAW;AAAA,UACP,MAAM,kBAAkB,cAAc,EAAE;AAAA,UACxC,SAAS;AAAA,QACb,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAJ,cAAY,MAAM,oCAAoC,MAAM,OAAO;AACnE,iBAAW;AAAA,QACP,MAAM,kBAAkB,MAAM,OAAO;AAAA,QACrC,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,MACpC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,EACV,UAAU,OAAO,aAA4B;AACzC,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAEA,SAAS,aAAa,YAAmB;AACrC,QAAM,WAAW,QAAQ,WAAW,GAAG;AAEvC,EAAAA,cAAY,IAAI,YAAY,QAAQ;AAEpC,QAAM,QAAQ,SAAS,QAAQ;AAC/B,QAAM,WAAW,MAAM;AACvB,QAAM,OAAO,QAAQ,QAAQ;AAC7B,QAAM,OAAO,OAAO,IAAI;AAExB,MAAI,CAAC,KAAM,OAAM,IAAI,MAAM,0BAA0B,QAAQ,EAAE;AAE/D,SAAO;AAAA,IACH,MAAM;AAAA,IACN;AAAA,IACA,MAAM;AAAA,IACN,SAAS,aAAa,QAAQ;AAAA,EAClC;AACJ;AAEA,SAAS,QAAQ,KAAa;AAC1B,SAAO,IAAI,QAAQ,iBAAiB,SAAS;AACjD;AAEA,SAAS,MAAM,GAAW;AACtB,SAAO,OAAO,OAAO,CAAC,EAAE,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AACzD;;;AJ/VA,IAAM,UAAU,IAAI;AAAA,EAChB,MAAM,MAAM,KAAK,4BAA4B;AAAA,EAC7C,SAAS;AAAA,EACT,OAAO;AACX,CAAC,EAAE,MAAM;AAET,IAAM,UAAU;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACF;AACF;AAEA,IAAM,aAAa;AAInB,IAAI,YAAY;AAEZ,UAAQ,IAAI;AAAA,EAAK,MAAM,KAAK,8PAA4C,CAAC,EAAE;AAC3E,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,OAAO,KAAK,mCAAmC,IAAI,MAAM,KAAK,SAAI,CAAC;AACvG,UAAQ,IAAI,MAAM,KAAK,8PAA4C,CAAC;AACpE,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,oCAAoC,IAAI,MAAM,KAAK,QAAG,CAAC;AACjG,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,0CAA0C,IAAI,MAAM,KAAK,QAAG,CAAC;AACvG,UAAQ,IAAI,MAAM,KAAK,8PAA4C,CAAC;AAGpE,QAAM,SAAS,UAAU;AACzB,QAAM,cAAc,OAAO,mBAAmB,MAAM,MAAM,QAAG,IAAI,MAAM,IAAI,QAAG;AAC9E,QAAM,qBAAqB,OAAO,2BAA2B,MAAM,MAAM,QAAG,IAAI,MAAM,IAAI,QAAG;AAC7F,QAAM,gBAAgB,OAAO,qBAAqB,MAAM,MAAM,QAAG,IAAI,MAAM,IAAI,QAAG;AAClF,QAAM,SAAS,OAAO,mBAAmB,OAAO,iBAAiB,MAAM,MAAM,QAAG,IAAI,MAAM,OAAO,GAAG;AAEpG,UAAQ,IAAI;AAAA,EAAK,MAAM,KAAK,8PAA4C,CAAC,EAAE;AAC3E,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,wCAAwC,IAAI,MAAM,KAAK,QAAG,CAAC;AACrG,UAAQ,IAAI,MAAM,KAAK,8PAA4C,CAAC;AACpE,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,sBAAsB,WAAW,sBAAsB,IAAI,MAAM,KAAK,QAAG,CAAC;AACpH,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,sBAAsB,kBAAkB,sBAAsB,IAAI,MAAM,KAAK,QAAG,CAAC;AAC3H,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,sBAAsB,aAAa,sBAAsB,IAAI,MAAM,KAAK,QAAG,CAAC;AACtH,UAAQ,IAAI,MAAM,KAAK,QAAG,IAAI,MAAM,MAAM,sBAAsB,MAAM,sBAAsB,IAAI,MAAM,KAAK,QAAG,CAAC;AAC/G,UAAQ,IAAI,MAAM,KAAK,8PAA4C,CAAC;AAGpE,UAAQ,QAAQ,MAAM,MAAM,sCAAsC,CAAC;AAGnE,QAAM,cAAc,IAAI,MAAM;AAAA,IAC5B,MAAM;AAAA,MACJ,MAAM,KAAK,QAAQ;AAAA,MACnB,MAAM,KAAK,GAAG;AAAA,MACd,MAAM,KAAK,GAAG;AAAA,MACd,MAAM,KAAK,GAAG;AAAA,MACd,MAAM,KAAK,SAAS;AAAA,IACtB;AAAA,IACA,OAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ,CAAC,MAAM;AAAA,IACjB;AAAA,EACF,CAAC;AAGD,aAAW,UAAU,SAAS;AAC1B,gBAAY,KAAK;AAAA,MACb,MAAM,MAAM,OAAO,IAAI;AAAA,MACvB,OAAO,OAAO,YAAY,aAAa,MAAM,MAAM,QAAG,IAAI,MAAM,IAAI,QAAG;AAAA,MACvE,OAAO,OAAO,aAAa,aAAa,MAAM,MAAM,QAAG,IAAI,MAAM,IAAI,QAAG;AAAA,MACxE,OAAO,UAAU,SAAS,IAAI,MAAM,MAAM,QAAG,IAAI,MAAM,IAAI,QAAG;AAAA,MAC9D,MAAM,KAAK,OAAO,SAAS,KAAK,IAAI,KAAK,MAAM;AAAA,IACnD,CAAC;AAAA,EACL;AAGA,UAAQ,IAAI;AAAA,EAAK,YAAY,SAAS,CAAC,EAAE;AAGzC,QAAM,cAAc,IAAI,MAAM;AAAA,IAC5B,OAAO;AAAA,MACL,QAAQ,CAAC,MAAM;AAAA,IACjB;AAAA,EACF,CAAC;AAED,cAAY;AAAA,IACV,CAAC,MAAM,KAAK,eAAe,CAAC;AAAA,IAC5B,CAAC,MAAM,MAAM,YAAY,IAAI,MAAM,OAAO,YAAY,CAAC;AAAA,IACvD,CAAC,MAAM,MAAM,YAAY,IAAI,MAAM,MAAM,QAAQ,OAAO,SAAS,CAAC,CAAC;AAAA,IACnE,CAAC,MAAM,MAAM,YAAY,IAAI,MAAM,MAAM,gBAAgB,CAAC;AAAA,EAC5D;AAEA,UAAQ,IAAI;AAAA,EAAK,YAAY,SAAS,CAAC;AAAA,CAAI;AAC/C,OAAO;AAEH,UAAQ,KAAK;AACjB;AAGO,IAAM,YAAoB;AAAA,EAC7B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,WAAW,CAAC,iBAAiB;AAAA,EAC7B,UAAU,CAAC;AAAA,EACX;AAAA,EACA,YAAY,CAAC;AACjB;AAEA,IAAO,gBAAQ;","names":["elizaLogger","TESTNET_TOKEN_ADDRESSES","elizaLogger","process","e","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatUnits","parseEther","erc20Abi","elizaLogger","publicClient","parseEther","value","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","e","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","parseEther","parseUnits","erc20Abi","elizaLogger","parseEther","erc20Abi","parseUnits","composeContext","generateObjectDeprecated","ModelClass","e","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","solc","parseUnits","elizaLogger","require","elizaLogger","solc","parseUnits","composeContext","generateObjectDeprecated","ModelClass","e","util","objectUtil","path","errorUtil","path","errorMap","ctx","result","issues","elements","processed","r","_a","_b","ZodFirstPartyTypeKind","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","erc20Abi","formatEther","formatUnits","elizaLogger","erc20Abi","formatEther","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","getToken","erc20Abi","formatEther","formatUnits","elizaLogger","getToken","formatEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatEther","parseEther","erc20Abi","elizaLogger","actions","parseEther","erc20Abi","formatEther","txHash","composeContext","generateObjectDeprecated","ModelClass","stakeAction","e","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","txHash","composeContext","generateObjectDeprecated","ModelClass","createRequire","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","createRequire","require","parseEther","require","createRequire","Client","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","parseEther"]}