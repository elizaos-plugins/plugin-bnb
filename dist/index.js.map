{"version":3,"sources":["../src/actions/swap.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/transfer.ts","../src/types/index.ts","../src/actions/getBalance.ts","../src/actions/bridge.ts","../src/actions/stake.ts","../src/actions/faucet.ts","../src/actions/deploy.ts","../src/utils/contracts.ts","../src/actions/gnfd.ts","../src/providers/gnfd.ts","../src/abi/CrossChainAbi.ts","../src/abi/TokenHubAbi.ts","../src/index.ts"],"sourcesContent":["import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { executeRoute, getRoutes } from \"@lifi/sdk\";\nimport { parseEther } from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, SwapResponse } from \"../types\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async swap(params: SwapParams): Promise<SwapResponse> {\n        elizaLogger.debug(\"Swap params:\", params);\n        this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized swap params:\", params);\n\n        const fromAddress = this.walletProvider.getAddress();\n        const chainId = this.walletProvider.getChainConfigs(params.chain).id;\n\n        this.walletProvider.configureLiFiSdk(params.chain);\n\n        const resp: SwapResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            fromToken: params.fromToken,\n            toToken: params.toToken,\n            amount: params.amount,\n        };\n\n        const routes = await getRoutes({\n            fromChainId: chainId,\n            toChainId: chainId,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: parseEther(params.amount).toString(),\n            fromAddress: fromAddress,\n            options: {\n                slippage: params.slippage,\n                order: \"RECOMMENDED\",\n            },\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n\n        const execution = await executeRoute(routes.routes[0]);\n        const process =\n            execution.steps[0]?.execution?.process[\n                execution.steps[0]?.execution?.process.length - 1\n            ];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        resp.txHash = process.txHash as `0x${string}`;\n\n        return resp;\n    }\n\n    validateAndNormalizeParams(params: SwapParams): void {\n        if (params.chain !== \"bsc\") {\n            throw new Error(\"Only BSC mainnet is supported\");\n        }\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting swap action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose swap context\n        const swapContext = composeContext({\n            state: currentState,\n            template: swapTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new SwapAction(walletProvider);\n        const swapOptions: SwapParams = {\n            chain: content.chain,\n            fromToken: content.inputToken,\n            toToken: content.outputToken,\n            amount: content.amount,\n            slippage: content.slippage,\n        };\n        try {\n            const swapResp = await action.swap(swapOptions);\n            callback?.({\n                text: `Successfully swap ${swapResp.amount} ${swapResp.fromToken} tokens to ${swapResp.toToken}\\nTransaction Hash: ${swapResp.txHash}`,\n                content: { ...swapResp },\n            });\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during swap:\", error.message);\n            callback?.({\n                text: `Swap failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 1 BNB for USDC on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you swap 1 BNB for USDC on BSC\",\n                    action: \"SWAP\",\n                    content: {\n                        chain: \"bsc\",\n                        inputToken: \"BNB\",\n                        outputToken: \"USDC\",\n                        amount: \"1\",\n                        slippage: undefined,\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Buy some token of 0x1234 using 1 USDC on BSC. The slippage should be no more than 5%\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you swap 1 USDC for token 0x1234 on BSC\",\n                    action: \"SWAP\",\n                    content: {\n                        chain: \"bsc\",\n                        inputToken: \"USDC\",\n                        outputToken: \"0x1234\",\n                        amount: \"1\",\n                        slippage: 0.05,\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"SWAP\", \"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n};\n","import type {\n     IAgentRuntime,\n     Provider,\n     Memory,\n     State,\n} from \"@elizaos/core\";\nimport { EVM, createConfig, getToken } from \"@lifi/sdk\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n    Hex,\n} from \"viem\";\nimport {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n    erc20Abi,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\nimport { createWeb3Name } from \"@web3-name-sdk/core\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"bsc\";\n    chains: Record<string, Chain> = { bsc: viemChains.bsc };\n    account: PrivateKeyAccount;\n\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n\n    getAccount(): PrivateKeyAccount {\n        return this.account;\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    configureLiFiSdk(chainName: SupportedChain) {\n        const chains = Object.values(this.chains);\n        const walletClient = this.getWalletClient(chainName);\n\n        createConfig({\n            integrator: \"eliza\",\n            providers: [\n                EVM({\n                    getWalletClient: async () => walletClient,\n                    switchChain: async (chainId) =>\n                        createWalletClient({\n                            account: this.account,\n                            chain: chains.find(\n                                (chain) => chain.id === chainId\n                            ) as Chain,\n                            transport: http(),\n                        }),\n                }),\n            ],\n        });\n    }\n\n    async formatAddress(address: string): Promise<Address> {\n        if (!address || address.length === 0) {\n            throw new Error(\"Empty address\");\n        }\n\n        if (address.startsWith(\"0x\") && address.length === 42) {\n            return address as Address;\n        }\n\n        const resolvedAddress = await this.resolveWeb3Name(address);\n        if (resolvedAddress) {\n            return resolvedAddress as Address;\n        }\n        throw new Error(\"Invalid address\");\n    }\n\n    async resolveWeb3Name(name: string): Promise<string | null> {\n        const nameService = createWeb3Name();\n        return await nameService.getAddress(name);\n    }\n\n    async checkERC20Allowance(\n        chain: SupportedChain,\n        token: Address,\n        owner: Address,\n        spender: Address,\n    ): Promise<bigint> {\n        const publicClient = this.getPublicClient(chain);\n        return await publicClient.readContract({\n            address: token,\n            abi: erc20Abi,\n            functionName: \"allowance\",\n            args: [owner, spender],\n        });\n    }\n\n    async approveERC20(\n        chain: SupportedChain,\n        token: Address,\n        spender: Address,\n        amount: bigint\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: token,\n            abi: erc20Abi,\n            functionName: \"approve\",\n            args: [spender, amount],\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async transfer(\n        chain: SupportedChain,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n            data?: Hex;\n        }\n    ): Promise<Hex> {\n        const walletClient = this.getWalletClient(chain);\n        return await walletClient.sendTransaction({\n            account: this.account,\n            to: toAddress,\n            value: amount,\n            chain: this.getChainConfigs(chain),\n            ...options,\n        });\n    }\n\n    async transferERC20(\n        chain: SupportedChain,\n        tokenAddress: Address,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n        }\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"transfer\",\n            args: [toAddress as `0x${string}`, amount],\n            ...options,\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async getBalance(): Promise<string> {\n        const client = this.getPublicClient(this.currentChain);\n        const balance = await client.getBalance({\n            address: this.account.address,\n        });\n        return formatUnits(balance, 18);\n    }\n\n    async getTokenAddress(\n        chainName: SupportedChain,\n        tokenSymbol: string\n    ): Promise<string> {\n        const token = await getToken(\n            this.getChainConfigs(chainName).id,\n            tokenSymbol\n        );\n        return token.address;\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames = [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"];\n    const chains = {};\n\n    for (const chainName of chainNames) {\n        const chain = WalletProvider.genChainFromName(chainName);\n        chains[chainName] = chain;\n    }\n\n    const mainnet_rpcurl = runtime.getSetting(\"BSC_PROVIDER_URL\");\n    if (mainnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"bsc\", mainnet_rpcurl);\n        chains[\"bsc\"] = chain;\n    }\n\n    const opbnb_rpcurl = runtime.getSetting(\"OPBNB_PROVIDER_URL\");\n    if (opbnb_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"opBNB\", opbnb_rpcurl);\n        chains[\"opBNB\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"BNB_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const bnbWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `BNB chain Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in BNB chain wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const getBalanceTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested check balance:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Address to check balance for. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\n- Token symbol or address. Could be a token symbol or address. If the address is provided, it must be a valid Ethereum address starting with \"0x\". Default is \"BNB\".\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"address\": string | null,\n    \"token\": string\n}\n\\`\\`\\`\n`;\n\nexport const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Token symbol or address(string starting with \"0x\"). Optional.\n- Amount to transfer. Optional. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Recipient address. Must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n- Data. Optional, data to be included in the transaction.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"token\": string | null,\n    \"amount\": string | null,\n    \"toAddress\": string,\n    \"data\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Input token symbol or address(string starting with \"0x\").\n- Output token symbol or address(string starting with \"0x\").\n- Amount to swap. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Slippage. Optional, expressed as decimal proportion, 0.03 represents 3%.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- From chain. Must be one of [\"bsc\", \"opBNB\"].\n- To chain. Must be one of [\"bsc\", \"opBNB\"].\n- From token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- To token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- Amount to bridge. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- To address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"fromChain\": \"bsc\" | \"opBNB\",\n    \"toChain\": \"bsc\" | \"opBNB\",\n    \"fromToken\": string | null,\n    \"toToken\": string | null,\n    \"amount\": string,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const stakeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested stake action:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Action to execute. Must be one of [\"deposit\", \"withdraw\", \"claim\"].\n- Amount to execute. Optional, must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\"). If the action is \"deposit\" or \"withdraw\", amount is required.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"action\": \"deposit\" | \"withdraw\" | \"claim\",\n    \"amount\": string | null,\n}\n\\`\\`\\`\n`;\n\nexport const faucetTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested faucet request:\n- Token. Token to request. Could be one of [\"BNB\", \"BTC\", \"BUSD\", \"DAI\", \"ETH\", \"USDC\"]. Optional.\n- Recipient address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const ercContractTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nWhen user wants to deploy any type of token contract (ERC20/721/1155), this will trigger the DEPLOY_TOKEN action.\n\nExtract the following details for deploying a token contract:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- contractType: The type of token contract to deploy\n  - For ERC20: Extract name, symbol, decimals, totalSupply\n  - For ERC721: Extract name, symbol, baseURI\n  - For ERC1155: Extract name, baseURI\n- name: The name of the token.\n- symbol: The token symbol (only for ERC20/721).\n- decimals: Token decimals (only for ERC20). Default is 18.\n- totalSupply: Total supply with decimals (only for ERC20). Default is \"1000000000000000000\".\n- baseURI: Base URI for token metadata (only for ERC721/1155).\nIf any field is not provided, use the default value. If no default value is provided, use empty string.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"contractType\": \"ERC20\" | \"ERC721\" | \"ERC1155\",\n    \"name\": string,\n    \"symbol\": string | null,\n    \"decimals\": number | null,\n    \"totalSupply\": string | null,\n    \"baseURI\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const greenfieldTemplate = `Given the recent messages and wallet information below(only including 'Greenfield' keyword):\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following details for Greenfield operations:\n- **actionType** (string): The type of operation to perform (e.g., \"createBucket\", \"uploadObject\", \"deleteObject\", \"crossChainTransfer\")\n- **bucketName** (string, optional): The name of the bucket to operate\n- **objectName** (string, optional): The name of the object for upload operations\n- **visibility** (string, optional): Bucket visibility setting (\"private\" or \"public\")\n- **amount** (string, optional): BNB transfer to greenfield token amount.\n\nRequired response format:\n\\`\\`\\`json\n{\n    \"actionType\": \"createBucket\" | \"uploadObject\" | \"deleteObject\" | \"crossChainTransfer\",\n    \"bucketName\": string,\n    \"objectName\": string,\n    \"visibility\": \"private\" | \"public\",\n    \"amount\": number\n}\n\\`\\`\\`\n`;\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport {\n    formatEther,\n    formatUnits,\n    parseEther,\n    parseUnits,\n    erc20Abi,\n    type Hex,\n} from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { transferTemplate } from \"../templates\";\nimport type { TransferParams, TransferResponse } from \"../types\";\n\nexport { transferTemplate };\n\n// Exported for tests\nexport class TransferAction {\n    private readonly TRANSFER_GAS = 21000n;\n    private readonly DEFAULT_GAS_PRICE = 3000000000n as const; // 3 Gwei\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<TransferResponse> {\n        elizaLogger.debug(\"Transfer params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized transfer params:\", params);\n\n        const fromAddress = this.walletProvider.getAddress();\n\n        this.walletProvider.switchChain(params.chain);\n        const nativeToken =\n            this.walletProvider.chains[params.chain].nativeCurrency.symbol;\n        const resp: TransferResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            recipient: params.toAddress,\n            amount: \"\",\n            token: params.token ?? nativeToken,\n        };\n\n        if (!params.token || params.token ==\"null\" || params.token === nativeToken) {\n            elizaLogger.debug(\"Native token transfer:\", nativeToken);\n            // Native token transfer\n            const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\n                data: params.data,\n            };\n            let value: bigint;\n            if (!params.amount) {\n                // Transfer all balance minus gas\n                const publicClient = this.walletProvider.getPublicClient(\n                    params.chain\n                );\n                const balance = await publicClient.getBalance({\n                    address: fromAddress,\n                });\n\n                value = balance - this.DEFAULT_GAS_PRICE * 21000n;\n                options.gas = this.TRANSFER_GAS;\n                options.gasPrice = this.DEFAULT_GAS_PRICE;\n            } else {\n                value = parseEther(params.amount);\n            }\n\n            resp.amount = formatEther(value);\n            resp.txHash = await this.walletProvider.transfer(\n                params.chain,\n                params.toAddress,\n                value,\n                options\n            );\n        } else {\n            // ERC20 token transfer\n            elizaLogger.debug(\"ERC20 token transfer\");\n            let tokenAddress = params.token;\n            if (!params.token.startsWith(\"0x\")) {\n                tokenAddress = await this.walletProvider.getTokenAddress(\n                    params.chain,\n                    params.token\n                );\n            }\n\n            const publicClient = this.walletProvider.getPublicClient(\n                params.chain\n            );\n            const decimals = await publicClient.readContract({\n                address: tokenAddress as `0x${string}`,\n                abi: erc20Abi,\n                functionName: \"decimals\",\n            });\n\n            let value: bigint;\n            if (!params.amount) {\n                value = await publicClient.readContract({\n                    address: tokenAddress as `0x${string}`,\n                    abi: erc20Abi,\n                    functionName: \"balanceOf\",\n                    args: [fromAddress],\n                });\n            } else {\n                value = parseUnits(params.amount, decimals);\n            }\n\n            resp.amount = formatUnits(value, decimals);\n            resp.txHash = await this.walletProvider.transferERC20(\n                params.chain,\n                tokenAddress as `0x${string}`,\n                params.toAddress,\n                value\n            );\n        }\n\n        if (!resp.txHash || resp.txHash === \"0x\") {\n            throw new Error(\"Get transaction hash failed\");\n        }\n\n        // wait for the transaction to be confirmed\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n        await publicClient.waitForTransactionReceipt({\n            hash: resp.txHash,\n        });\n\n        return resp;\n    }\n\n    async validateAndNormalizeParams(params: TransferParams): Promise<void> {\n        if (!params.toAddress) {\n            throw new Error(\"To address is required\");\n        }\n        params.toAddress = await this.walletProvider.formatAddress(\n            params.toAddress\n        );\n\n        params.data = (\"null\" == params.data + \"\") ? \"0x\" : params.data;\n        elizaLogger.debug(\"params.data\" , params.data);\n\n    }\n}\n\nexport const transferAction = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting transfer action...\");\n\n        // Validate transfer\n        if (!(message.content.source === \"direct\")) {\n            callback?.({\n                text: \"I can't do that for you.\",\n                content: { error: \"Transfer not allowed\" },\n            });\n            return false;\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n        const paramOptions: TransferParams = {\n            chain: content.chain,\n            token: content.token,\n            amount: content.amount,\n            toAddress: content.toAddress,\n            data: content.data,\n        };\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            callback?.({\n                text: `Successfully transferred ${transferResp.amount} ${transferResp.token} to ${transferResp.recipient}\\nTransaction Hash: ${transferResp.txHash}`,\n                content: { ...transferResp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during transfer:\", error.message);\n            callback?.({\n                text: `Transfer failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 BNB to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 BNB to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"bsc\",\n                        token: \"BNB\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"bsc\",\n                        token: \"0x1234\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"TRANSFER\", \"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import type { Address, Hash } from \"viem\";\n\nexport type SupportedChain = \"bsc\" | \"bscTestnet\" | \"opBNB\" | \"opBNBTestnet\";\nexport type StakeAction = \"deposit\" | \"withdraw\" | \"claim\";\n\n// Action parameters\nexport interface GetBalanceParams {\n    chain: SupportedChain;\n    address?: Address;\n    token: string;\n}\n\nexport interface TransferParams {\n    chain: SupportedChain;\n    token?: string;\n    amount?: string;\n    toAddress: Address;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken?: Address;\n    toToken?: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\nexport interface StakeParams {\n    chain: SupportedChain;\n    action: StakeAction;\n    amount?: string;\n}\n\nexport interface FaucetParams {\n    token?: string;\n    toAddress?: Address;\n}\n\n// Action return types\nexport interface GetBalanceResponse {\n    chain: SupportedChain;\n    address: Address;\n    balance?: { token: string; amount: string };\n}\n\nexport interface TransferResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    amount: string;\n    token: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface BridgeResponse {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface StakeResponse {\n    response: string;\n}\n\nexport interface FaucetResponse {\n    token: string;\n    recipient: Address;\n    txHash: Hash;\n}\n\nexport interface IDeployERC20Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    decimals: number;\n    totalSupply: string;\n}\n\nexport interface IDeployERC721Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    baseURI: string;\n}\n\nexport interface IDeployERC1155Params {\n    chain: SupportedChain;\n    name: string;\n    baseURI: string;\n}\n\n// Contract ABIs\nexport const L1StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"receive\",\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"MESSENGER\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"OTHER_BRIDGE\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20To\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20To\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"deposits\",\n        inputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeETH\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeERC20Withdrawal\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeETHWithdrawal\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"initialize\",\n        inputs: [\n            {\n                name: \"_messenger\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n            {\n                name: \"_superchainConfig\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n            {\n                name: \"_systemConfig\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"l2TokenBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"messenger\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"otherBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"paused\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"superchainConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"systemConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"version\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n                internalType: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeFinalized\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeInitiated\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20DepositInitiated\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20WithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHDepositInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHWithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"Initialized\",\n        inputs: [\n            {\n                name: \"version\",\n                type: \"uint8\",\n                indexed: false,\n                internalType: \"uint8\",\n            },\n        ],\n        anonymous: false,\n    },\n] as const;\n\nexport const L2StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n                internalType: \"address payable\",\n            },\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"AddressEmptyCode\",\n        type: \"error\",\n        inputs: [{ name: \"target\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"AddressInsufficientBalance\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    { name: \"FailedInnerCall\", type: \"error\", inputs: [] },\n    {\n        name: \"OwnableInvalidOwner\",\n        type: \"error\",\n        inputs: [{ name: \"owner\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnableUnauthorizedAccount\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"SafeERC20FailedOperation\",\n        type: \"error\",\n        inputs: [{ name: \"token\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"previousOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"newOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\n    },\n    {\n        name: \"SetDelegationFee\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x0322f3257c2afe5fe8da7ab561f0d3384148487412fe2751678f2188731c0815\",\n    },\n    {\n        name: \"WithdrawTo\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"minGasLimit\",\n                type: \"uint32\",\n                indexed: false,\n                internalType: \"uint32\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x56f66275d9ebc94b7d6895aa0d96a3783550d0183ba106408d387d19f2e877f1\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"contract IL2StandardBridge\",\n            },\n        ],\n        constant: true,\n        signature: \"0x21d12763\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE_ADDRESS\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x2cb7cb06\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"delegationFee\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                value: \"2000000000000000\",\n                internalType: \"uint256\",\n            },\n        ],\n        constant: true,\n        signature: \"0xc5f0a58f\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"owner\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0xCe4750fDc02A07Eb0d99cA798CD5c170D8F8410A\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x8da5cb5b\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"renounceOwnership\",\n        type: \"function\",\n        inputs: [],\n        outputs: [],\n        signature: \"0x715018a6\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"setDelegationFee\",\n        type: \"function\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        outputs: [],\n        signature: \"0x55bfc81c\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"transferOwnership\",\n        type: \"function\",\n        inputs: [\n            { name: \"newOwner\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0xf2fde38b\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdraw\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0x32b7006d\",\n        stateMutability: \"payable\",\n    },\n    {\n        name: \"withdrawFee\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0x1ac3ddeb\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawFeeToL1\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        signature: \"0x244cafe0\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawTo\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_to\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0xa3a79548\",\n        stateMutability: \"payable\",\n    },\n] as const;\n\nexport const ListaDaoAbi = [\n    { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimAllWithdrawals\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_uuid\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimUndelegated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_uuid\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimUndelegatedFrom\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_idx\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimWithdrawal\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Delegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"_delegateVotePower\",\n                type: \"bool\",\n            },\n        ],\n        name: \"DelegateTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_delegateTo\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_votesChange\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DelegateVoteTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_src\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Deposit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"DisableValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"Paused\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposeManager\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_src\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_dest\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReDelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_rewardsId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Redelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"RemoveValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RequestWithdraw\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RewardsCompounded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousAdminRole\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newAdminRole\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"RoleAdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"RoleGranted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"RoleRevoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_annualRate\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetAnnualRate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetBSCValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetManager\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_minBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetMinBnb\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetRedirectAddress\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetReserveAmount\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetRevenuePool\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_synFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetSynFee\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_credit\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"toRemove\",\n                type: \"bool\",\n            },\n        ],\n        name: \"SyncCreditContract\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_nextUndelegatedRequestIndex\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bnbAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_shares\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Undelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bnbAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_shares\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UndelegateFrom\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UndelegateReserve\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"Unpaused\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"WhitelistValidator\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"BOT\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"DEFAULT_ADMIN_ROLE\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GUARDIAN\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TEN_DECIMALS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"acceptNewManager\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"amountToDelegate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"annualRate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\n        ],\n        name: \"binarySearchCoveredMaxIndex\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"claimUndelegated\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_idx\", type: \"uint256\" }],\n        name: \"claimWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\n        ],\n        name: \"claimWithdrawFor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"compoundRewards\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\n        ],\n        name: \"convertBnbToShares\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"convertBnbToSnBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\n        ],\n        name: \"convertSharesToBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"convertSnBnbToBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        name: \"creditContracts\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        name: \"creditStates\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"delegateTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"delegateVotePower\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_delegateTo\", type: \"address\" },\n        ],\n        name: \"delegateVoteTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"depositReserve\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"disableValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAmountToUndelegate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountToUndelegate\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" }],\n        name: \"getBotUndelegateRequest\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amount\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amountInSnBnb\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IStakeManager.BotUndelegateRequest\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"getClaimableAmount\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getContracts\",\n        outputs: [\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\n            { internalType: \"address\", name: \"_bscValidator\", type: \"address\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"getDelegated\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"getRedelegateFee\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"bytes32\", name: \"role\", type: \"bytes32\" }],\n        name: \"getRoleAdmin\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSlisBnbWithdrawLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_slisBnbWithdrawLimit\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBnbInValidators\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalPooledBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\n        ],\n        name: \"getUserRequestStatus\",\n        outputs: [\n            { internalType: \"bool\", name: \"_isClaimable\", type: \"bool\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"getUserWithdrawalRequests\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"uint256\", name: \"uuid\", type: \"uint256\" },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amountInSnBnb\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IStakeManager.WithdrawalRequest[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"grantRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"hasRole\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\n            { internalType: \"address\", name: \"_admin\", type: \"address\" },\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\n            { internalType: \"address\", name: \"_bot\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" },\n            { internalType: \"address\", name: \"_revenuePool\", type: \"address\" },\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"nextConfirmedRequestUUID\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pause\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"paused\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"placeholder\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"proposeNewManager\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"srcValidator\", type: \"address\" },\n            { internalType: \"address\", name: \"dstValidator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"redelegate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"redirectAddress\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"removeValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"renounceRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        name: \"requestIndexMap\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"requestUUID\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requestWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"reserveAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"revenuePool\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"revokeBotRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"revokeRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"_annualRate\", type: \"uint256\" },\n        ],\n        name: \"setAnnualRate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setBSCValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setBotRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"setMinBnb\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setRedirectAddress\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"setReserveAmount\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setRevenuePool\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" }],\n        name: \"setSynFee\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" },\n        ],\n        name: \"supportsInterface\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"synFee\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"togglePause\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"toggleVote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalDelegated\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalReserveAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"unbondingBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"undelegate\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"undelegateFrom\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_actualBnbAmount\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"undelegatedQuota\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        name: \"validators\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"whitelistValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"withdrawReserve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    { stateMutability: \"payable\", type: \"receive\" },\n] as const;\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { getToken } from \"@lifi/sdk\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { getBalanceTemplate } from \"../templates\";\nimport type {\n    GetBalanceParams,\n    GetBalanceResponse,\n    SupportedChain,\n} from \"../types\";\nimport { type Address, erc20Abi, formatEther, formatUnits } from \"viem\";\n\nexport { getBalanceTemplate };\n\nexport class GetBalanceAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async getBalance(params: GetBalanceParams): Promise<GetBalanceResponse> {\n        elizaLogger.debug(\"Get balance params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized get balance params:\", params);\n\n        const { chain, address, token } = params;\n        if (!address) {\n            throw new Error(\"Address is required for getting balance\");\n        }\n\n        this.walletProvider.switchChain(chain);\n        const nativeSymbol =\n            this.walletProvider.getChainConfigs(chain).nativeCurrency.symbol;\n        const chainId = this.walletProvider.getChainConfigs(chain).id;\n\n        let queryNativeToken = false;\n        if (\n            !token ||\n            token === \"\" ||\n            token.toLowerCase() === \"bnb\" ||\n            token.toLowerCase() === \"tbnb\"\n        ) {\n            queryNativeToken = true;\n        }\n\n        const resp: GetBalanceResponse = {\n            chain,\n            address,\n        };\n\n        // If ERC20 token is requested\n        if (!queryNativeToken) {\n            let amount: string;\n            if (token.startsWith(\"0x\")) {\n                amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    token as `0x${string}`\n                );\n            } else {\n                if (chainId !== 56) {\n                    throw new Error(\n                        \"Only BSC mainnet is supported for querying balance by token symbol\"\n                    );\n                }\n\n                this.walletProvider.configureLiFiSdk(chain);\n                const tokenInfo = await getToken(chainId, token);\n                amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    tokenInfo.address as `0x${string}`\n                );\n            }\n\n            resp.balance = { token, amount };\n        } else {\n            // If native token is requested\n            const nativeBalanceWei = await this.walletProvider\n                .getPublicClient(chain)\n                .getBalance({ address });\n            resp.balance = {\n                token: nativeSymbol,\n                amount: formatEther(nativeBalanceWei),\n            };\n        }\n\n        return resp;\n    }\n\n    async getERC20TokenBalance(\n        chain: SupportedChain,\n        address: Address,\n        tokenAddress: Address\n    ): Promise<string> {\n        const publicClient = this.walletProvider.getPublicClient(chain);\n\n        const balance = await publicClient.readContract({\n            address: tokenAddress,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [address],\n        });\n\n        const decimals = await publicClient.readContract({\n            address: tokenAddress,\n            abi: erc20Abi,\n            functionName: \"decimals\",\n        });\n\n        return formatUnits(balance, decimals);\n    }\n\n    async validateAndNormalizeParams(params: GetBalanceParams): Promise<void> {\n        if (!params.address) {\n            params.address = this.walletProvider.getAddress();\n        } else {\n            params.address = await this.walletProvider.formatAddress(\n                params.address\n            );\n        }\n    }\n}\n\nexport const getBalanceAction = {\n    name: \"getBalance\",\n    description: \"Get balance of a token or all tokens for the given address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting getBalance action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose swap context\n        const getBalanceContext = composeContext({\n            state: currentState,\n            template: getBalanceTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: getBalanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new GetBalanceAction(walletProvider);\n        const getBalanceOptions: GetBalanceParams = {\n            chain: content.chain,\n            address: content.address,\n            token: content.token,\n        };\n        try {\n            const getBalanceResp = await action.getBalance(getBalanceOptions);\n            if (callback) {\n                let text = `No balance found for ${getBalanceOptions.address} on ${getBalanceOptions.chain}`;\n                if (getBalanceResp.balance) {\n                    text = `Balance of ${getBalanceResp.address} on ${getBalanceResp.chain}:\\n${\n                        getBalanceResp.balance.token\n                    }: ${getBalanceResp.balance.amount}`;\n                }\n                callback({\n                    text,\n                    content: { ...getBalanceResp },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during get balance:\", error.message);\n            callback?.({\n                text: `Get balance failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: getBalanceTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of USDC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of USDC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"{{walletAddress}}\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of token 0x1234\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of token 0x1234\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"{{walletAddress}}\",\n                        token: \"0x1234\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get USDC balance of 0x1234\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check USDC balance of 0x1234\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"0x1234\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my wallet balance on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your wallet balance on BSC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"bsc\",\n                        address: \"{{walletAddress}}\",\n                        token: undefined,\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"GET_BALANCE\", \"CHECK_BALANCE\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { parseEther, getContract, parseUnits, erc20Abi } from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { bridgeTemplate } from \"../templates\";\nimport {\n    L1StandardBridgeAbi,\n    L2StandardBridgeAbi,\n    type BridgeParams,\n    type BridgeResponse,\n} from \"../types\";\n\nexport { bridgeTemplate };\n\n// Exported for tests\nexport class BridgeAction {\n    private readonly L1_BRIDGE_ADDRESS =\n        \"0xF05F0e4362859c3331Cb9395CBC201E3Fa6757Ea\" as const;\n    private readonly L2_BRIDGE_ADDRESS =\n        \"0x4000698e3De52120DE28181BaACda82B21568416\" as const;\n    private readonly LEGACY_ERC20_ETH =\n        \"0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\" as const;\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async bridge(params: BridgeParams): Promise<BridgeResponse> {\n        elizaLogger.debug(\"Bridge params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized bridge params:\", params);\n\n        const fromAddress = this.walletProvider.getAddress();\n\n        this.walletProvider.switchChain(params.fromChain);\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n        const publicClient = this.walletProvider.getPublicClient(\n            params.fromChain\n        );\n\n        const nativeToken =\n            this.walletProvider.chains[params.fromChain].nativeCurrency.symbol;\n\n        const resp: BridgeResponse = {\n            fromChain: params.fromChain,\n            toChain: params.toChain,\n            txHash: \"0x\",\n            recipient: params.toAddress ?? fromAddress,\n            amount: params.amount,\n            fromToken: params.fromToken ?? nativeToken,\n            toToken: params.toToken ?? nativeToken,\n        };\n\n        const account = this.walletProvider.getAccount();\n        const chain = this.walletProvider.getChainConfigs(params.fromChain);\n\n        const selfBridge = !params.toAddress || params.toAddress === fromAddress;\n        const nativeTokenBridge =\n            !params.fromToken || params.fromToken === nativeToken;\n\n        let amount: bigint;\n        if (nativeTokenBridge) {\n            amount = parseEther(params.amount);\n        } else {\n            const decimals = await publicClient.readContract({\n                address: params.fromToken!,\n                abi: erc20Abi,\n                functionName: \"decimals\",\n            });\n            amount = parseUnits(params.amount, decimals);\n        }\n\n        if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\n            // from L1 to L2\n            const l1BridgeContract = getContract({\n                address: this.L1_BRIDGE_ADDRESS,\n                abi: L1StandardBridgeAbi,\n                client: {\n                    public: publicClient,\n                    wallet: walletClient,\n                },\n            });\n\n            // check ERC20 allowance\n            if (!nativeTokenBridge) {\n                const allowance = await this.walletProvider.checkERC20Allowance(\n                    params.fromChain,\n                    params.fromToken!,\n                    fromAddress,\n                    this.L1_BRIDGE_ADDRESS\n                );\n                if (allowance < amount) {\n                    elizaLogger.log(\n                        `Increasing ERC20 allowance for L1 bridge. ${amount - allowance} more needed`\n                    );\n                    const txHash = await this.walletProvider.approveERC20(\n                        params.fromChain,\n                        params.fromToken!,\n                        this.L1_BRIDGE_ADDRESS,\n                        amount\n                    );\n                    await publicClient.waitForTransactionReceipt({\n                        hash: txHash,\n                    });\n                }\n            }\n\n            if (selfBridge && nativeTokenBridge) {\n                const args = [1, \"0x\"] as const;\n                await l1BridgeContract.simulate.depositETH(args, {\n                    value: amount,\n                });\n                resp.txHash = await l1BridgeContract.write.depositETH(args, {\n                    account,\n                    chain,\n                    value: amount,\n                });\n            } else if (selfBridge && !nativeTokenBridge) {\n                const args = [\n                    params.fromToken!,\n                    params.toToken!,\n                    amount,\n                    1,\n                    \"0x\",\n                ] as const;\n                await l1BridgeContract.simulate.depositERC20(args, {\n                    account,\n                });\n                resp.txHash = await l1BridgeContract.write.depositERC20(args, {\n                    account,\n                    chain,\n                });\n            } else if (!selfBridge && nativeTokenBridge) {\n                const args = [params.toAddress!, 1, \"0x\"] as const;\n                await l1BridgeContract.simulate.depositETHTo(args, {\n                    value: amount,\n                });\n                resp.txHash = await l1BridgeContract.write.depositETHTo(args, {\n                    account,\n                    chain,\n                    value: amount,\n                });\n            } else {\n                const args = [\n                    params.fromToken!,\n                    params.toToken!,\n                    params.toAddress!,\n                    amount,\n                    1,\n                    \"0x\",\n                ] as const;\n                await l1BridgeContract.simulate.depositERC20To(args, {\n                    account,\n                });\n                resp.txHash = await l1BridgeContract.write.depositERC20To(\n                    args,\n                    {\n                        account,\n                        chain,\n                    }\n                );\n            }\n        } else if (params.fromChain === \"opBNB\" && params.toChain === \"bsc\") {\n            // from L2 to L1\n            const l2BridgeContract = getContract({\n                address: this.L2_BRIDGE_ADDRESS,\n                abi: L2StandardBridgeAbi,\n                client: {\n                    public: publicClient,\n                    wallet: walletClient,\n                },\n            });\n\n            const delegationFee = await publicClient.readContract({\n                address: this.L2_BRIDGE_ADDRESS,\n                abi: L2StandardBridgeAbi,\n                functionName: \"delegationFee\",\n            });\n\n            // check ERC20 allowance\n            if (!nativeTokenBridge) {\n                const allowance = await this.walletProvider.checkERC20Allowance(\n                    params.fromChain,\n                    params.fromToken!,\n                    fromAddress,\n                    this.L2_BRIDGE_ADDRESS\n                );\n                if (allowance < amount) {\n                    elizaLogger.log(\n                        `Increasing ERC20 allowance for L2 bridge. ${amount - allowance} more needed`\n                    );\n                    const txHash = await this.walletProvider.approveERC20(\n                        params.fromChain,\n                        params.fromToken!,\n                        this.L2_BRIDGE_ADDRESS,\n                        amount\n                    );\n                    await publicClient.waitForTransactionReceipt({\n                        hash: txHash,\n                    });\n                }\n            }\n\n            if (selfBridge && nativeTokenBridge) {\n                const args = [this.LEGACY_ERC20_ETH, amount, 1, \"0x\"] as const;\n                const value = amount + delegationFee;\n                await l2BridgeContract.simulate.withdraw(args, { value });\n                resp.txHash = await l2BridgeContract.write.withdraw(args, {\n                    account,\n                    chain,\n                    value,\n                });\n            } else if (selfBridge && !nativeTokenBridge) {\n                const args = [params.fromToken!, amount, 1, \"0x\"] as const;\n                const value = delegationFee;\n                await l2BridgeContract.simulate.withdraw(args, {\n                    account,\n                    value,\n                });\n                resp.txHash = await l2BridgeContract.write.withdraw(args, {\n                    account,\n                    chain,\n                    value,\n                });\n            } else if (!selfBridge && nativeTokenBridge) {\n                const args = [\n                    this.LEGACY_ERC20_ETH,\n                    params.toAddress!,\n                    amount,\n                    1,\n                    \"0x\",\n                ] as const;\n                const value = amount + delegationFee;\n                await l2BridgeContract.simulate.withdrawTo(args, { value });\n                resp.txHash = await l2BridgeContract.write.withdrawTo(args, {\n                    account,\n                    chain,\n                    value,\n                });\n            } else {\n                const args = [\n                    params.fromToken!,\n                    params.toAddress!,\n                    amount,\n                    1,\n                    \"0x\",\n                ] as const;\n                const value = delegationFee;\n                await l2BridgeContract.simulate.withdrawTo(args, {\n                    account,\n                    value,\n                });\n                resp.txHash = await l2BridgeContract.write.withdrawTo(args, {\n                    account,\n                    chain,\n                    value,\n                });\n            }\n        } else {\n            throw new Error(\"Unsupported bridge direction\");\n        }\n\n        if (!resp.txHash || resp.txHash === \"0x\") {\n            throw new Error(\"Get transaction hash failed\");\n        }\n\n        // wait for the transaction to be confirmed\n        await publicClient.waitForTransactionReceipt({\n            hash: resp.txHash,\n        });\n\n        return resp;\n    }\n\n    async validateAndNormalizeParams(params: BridgeParams) {\n        if (!params.toAddress) {\n            params.toAddress = this.walletProvider.getAddress();\n        } else {\n            params.toAddress = await this.walletProvider.formatAddress(\n                params.toAddress\n            );\n        }\n\n        if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\n            if (params.fromToken && !params.toToken) {\n                throw new Error(\n                    \"token address on opBNB is required when bridging ERC20 from BSC to opBNB\"\n                );\n            }\n        }\n    }\n}\n\n// NOTE: The bridge action only supports bridge funds between BSC and opBNB for now. We may adding stargate support later.\nexport const bridgeAction = {\n    name: \"bridge\",\n    description: \"Bridge tokens between BSC and opBNB\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting bridge action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n\n        // Compose bridge context\n        const bridgeContext = composeContext({\n            state: currentState,\n            template: bridgeTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: bridgeContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new BridgeAction(walletProvider);\n        const paramOptions: BridgeParams = {\n            fromChain: content.fromChain,\n            toChain: content.toChain,\n            fromToken: content.fromToken,\n            toToken: content.toToken,\n            amount: content.amount,\n            toAddress: content.toAddress,\n        };\n        try {\n            const bridgeResp = await action.bridge(paramOptions);\n            callback?.({\n                text: `Successfully bridged ${bridgeResp.amount} ${bridgeResp.fromToken} from ${bridgeResp.fromChain} to ${bridgeResp.toChain}\\nTransaction Hash: ${bridgeResp.txHash}`,\n                content: { ...bridgeResp },\n            });\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token bridge:\", error.message);\n            callback?.({\n                text: `Bridge failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: bridgeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 1 BNB from BSC to opBNB\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 1 BNB from BSC to opBNB\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"bsc\",\n                        toChain: \"opBNB\",\n                        fromToken: undefined,\n                        toToken: undefined,\n                        amount: 1,\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 BNB from BSC to address 0x1234 on opBNB\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 1 BNB from BSC to address 0x1234 on opBNB\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"bsc\",\n                        toChain: \"opBNB\",\n                        fromToken: undefined,\n                        toToken: undefined,\n                        amount: 1,\n                        toAddress: \"0x1234\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 1 0x123 token from BSC to address 0x456 on opBNB. The corresponding token address on opBNB is 0x789\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 1 0x123 token from BSC to address 0x456 on opBNB\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"bsc\",\n                        toChain: \"opBNB\",\n                        fromToken: \"0x123\",\n                        toToken: \"0x789\",\n                        amount: 1,\n                        toAddress: \"0x456\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 1 BNB from opBNB to BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 1 BNB from opBNB to BSC\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"opBNB\",\n                        toChain: \"bsc\",\n                        fromToken: undefined,\n                        toToken: undefined,\n                        amount: 1,\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 1 0x1234 token from opBNB to address 0x5678 on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you bridge 1 0x1234 token from opBNB to address 0x5678 on BSC\",\n                    action: \"BRIDGE\",\n                    content: {\n                        fromChain: \"opBNB\",\n                        toChain: \"bsc\",\n                        fromToken: \"0x1234\",\n                        toToken: undefined,\n                        amount: 1,\n                        toAddress: \"0x5678\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"BRIDGE\", \"TOKEN_BRIDGE\", \"DEPOSIT\", \"WITHDRAW\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { type Address, formatEther, parseEther, erc20Abi } from \"viem\";\n\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { stakeTemplate } from \"../templates\";\nimport { ListaDaoAbi, type StakeParams, type StakeResponse } from \"../types\";\n\nexport { stakeTemplate };\n\n// Exported for tests\nexport class StakeAction {\n    private readonly LISTA_DAO =\n        \"0x1adB950d8bB3dA4bE104211D5AB038628e477fE6\" as const;\n    private readonly SLIS_BNB =\n        \"0xB0b84D294e0C75A6abe60171b70edEb2EFd14A1B\" as const;\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async stake(params: StakeParams): Promise<StakeResponse> {\n        elizaLogger.debug(\"Stake params:\", params);\n        this.validateStakeParams(params);\n        elizaLogger.debug(\"Normalized stake params:\", params);\n\n        this.walletProvider.switchChain(\"bsc\"); // only BSC is supported\n\n        const actions = {\n            deposit: async () => {\n                if (!params.amount) {\n                    throw new Error(\"Amount is required for deposit\");\n                }\n                return await this.doDeposit(params.amount);\n            },\n            withdraw: async () => await this.doWithdraw(params.amount),\n            claim: async () => await this.doClaim(),\n        };\n        const resp = await actions[params.action]();\n        return { response: resp };\n    }\n\n    validateStakeParams(params: StakeParams) {\n        if (params.chain !== \"bsc\") {\n            throw new Error(\"Only BSC mainnet is supported\");\n        }\n\n        if (params.action === \"deposit\" && !params.amount) {\n            throw new Error(\"Amount is required for deposit\");\n        }\n\n        if (params.action === \"withdraw\" && !params.amount) {\n            throw new Error(\"Amount is required for withdraw\");\n        }\n    }\n\n    async doDeposit(amount: string): Promise<string> {\n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n        const account = walletClient.account;\n        if (!account) {\n            throw new Error(\"Wallet account not found\");\n        }\n\n        const { request } = await publicClient.simulateContract({\n            account: this.walletProvider.getAccount(),\n            address: this.LISTA_DAO,\n            abi: ListaDaoAbi,\n            functionName: \"deposit\",\n            value: parseEther(amount),\n        });\n        const txHash = await walletClient.writeContract(request);\n        await publicClient.waitForTransactionReceipt({\n            hash: txHash,\n        });\n\n        const slisBNBBalance = await publicClient.readContract({\n            address: this.SLIS_BNB,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [account.address],\n        });\n\n        return `Successfully do deposit. ${formatEther(slisBNBBalance)} slisBNB held. \\nTransaction Hash: ${txHash}`;\n    }\n\n    async doWithdraw(amount?: string): Promise<string> {\n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n        const account = walletClient.account;\n        if (!account) {\n            throw new Error(\"Wallet account not found\");\n        }\n\n        // If amount is not provided, withdraw all slisBNB\n        let amountToWithdraw: bigint;\n        if (!amount) {\n            amountToWithdraw = await publicClient.readContract({\n                address: this.SLIS_BNB,\n                abi: erc20Abi,\n                functionName: \"balanceOf\",\n                args: [account.address],\n            });\n        } else {\n            amountToWithdraw = parseEther(amount);\n        }\n\n        // check slisBNB allowance\n        const allowance = await this.walletProvider.checkERC20Allowance(\n            \"bsc\",\n            this.SLIS_BNB,\n            account.address,\n            this.LISTA_DAO\n        );\n        if (allowance < amountToWithdraw) {\n            elizaLogger.log(\n                `Increasing slisBNB allowance for Lista DAO. ${amountToWithdraw - allowance} more needed`\n            );\n            const txHash = await this.walletProvider.approveERC20(\n                \"bsc\",\n                this.SLIS_BNB,\n                this.LISTA_DAO,\n                amountToWithdraw\n            );\n            await publicClient.waitForTransactionReceipt({\n                hash: txHash,\n            });\n        }\n\n        const { request } = await publicClient.simulateContract({\n            account: this.walletProvider.getAccount(),\n            address: this.LISTA_DAO,\n            abi: ListaDaoAbi,\n            functionName: \"requestWithdraw\",\n            args: [amountToWithdraw],\n        });\n        const txHash = await walletClient.writeContract(request);\n        await publicClient.waitForTransactionReceipt({\n            hash: txHash,\n        });\n\n        const slisBNBBalance = await publicClient.readContract({\n            address: this.SLIS_BNB,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [account.address],\n        });\n\n        return `Successfully do withdraw. ${formatEther(slisBNBBalance)} slisBNB left. \\nTransaction Hash: ${txHash}`;\n    }\n\n    async doClaim(): Promise<string> {\n        const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n        const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n        const account = walletClient.account;\n        if (!account) {\n            throw new Error(\"Wallet account not found\");\n        }\n\n        const requests = await publicClient.readContract({\n            address: this.LISTA_DAO,\n            abi: ListaDaoAbi,\n            functionName: \"getUserWithdrawalRequests\",\n            args: [account.address],\n        });\n\n        let totalClaimed = 0n;\n        for (let idx = 0; idx < requests.length; idx++) {\n            const [isClaimable, amount] = await publicClient.readContract({\n                address: this.LISTA_DAO,\n                abi: ListaDaoAbi,\n                functionName: \"getUserRequestStatus\",\n                args: [account.address, BigInt(idx)],\n            });\n\n            if (isClaimable) {\n                const { request } = await publicClient.simulateContract({\n                    account: this.walletProvider.getAccount(),\n                    address: this.LISTA_DAO,\n                    abi: ListaDaoAbi,\n                    functionName: \"claimWithdraw\",\n                    args: [BigInt(idx)],\n                });\n\n                const txHash = await walletClient.writeContract(request);\n                await publicClient.waitForTransactionReceipt({\n                    hash: txHash,\n                });\n\n                totalClaimed += amount;\n            } else {\n                break;\n            }\n        }\n\n        return `Successfully do claim. ${formatEther(totalClaimed)} BNB claimed.`;\n    }\n}\n\nexport const stakeAction = {\n    name: \"stake\",\n    description: \"Stake related actions through Lista DAO\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting stake action...\");\n\n        // Validate stake\n        if (!(message.content.source === \"direct\")) {\n            callback?.({\n                text: \"I can't do that for you.\",\n                content: { error: \"Stake not allowed\" },\n            });\n            return false;\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose stake context\n        const stakeContext = composeContext({\n            state: currentState,\n            template: stakeTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: stakeContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new StakeAction(walletProvider);\n        const paramOptions: StakeParams = {\n            chain: content.chain,\n            action: content.action,\n            amount: content.amount,\n        };\n        try {\n            const stakeResp = await action.stake(paramOptions);\n            callback?.({\n                text: stakeResp.response,\n                content: { ...stakeResp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during stake:\", error.message);\n            callback?.({\n                text: `Stake failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: stakeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Stake 1 BNB on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you stake 1 BNB to Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"deposit\",\n                        amount: \"1\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deposit 1 BNB to Lista DAO\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you deposit 1 BNB to Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"deposit\",\n                        amount: \"1\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Undelegate 1 slisBNB on BSC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you undelegate 1 slisBNB from Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"withdraw\",\n                        amount: \"1\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Withdraw 1 slisBNB from Lista DAO\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you withdraw 1 slisBNB from Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"withdraw\",\n                        amount: \"1\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Claim unlocked BNB from Lista DAO\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you claim unlocked BNB from Lista DAO on BSC\",\n                    action: \"STAKE\",\n                    content: {\n                        action: \"claim\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"DELEGATE\",\n        \"STAKE\",\n        \"DEPOSIT\",\n        \"UNDELEGATE\",\n        \"UNSTAKE\",\n        \"WITHDRAW\",\n        \"CLAIM\",\n    ],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport type { Hex } from \"viem\";\nimport WebSocket, { type ClientOptions } from \"ws\";\n\nimport { faucetTemplate } from \"../templates\";\nimport type { FaucetResponse, FaucetParams } from \"../types\";\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\n\nexport { faucetTemplate };\n\n// Exported for tests\nexport class FaucetAction {\n    private readonly SUPPORTED_TOKENS: string[] = [\n        \"BNB\",\n        \"BTC\",\n        \"BUSD\",\n        \"DAI\",\n        \"ETH\",\n        \"USDC\",\n    ] as const;\n    private readonly FAUCET_URL = \"wss://testnet.bnbchain.org/faucet-smart/api\";\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async faucet(params: FaucetParams): Promise<FaucetResponse> {\n        elizaLogger.debug(\"Faucet params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized faucet params:\", params);\n\n        // After validation, we know these values exist\n        if (!params.token || !params.toAddress) {\n            throw new Error(\"Token and address are required for faucet\");\n        }\n\n        const resp: FaucetResponse = {\n            token: params.token,\n            recipient: params.toAddress,\n            txHash: \"0x\",\n        };\n\n        const options: ClientOptions = {\n            headers: {\n                Connection: \"Upgrade\",\n                Upgrade: \"websocket\",\n            },\n        };\n\n        const ws = new WebSocket(this.FAUCET_URL, options);\n\n        try {\n            // Wait for connection\n            await new Promise<void>((resolve, reject) => {\n                ws.once(\"open\", () => resolve());\n                ws.once(\"error\", reject);\n            });\n\n            // Send the message\n            const message = {\n                tier: 0,\n                url: params.toAddress,\n                symbol: params.token,\n                captcha: \"noCaptchaToken\",\n            };\n            ws.send(JSON.stringify(message));\n\n            // Wait for response with transaction hash\n            const txHash = await new Promise<Hex>((resolve, reject) => {\n                const timeout = setTimeout(() => {\n                    ws.close();\n                    reject(new Error(\"Faucet request timeout\"));\n                }, 15000);\n\n                ws.on(\"message\", (data) => {\n                    const response = JSON.parse(data.toString());\n\n                    // First response: funding request accepted\n                    if (response.success) {\n                        return;\n                    }\n\n                    // Second response: transaction details\n                    if (response.requests?.length > 0) {\n                        const txHash = response.requests[0].tx.hash;\n                        if (txHash) {\n                            clearTimeout(timeout);\n                            resolve(txHash as Hex);\n                        }\n                    }\n\n                    // Handle error case\n                    if (response.error) {\n                        clearTimeout(timeout);\n                        reject(new Error(response.error));\n                    }\n                });\n\n                ws.on(\"error\", (error) => {\n                    clearTimeout(timeout);\n                    reject(\n                        new Error(`WebSocket error occurred: ${error.message}`)\n                    );\n                });\n            });\n\n            resp.txHash = txHash;\n            return resp;\n        } finally {\n            ws.close();\n        }\n    }\n\n    async validateAndNormalizeParams(params: FaucetParams): Promise<void> {\n        if (!params.toAddress) {\n            params.toAddress = this.walletProvider.getAddress();\n        } else {\n            params.toAddress = await this.walletProvider.formatAddress(\n                params.toAddress\n            );\n        }\n\n        if (!params.token) {\n            params.token = \"BNB\";\n        }\n        if (!this.SUPPORTED_TOKENS.includes(params.token)) {\n            throw new Error(\"Unsupported token\");\n        }\n    }\n}\n\nexport const faucetAction = {\n    name: \"faucet\",\n    description: \"Get test tokens from the faucet\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting faucet action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await bnbWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose faucet context\n        const faucetContext = composeContext({\n            state: currentState,\n            template: faucetTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: faucetContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new FaucetAction(walletProvider);\n        const paramOptions: FaucetParams = {\n            token: content.token,\n            toAddress: content.toAddress,\n        };\n        try {\n            const faucetResp = await action.faucet(paramOptions);\n            callback?.({\n                text: `Successfully transferred ${faucetResp.token} to ${faucetResp.recipient}\\nTransaction Hash: ${faucetResp.txHash}`,\n                content: {\n                    hash: faucetResp.txHash,\n                    recipient: faucetResp.recipient,\n                    chain: content.chain,\n                },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during faucet:\", error.message);\n            callback?.({\n                text: `Get test tokens failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: faucetTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get some USDC from the faucet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Sure, I'll request some USDC from the faucet on BSC Testnet now.\",\n                    action: \"FAUCET\",\n                    content: {\n                        token: \"USDC\",\n                        toAddress: \"{{walletAddress}}\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get some test tokens from the faucet on BSC Testnet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Of course, getting tBNB from the faucet on BSC Testnet now.\",\n                    action: \"FAUCET\",\n                    content: {\n                        token: \"BNB\",\n                        toAddress: \"{{walletAddress}}\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"FAUCET\", \"GET_TEST_TOKENS\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport solc from \"solc\";\nimport { type Abi, type Address, parseUnits } from \"viem\";\nimport {\n    bnbWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { ercContractTemplate } from \"../templates\";\nimport type {\n    IDeployERC1155Params,\n    IDeployERC721Params,\n    IDeployERC20Params,\n    SupportedChain,\n} from \"../types\";\nimport { compileSolidity } from \"../utils/contracts\";\n\nexport { ercContractTemplate };\n\nexport class DeployAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async compileSolidity(contractName: string, source: string) {\n        const solName = `${contractName}.sol`;\n        const input = {\n            language: \"Solidity\",\n            sources: {\n                [solName]: {\n                    content: source,\n                },\n            },\n            settings: {\n                outputSelection: {\n                    \"*\": {\n                        \"*\": [\"*\"],\n                    },\n                },\n            },\n        };\n        elizaLogger.debug(\"Compiling contract...\");\n        const output = JSON.parse(solc.compile(JSON.stringify(input)));\n\n        // check compile error\n        if (output.errors) {\n            const hasError = output.errors.some(\n                (error) => error.type === \"Error\"\n            );\n            if (hasError) {\n                elizaLogger.error(\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\n                );\n            }\n        }\n\n        const contract = output.contracts[solName][contractName];\n\n        if (!contract) {\n            elizaLogger.error(\"Compilation result is empty\");\n        }\n\n        elizaLogger.debug(\"Contract compiled successfully\");\n        return {\n            abi: contract.abi as Abi,\n            bytecode: contract.evm.bytecode.object,\n        };\n    }\n\n    async deployERC20(deployTokenParams: IDeployERC20Params) {\n        elizaLogger.debug(\"deployTokenParams\", deployTokenParams);\n\n        const { name, symbol, decimals, totalSupply, chain } =\n            deployTokenParams;\n        if (!name || name === \"\") {\n            throw new Error(\"Token name is required\");\n        }\n        if (!symbol || symbol === \"\") {\n            throw new Error(\"Token symbol is required\");\n        }\n        if (!decimals || decimals === 0) {\n            throw new Error(\"Token decimals is required\");\n        }\n        if (!totalSupply || totalSupply === \"\") {\n            throw new Error(\"Token total supply is required\");\n        }\n\n        try {\n            const totalSupplyWithDecimals = parseUnits(totalSupply, decimals);\n            const args = [name, symbol, decimals, totalSupplyWithDecimals];\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC20Contract\",\n                args\n            );\n\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Depoly ERC20 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployERC721(deployNftParams: IDeployERC721Params) {\n        elizaLogger.debug(\"deployNftParams\", deployNftParams);\n\n        const { baseURI, name, symbol, chain } = deployNftParams;\n        if (!name || name === \"\") {\n            throw new Error(\"Token name is required\");\n        }\n        if (!symbol || symbol === \"\") {\n            throw new Error(\"Token symbol is required\");\n        }\n        if (!baseURI || baseURI === \"\") {\n            throw new Error(\"Token baseURI is required\");\n        }\n        try {\n            const args = [name, symbol, baseURI];\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC721Contract\",\n                args\n            );\n\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Depoly ERC721 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployERC1155(deploy1155Params: IDeployERC1155Params) {\n        elizaLogger.debug(\"deploy1155Params\", deploy1155Params);\n\n        const { baseURI, name, chain } = deploy1155Params;\n        if (!name || name === \"\") {\n            throw new Error(\"Token name is required\");\n        }\n        if (!baseURI || baseURI === \"\") {\n            throw new Error(\"Token baseURI is required\");\n        }\n        try {\n            const args = [name, baseURI];\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC1155Contract\",\n                args\n            );\n\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Depoly ERC1155 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployContract(\n        chain: SupportedChain,\n        contractName: string,\n        args: any[]\n    ): Promise<Address | null | undefined> {\n        const { abi, bytecode } = await compileSolidity(contractName);\n        if (!bytecode) {\n            throw new Error(\"Bytecode is empty after compilation\");\n        }\n\n        this.walletProvider.switchChain(chain);\n\n        const chainConfig = this.walletProvider.getChainConfigs(chain);\n        const walletClient = this.walletProvider.getWalletClient(chain);\n        const hash = await walletClient.deployContract({\n            account: this.walletProvider.getAccount(),\n            abi,\n            bytecode,\n            args,\n            chain: chainConfig,\n        });\n\n        elizaLogger.debug(\"Waiting for deployment transaction...\", hash);\n        const publicClient = this.walletProvider.getPublicClient(chain);\n        const receipt = await publicClient.waitForTransactionReceipt({\n            hash,\n        });\n        elizaLogger.debug(\"Contract deployed successfully!\");\n\n        return receipt.contractAddress;\n    }\n}\n\nexport const deployAction = {\n    name: \"DEPLOY_TOKEN\",\n    description:\n        \"Deploy token contracts (ERC20/721/1155) based on user specifications\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting deploy action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n\n        // Compose context\n        const context = composeContext({\n            state: currentState,\n            template: ercContractTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: context,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new DeployAction(walletProvider);\n        try {\n            const contractType = content.contractType;\n            let result: any;\n            switch (contractType.toLocaleLowerCase()) {\n                case \"erc20\":\n                    result = await action.deployERC20({\n                        chain: content.chain,\n                        decimals: content.decimals,\n                        symbol: content.symbol,\n                        name: content.name,\n                        totalSupply: content.totalSupply,\n                    });\n                    break;\n                case \"erc721\":\n                    result = await action.deployERC721({\n                        chain: content.chain,\n                        name: content.name,\n                        symbol: content.symbol,\n                        baseURI: content.baseURI,\n                    });\n                    break;\n                case \"erc1155\":\n                    result = await action.deployERC1155({\n                        chain: content.chain,\n                        name: content.name,\n                        baseURI: content.baseURI,\n                    });\n                    break;\n            }\n\n            if (result) {\n                callback?.({\n                    text: `Successfully create contract - ${result?.address}`,\n                    content: { ...result },\n                });\n            } else {\n                callback?.({\n                    text: \"Unsuccessfully create contract\",\n                    content: { ...result },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during deploy:\", error.message);\n            callback?.({\n                text: `Deploy failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: ercContractTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"deploy an ERC20 token with name 'MyToken', symbol 'MTK', decimals 18, total supply 10000\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC721 NFT contract with name 'MyNFT', symbol 'MNFT', baseURI 'https://my-nft-base-uri.com'\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC1155 contract with name 'My1155', baseURI 'https://my-1155-base-uri.com'\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"DEPLOY_ERC20\",\n        \"DEPLOY_ERC721\",\n        \"DEPLOY_ERC1155\",\n        \"CREATE_TOKEN\",\n        \"CREATE_NFT\",\n        \"CREATE_1155\",\n    ],\n};\n","import { elizaLogger } from \"@elizaos/core\";\nimport fs from \"node:fs\";\nimport { createRequire } from \"node:module\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport solc from \"solc\";\n\nconst require = createRequire(import.meta.url);\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-bnb/src/contracts\");\n\nfunction getContractSource(contractPath: string) {\n    return fs.readFileSync(contractPath, \"utf8\");\n}\n\nfunction findImports(importPath: string) {\n    try {\n        if (importPath.startsWith(\"@openzeppelin/\")) {\n            const modPath = require.resolve(importPath);\n            return { contents: fs.readFileSync(modPath, \"utf8\") };\n        }\n\n        const localPath = path.resolve(\"./contracts\", importPath);\n        if (fs.existsSync(localPath)) {\n            return { contents: fs.readFileSync(localPath, \"utf8\") };\n        }\n        return { error: \"File not found\" };\n    } catch {\n        return { error: `File not found: ${importPath}` };\n    }\n}\n\nexport async function compileSolidity(contractFileName: string) {\n    const contractPath = path.join(baseDir, `${contractFileName}.sol`);\n    const source = getContractSource(contractPath);\n\n    const input = {\n        language: \"Solidity\",\n        sources: {\n            [contractFileName]: {\n                content: source,\n            },\n        },\n        settings: {\n            optimizer: {\n                enabled: true,\n                runs: 200,\n            },\n            outputSelection: {\n                \"*\": {\n                    \"*\": [\"*\"],\n                },\n            },\n        },\n    };\n\n    elizaLogger.debug(\"Compiling contract...\");\n\n    try {\n        const output = JSON.parse(\n            solc.compile(JSON.stringify(input), { import: findImports })\n        );\n\n        if (output.errors) {\n            const hasError = output.errors.some(\n                (error) => error.type === \"Error\"\n            );\n            if (hasError) {\n                throw new Error(\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\n                );\n            }\n            elizaLogger.warn(\"Compilation warnings:\", output.errors);\n        }\n\n        const contractName = path.basename(contractFileName, \".sol\");\n        const contract = output.contracts[contractFileName][contractName];\n\n        if (!contract) {\n            throw new Error(\"Contract compilation result is empty\");\n        }\n\n        elizaLogger.debug(\"Contract compiled successfully\");\n        return {\n            abi: contract.abi,\n            bytecode: contract.evm.bytecode.object,\n        };\n    } catch (error) {\n        elizaLogger.error(\"Compilation failed:\", error.message);\n        throw error;\n    }\n}\n","import {\n  MsgCreateBucket,\n  MsgDeleteObject,\n} from \"@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx\";\nimport { createRequire } from \"module\";\nimport {\n  composeContext,\n  elizaLogger,\n  generateObjectDeprecated,\n  HandlerCallback,\n  Media,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { readFileSync, statSync } from \"fs\";\nimport { lookup } from \"mime-types\";\nimport { extname } from \"node:path\";\nimport { CONFIG, getGnfdConfig, InitGnfdClient } from \"../providers/gnfd\";\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport { greenfieldTemplate } from \"../templates\";\nimport { DelegatedPubObjectRequest } from \"@bnb-chain/greenfield-js-sdk\";\nimport { SupportedChain } from \"../types\";\nimport { CROSS_CHAIN_ABI } from \"../abi/CrossChainAbi\";\nimport { TOKENHUB_ABI } from \"../abi/TokenHubAbi\";\nimport { parseEther, stringToHex } from \"viem\";\n\nexport { greenfieldTemplate };\n\nconst require = createRequire(import.meta.url);\nconst {\n  Client,\n  Long,\n  VisibilityType,\n} = require(\"@bnb-chain/greenfield-js-sdk\");\n\nexport class GreenfieldAction {\n  constructor(\n      private walletProvider: WalletProvider,\n      private gnfdClient: typeof Client\n  ) {}\n\n  async getSps() {\n      const sps = await this.gnfdClient.sp.getStorageProviders();\n\n      return sps;\n  }\n\n  async selectSp() {\n      const finalSps = await this.getSps();\n\n      const selectIndex = Math.floor(Math.random() * finalSps.length);\n\n      const secondarySpAddresses = [\n          ...finalSps.slice(0, selectIndex),\n          ...finalSps.slice(selectIndex + 1),\n      ].map((item) => item.operatorAddress);\n      const selectSpInfo = {\n          id: finalSps[selectIndex].id,\n          endpoint: finalSps[selectIndex].endpoint,\n          primarySpAddress: finalSps[selectIndex]?.operatorAddress,\n          sealAddress: finalSps[selectIndex].sealAddress,\n          secondarySpAddresses,\n      };\n\n      return selectSpInfo;\n  }\n\n  async bnbTransferToGnfd(amount: bigint, runtime: IAgentRuntime) {\n      const config = await getGnfdConfig(runtime)\n\n      const chain: SupportedChain = config.NETWORK === 'TESTNET' ? 'bscTestnet' : 'bsc'\n      this.walletProvider.switchChain(chain);\n      const publicClient = this.walletProvider.getPublicClient(chain);\n      const walletClient = this.walletProvider.getWalletClient(chain);\n\n      const [relayFee, ackRelayFee] = await publicClient.readContract({\n          address: config.CROSSCHAIN_ADDRESS as `0x${string}`,\n          abi: CROSS_CHAIN_ABI,\n          functionName: \"getRelayFees\",\n      });\n      const relayerFee = relayFee + ackRelayFee;\n      const totalAmount = relayerFee + amount;\n\n      const { request } = await publicClient.simulateContract({\n          account: this.walletProvider.getAccount(),\n          address: config.TOKENHUB_ADDRESS as `0x${string}`,\n          abi: TOKENHUB_ABI,\n          functionName: \"transferOut\",\n          args: [this.walletProvider.getAddress(), amount],\n          value: totalAmount,\n      });\n\n      const hash = await walletClient.writeContract(request);\n      const tx = await publicClient.waitForTransactionReceipt({\n          hash,\n      });\n\n      return tx.transactionHash;\n  }\n\n  async createBucket(msg: MsgCreateBucket) {\n      elizaLogger.log(\"create bucket...\");\n      const createBucketTx = await this.gnfdClient.bucket.createBucket(msg);\n\n      const createBucketTxSimulateInfo = await createBucketTx.simulate({\n          denom: \"BNB\",\n      });\n\n      const createBucketTxRes = await createBucketTx.broadcast({\n          denom: \"BNB\",\n          gasLimit: Number(createBucketTxSimulateInfo?.gasLimit),\n          gasPrice: createBucketTxSimulateInfo?.gasPrice || \"5000000000\",\n          payer: msg.paymentAddress,\n          granter: \"\",\n          privateKey: this.walletProvider.getPk(),\n      });\n\n      elizaLogger.log(\"createBucketTxRes\", createBucketTxRes);\n\n      if (createBucketTxRes.code === 0) {\n          elizaLogger.log(\"create bucket success\");\n      }\n      return createBucketTxRes.transactionHash;\n  }\n\n  async headBucket(bucketName: string) {\n      const {bucketInfo} = await this.gnfdClient.bucket.headBucket(bucketName)\n      return bucketInfo.id;\n  }\n\n  async uploadObject(msg: DelegatedPubObjectRequest) {\n      const uploadRes = await this.gnfdClient.object.delegateUploadObject(\n          msg,\n          {\n              type: \"ECDSA\",\n              privateKey: this.walletProvider.getPk(),\n          }\n      );\n      if (uploadRes.code === 0) {\n          elizaLogger.log(\"upload object success\");\n      }\n      return uploadRes.message;\n  }\n\n  async headObject(bucketName: string, objectName: string) {\n      const {objectInfo} = await this.gnfdClient.object.headObject(bucketName, objectName);\n      return objectInfo.id;\n  }\n\n  async deleteObject(msg: MsgDeleteObject) {\n      const deleteObjectTx = await this.gnfdClient.object.deleteObject(msg);\n\n      const simulateInfo = await deleteObjectTx.simulate({\n          denom: \"BNB\",\n      });\n\n      const res = await deleteObjectTx.broadcast({\n          denom: \"BNB\",\n          gasLimit: Number(simulateInfo?.gasLimit),\n          gasPrice: simulateInfo?.gasPrice || \"5000000000\",\n          payer: msg.operator,\n          granter: \"\",\n          privateKey: this.walletProvider.getPk(),\n      });\n\n      if (res.code === 0) {\n          elizaLogger.log(\"delete success\");\n      }\n\n      return res.transactionHash;\n  }\n}\n\nexport const greenfieldAction = {\n  name: \"GREENFIELD_ACTION\",\n  description:\n      \"create bucket, upload object, delete object on the greenfield chain\",\n  handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State,\n      _options: any,\n      callback?: HandlerCallback\n  ) => {\n      elizaLogger.log(\"Starting Gnfd action...\");\n\n      // Initialize or update state\n      if (!state) {\n          state = (await runtime.composeState(message)) as State;\n      } else {\n          state = await runtime.updateRecentMessageState(state);\n      }\n\n      // Compose context\n      const context = composeContext({\n          state,\n          template: greenfieldTemplate,\n      });\n      const content = await generateObjectDeprecated({\n          runtime,\n          context: context,\n          modelClass: ModelClass.LARGE,\n      });\n\n      elizaLogger.log(\"content\", content);\n\n      const config = await getGnfdConfig(runtime)\n      const gnfdClient = await InitGnfdClient(runtime);\n      const walletProvider = initWalletProvider(runtime);\n      const action = new GreenfieldAction(walletProvider, gnfdClient);\n\n      const actionType = content.actionType;\n      const spInfo = await action.selectSp();\n\n      elizaLogger.log('content', content)\n\n      const { bucketName, objectName } = content;\n      const attachments = message.content.attachments;\n\n      try {\n          let result = '';\n          switch (actionType) {\n              case \"createBucket\": {\n                  const msg = {\n                      bucketName: bucketName,\n                      creator: walletProvider.account.address,\n                      visibility: VisibilityType.VISIBILITY_TYPE_PUBLIC_READ,\n                      chargedReadQuota: Long.fromString(\"0\"),\n                      paymentAddress: walletProvider.account.address,\n                      primarySpAddress: spInfo.primarySpAddress,\n                  }\n                  const hash = await action.createBucket(msg);\n                  const bucketId = await action.headBucket(msg.bucketName)\n                  result = `create bucket successfully, details: ${config.GREENFIELD_SCAN}/bucket/${toHex(bucketId)}`;\n                  break;\n              }\n\n              case \"uploadObject\": {\n                  if (!attachments) {\n                      throw new Error(\"no file to upload\");\n                  }\n\n                  const uploadObjName = objectName;\n\n                  await action.uploadObject({\n                      bucketName,\n                      objectName: uploadObjName,\n                      body: generateFile(attachments[0]),\n                      delegatedOpts: {\n                          visibility: VisibilityType.VISIBILITY_TYPE_PUBLIC_READ,\n                      },\n                  });\n\n                  const objectId = await action.headObject(bucketName, objectName)\n\n                  if (attachments.length > 1) {\n                      result += `Only one object can be uploaded. \\n`;\n                  }\n                  result += `Upload object (${uploadObjName}) successfully, details: ${config.GREENFIELD_SCAN}/object/${toHex(objectId)}`;\n                  break;\n              }\n\n              case \"deleteObject\": {\n                  const hash = await action.deleteObject({\n                      bucketName,\n                      objectName,\n                      operator: walletProvider.account.address,\n                  });\n                  result = `delete object successfully, hash: 0x${hash}`;\n                  break;\n              }\n\n              case \"crossChainTransfer\": {\n                  const hash = await action.bnbTransferToGnfd(parseEther(String(content.amount)), runtime)\n                  result = `transfer bnb to greenfield successfully, hash: ${hash}`;\n                  break;\n              }\n          }\n          if (result) {\n              callback?.({\n                  text: result,\n              });\n          } else {\n              callback?.({\n                  text: `Unsuccessfully ${actionType || ''}`,\n                  content: result,\n              });\n          }\n\n          return true;\n      } catch (error)  {\n          elizaLogger.error(\"Error execute greenfield action:\", error.message);\n          callback?.({\n              text: `Bridge failed: ${error.message}`,\n              content: { error: error.message },\n          });\n          return false;\n      }\n  },\n  template: greenfieldTemplate,\n  validate: async (_runtime: IAgentRuntime) => {\n      return true;\n  },\n  examples: [\n      [\n          {\n              user: \"user\",\n              content: {\n                  text: \"Create a bucket(${bucketName}) on greenfield\",\n                  action: \"GREENFIELD_ACTION\",\n              },\n          },\n          {\n              user: \"user\",\n              content: {\n                  text: \"Upload a object(${objectName}) in bucket(${bucketName}) on greenfield\",\n                  action: \"GREENFIELD_ACTION\",\n              },\n          },\n          {\n              user: \"user\",\n              content: {\n                  text: \"Delete object(${objectName}) in bucket(${bucketName}) on greenfield\",\n                  action: \"GREENFIELD_ACTION\",\n              },\n          },\n          {\n              user: \"user\",\n              content: {\n                  text: \"Cross Chain Transfer 0.00001 BNB to myself greenfield for create account\",\n                  action: \"GREENFIELD_ACTION\",\n                  content: {\n                      amount: \"0.00001\"\n                  }\n              },\n          },\n      ],\n  ],\n  similes: [\n      \"GREENFIELD_ACTION\",\n      \"CREATE_BUCKET\",\n      \"UPLOAD_OBJECT\",\n      \"DELETE_BUCKET\",\n      \"TRANSFER_BNB_TO_GREENFIELD\",\n  ],\n};\n\nfunction generateFile(attachment: Media) {\n  const filePath = fixPath(attachment.url);\n\n  elizaLogger.log(\"filePath\", filePath);\n\n  const stats = statSync(filePath);\n  const fileSize = stats.size;\n  const name = extname(filePath);\n  const type = lookup(name);\n\n  if (!type) throw new Error(`Unsupported file type: ${filePath}`);\n\n  return {\n      name: filePath,\n      type,\n      size: fileSize,\n      content: readFileSync(filePath),\n  };\n}\n\nfunction fixPath(url: string) {\n  return url.replace(\"/agent/agent/\", \"/agent/\");\n}\n\nfunction toHex(n: string) {\n  return \"0x\" + Number(n).toString(16).padStart(64, '0');\n}\n","import { createRequire } from \"module\";\nimport { IAgentRuntime } from \"@elizaos/core\";\n\nconst require = createRequire(import.meta.url);\nconst { Client } = require(\"@bnb-chain/greenfield-js-sdk\");\n\nexport const getGnfdConfig = async (runtime: IAgentRuntime) => {\n    const network = runtime.getSetting(\"GREENFIELD_NETWORK\");\n    const config =\n    network === \"TESTNET\" ? CONFIG[\"TESTNET\"] : CONFIG[\"MAINNET\"];\n\n    return config\n}\n\nexport const InitGnfdClient = async (runtime: IAgentRuntime) => {\n    const config = await getGnfdConfig(runtime)\n    if (!config.GREENFIELD_CHAIN_ID || !config.GREENFIELD_RPC_URL) {\n        throw new Error(\"Creating greenfield client params is error\");\n    }\n\n    const client = Client.create(\n        config.GREENFIELD_RPC_URL,\n        config.GREENFIELD_CHAIN_ID\n    );\n\n    return client;\n};\n\nexport const CONFIG = {\n    MAINNET: {\n        NETWORK: \"MAINNET\",\n        TOKENHUB_ADDRESS: \"0xeA97dF87E6c7F68C9f95A69dA79E19B834823F25\",\n        CROSSCHAIN_ADDRESS: \"0x77e719b714be09F70D484AB81F70D02B0E182f7d\",\n        GREENFIELD_RPC_URL: \"https://greenfield-chain.bnbchain.org\",\n        GREENFIELD_CHAIN_ID: \"1017\",\n        GREENFIELD_SCAN: 'https://greenfieldscan.com'\n    },\n    TESTNET: {\n        NETWORK: \"TESTNET\",\n        TOKENHUB_ADDRESS: \"0xED8e5C546F84442219A5a987EE1D820698528E04\",\n        CROSSCHAIN_ADDRESS: \"0xa5B2c9194131A4E0BFaCbF9E5D6722c873159cb7\",\n        GREENFIELD_RPC_URL:\n            \"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org\",\n        GREENFIELD_CHAIN_ID: \"5600\",\n        GREENFIELD_SCAN: 'https://testnet.greenfieldscan.com'\n    },\n};\n","export const CROSS_CHAIN_ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n        ],\n        name: \"AddChannel\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"srcChainId\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"dstChainId\",\n                type: \"uint32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"oracleSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"payload\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"CrossChainPackage\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isEnable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"EnableOrDisableChannel\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ParamChange\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalTypeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"proposer\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint128\",\n                name: \"quorum\",\n                type: \"uint128\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint128\",\n                name: \"expiredAt\",\n                type: \"uint128\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"contentHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposalSubmitted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"packageType\",\n                type: \"uint8\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"ReceivedPackage\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"executor\",\n                type: \"address\",\n            },\n        ],\n        name: \"Reopened\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"executor\",\n                type: \"address\",\n            },\n        ],\n        name: \"Suspended\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"lowLevelData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnexpectedFailureAssertionInPackageHandler\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"reason\",\n                type: \"string\",\n            },\n        ],\n        name: \"UnexpectedRevertInPackageHandler\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"payload\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnsupportedPackage\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ACK_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CANCEL_TRANSFER_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CODE_OK\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CROSS_CHAIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"EMERGENCY_PROPOSAL_EXPIRE_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"EMPTY_CONTENT_HASH\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ERROR_FAIL_DECODE\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"FAIL_ACK_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"IN_TURN_RELAYER_VALIDITY_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"LIGHT_CLIENT\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"OUT_TURN_RELAYER_BACKOFF_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROXY_ADMIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"RELAYER_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REOPEN_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SUSPEND_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SYN_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_CHANNEL_ID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_OUT_CHANNEL_ID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"batchSizeForOracle\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callbackGasPrice\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"attacker\",\n                type: \"address\",\n            },\n        ],\n        name: \"cancelTransfer\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"chainId\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelHandlerMap\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelReceiveSequenceMap\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelSendSequenceMap\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"emergencyProposals\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"quorum\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"uint128\",\n                name: \"expiredAt\",\n                type: \"uint128\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"contentHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"packageType\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ackRelayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"encodePayload\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRelayFees\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_minAckRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"gnfdChainId\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_payload\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_blsSignature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_validatorsBitSet\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"handlePackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint16\",\n                name: \"_gnfdChainId\",\n                type: \"uint16\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isSuspended\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minAckRelayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"oracleSequence\",\n        outputs: [\n            {\n                internalType: \"int64\",\n                name: \"\",\n                type: \"int64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"previousTxHeight\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"quorumMap\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"registeredContractChannelMap\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"relayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"reopen\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ackRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"sendSynPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"suspend\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"txCounter\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"updateParam\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"upgradeInfo\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"version\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"description\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n] as const;\n","export const TOKENHUB_ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ParamChange\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReceiveTransferIn\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"status\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"RefundFailure\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"status\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"RefundSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RewardTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferInSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"senderAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"relayFee\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"ackRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferOutSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnexpectedPackage\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"APP_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CODE_OK\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CROSS_CHAIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ERROR_FAIL_DECODE\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"LIGHT_CLIENT\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MAX_GAS_FOR_TRANSFER_BNB\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROXY_ADMIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"RELAYER_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REWARD_UPPER_LIMIT\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_INSUFFICIENT_BALANCE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_NON_PAYABLE_RECIPIENT\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_UNKNOWN\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_SUCCESS\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_OUT_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"claimRelayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"govHub\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleAckPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleFailAckPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleSynPackage\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferOut\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n] as const;\n","export * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { bnbWalletProvider } from \"./providers/wallet\";\nimport { getBalanceAction } from \"./actions/getBalance\";\nimport { bridgeAction } from \"./actions/bridge\";\nimport { stakeAction } from \"./actions/stake\";\nimport { faucetAction } from \"./actions/faucet\";\nimport { deployAction } from \"./actions/deploy\";\nimport { greenfieldAction } from \"./actions/gnfd\";\n\nexport const bnbPlugin: Plugin = {\n    name: \"bnb\",\n    description:\n        \"BNB Smart Chain (BSC) and opBNB integration plugin supporting transfers, swaps, staking, bridging, and token deployments\",\n    providers: [bnbWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [\n        getBalanceAction,\n        transferAction,\n        swapAction,\n        bridgeAction,\n        stakeAction,\n        faucetAction,\n        deployAction,\n        greenfieldAction,\n    ],\n};\n\nexport default bnbPlugin;\n"],"mappings":"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","names":["composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatUnits","parseEther","erc20Abi","elizaLogger","publicClient","parseEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","getToken","erc20Abi","formatEther","formatUnits","elizaLogger","getToken","formatEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","parseEther","parseUnits","erc20Abi","elizaLogger","parseEther","erc20Abi","parseUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatEther","parseEther","erc20Abi","elizaLogger","parseEther","erc20Abi","formatEther","txHash","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","txHash","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","solc","parseUnits","elizaLogger","require","elizaLogger","solc","parseUnits","composeContext","generateObjectDeprecated","ModelClass","createRequire","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","createRequire","require","parseEther","require","createRequire","Client","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","parseEther"]}